{"version":3,"file":"static/js/213.15e7ff9f.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactAutocomplete.tsx","Components/TextButton.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import { Autocomplete, AutocompleteProps, Chip, TextField, useTheme } from '@mui/material';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport KeyMap from '../../KeyMap';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\nimport { allArtifactSets, allElementsWithPhy, ArtifactSetKey } from '../../Types/consts';\nimport MenuItemWithImage from '../MenuItemWithImage';\nimport SolidColoredTextField from '../SolidColoredTextfield';\nimport StatIcon from '../StatIcon';\n\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey> = {\n  key: T\n  label: string\n}\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtifactKeys: readonly T[]\n  selectedArtifactKeys: T[]\n  setArtifactKeys: (keys: T[]) => void\n  getName: (key: T) => string\n  getImage: (key: T) => JSX.Element\n  label: string\n}\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey>({ allArtifactKeys, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\n  ArtifactMultiAutocompleteProps<T>) {\n  const theme = useTheme()\n\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T>[]) => {\n    setArtifactKeys(value.map(v => v.key))\n  }\n  const options = useMemo(() => allArtifactKeys.map(key => ({ key: key, label: getName(key) })), [allArtifactKeys, getName])\n  return <Autocomplete\n    autoHighlight\n    multiple\n    disableCloseOnSelect\n    options={options}\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\n    onChange={handleChange}\n    getOptionLabel={(option) => option.label}\n    isOptionEqualToValue={(option, value) => option.key === value.key}\n    renderInput={(params) => <TextField\n      {...params}\n      label={label}\n      variant=\"filled\"\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\n      type=\"search\"\n    />}\n    renderOption={(props, option) => (\n      <MenuItemWithImage\n        key={option.key}\n        value={option.key}\n        image={getImage(option.key)}\n        text={option.label}\n        theme={theme}\n        isSelected={selectedArtifactKeys.includes(option.key)}\n        props={props}\n      />\n    )}\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\n      const color = element ? element : undefined\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\n    })}\n    {...props}\n  />\n}\n\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  artSetKeys: ArtifactSetKey[]\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\n}\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const { t } = useTranslation(\"artifact\")\n  if (!artifactSheets) return null\n  return <ArtifactMultiAutocomplete<ArtifactSetKey>\n    allArtifactKeys={allArtifactSets}\n    selectedArtifactKeys={artSetKeys}\n    setArtifactKeys={setArtSetKeys}\n    getName={(key: ArtifactSetKey) => artifactSheets[key].nameRaw}\n    getImage={(key: ArtifactSetKey) => artifactSheets[key].defIcon}\n    label={t(\"autocompleteLabels.set\")}\n    {...props}\n  />\n}\n\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  mainStatKeys: MainStatKey[]\n  setMainStatKeys: (keys: MainStatKey[]) => void\n}\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\n  const { t } = useTranslation(\"artifact\")\n  return <ArtifactMultiAutocomplete<MainStatKey>\n    allArtifactKeys={allMainStatKeys}\n    selectedArtifactKeys={mainStatKeys}\n    setArtifactKeys={setMainStatKeys}\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\n    getImage={(key: MainStatKey) => StatIcon[key]}\n    label={t(\"autocompleteLabels.mainStat\")}\n    {...props}\n  />\n}\n\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  substatKeys: SubstatKey[]\n  setSubstatKeys: (keys: SubstatKey[]) => void\n}\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\n  const { t } = useTranslation(\"artifact\")\n  return <ArtifactMultiAutocomplete<SubstatKey>\n    allArtifactKeys={allSubstatKeys}\n    selectedArtifactKeys={substatKeys}\n    setArtifactKeys={setSubstatKeys}\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\n    getImage={(key: SubstatKey) => StatIcon[key]}\n    label={t(\"autocompleteLabels.substat\")}\n    {...props}\n  />\n}\n\ntype ArtifactSingleAutocompleteKey = (ArtifactSetKey | \"\") | (MainStatKey | \"\") | (SubstatKey | \"\")\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey> = {\n  key: T\n  label: string\n}\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtifactKeys: readonly T[]\n  selectedArtifactKey: T\n  setArtifactKey: (key: T | \"\") => void\n  getName: (key: T) => string\n  getImage: (key: T) => JSX.Element\n  label: string\n  disable?: (v: any) => boolean\n  showDefault?: boolean\n  defaultText?: string\n  defaultIcon?: Displayable\n  flattenCorners?: boolean\n}\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey>({ allArtifactKeys, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable= () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", flattenCorners = false, ...props }:\n  ArtifactSingleAutocompleteProps<T>) {\n  const theme = useTheme();\n\n  const options = useMemo(() =>\n    (showDefault\n      ? [{ key: \"\" as T, label: defaultText }]\n      : []\n    ).concat(allArtifactKeys.map(key => (\n      { key: key, label: getName(key) }\n    ))), [allArtifactKeys, getName, defaultText, showDefault])\n  return <Autocomplete\n    autoHighlight\n    options={options}\n    clearIcon={selectedArtifactKey ? undefined : \"\"} // Hide the clear icon if the value is already default\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\n    onChange={(event, newValue, reason) => (event.type !== \"change\" || reason !== \"clear\") && setArtifactKey(newValue ? newValue.key : \"\")}\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\n    isOptionEqualToValue={(option, value) => option.key === value.key}\n    getOptionDisabled={option => option.key ? disable(option.key) : false}\n    renderInput={(props) => <SolidColoredTextField\n      {...props}\n      label={label}\n      startAdornment={getImage(selectedArtifactKey)}\n      hasValue={selectedArtifactKey ? true : false}\n      flattenCorners={flattenCorners}\n    />}\n    renderOption={(props, option) => (\n      <MenuItemWithImage\n        key={option.key}\n        value={option.key}\n        image={getImage(option.key)}\n        text={option.label}\n        theme={theme}\n        isSelected={selectedArtifactKey === option.key}\n        props={props}\n      />\n    )}\n    {...props}\n  />\n}\n\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\">, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtSetKeys?: readonly ArtifactSetKey[]\n  artSetKey: ArtifactSetKey | \"\"\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\n  label?: string\n  disable?: (v: any) => boolean\n  showDefault?: boolean\n  defaultText?: string\n  defaultIcon?: Displayable\n  flattenCorners?: boolean\n}\nexport function ArtifactSetSingleAutocomplete({ allArtSetKeys = allArtifactSets, artSetKey, setArtSetKey, label = \"\", flattenCorners, ...props }: ArtifactSetSingleAutocompleteProps) {\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const { t } = useTranslation(\"artifact\")\n  label = label ? label : t(\"autocompleteLabels.set\")\n  if (!artifactSheets) return null\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\">\n    allArtifactKeys={allArtSetKeys}\n    selectedArtifactKey={artSetKey}\n    setArtifactKey={setArtSetKey}\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets[key].nameRaw}\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets[key].defIcon : <></>}\n    label={label}\n    flattenCorners={flattenCorners}\n    {...props}\n  />\n}\n","import { Button, ButtonProps, styled } from \"@mui/material\";\n\nconst DisabledButton = styled(Button)(({ theme }) => ({\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.text.secondary,\n  }\n}))\n\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\n  return <DisabledButton {...props} disabled  >\n    {children}\n  </DisabledButton>\n}\n","import { ButtonProps, MenuItem } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { ArtifactRarity } from \"../../Types/consts\";\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\nimport { Stars } from \"../StarDisplay\";\n\ntype props = ButtonProps & {\n  rarity?: ArtifactRarity\n  onChange: (rarity: ArtifactRarity) => void\n  filter: (ArtifactRarity) => boolean\n}\n\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\n  const { t } = useTranslation(\"artifact\")\n  return <DropdownButton\n    {...props}\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\n    color={rarity ? \"success\" : \"primary\"}\n  >\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\n        <Stars stars={rarity} />\n      </MenuItem>)}\n  </DropdownButton>\n}\n","import { Replay } from \"@mui/icons-material\"\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\n\ntype ArtifactSlotDropdownProps = ButtonProps & {\n  slotKey?: SlotKey | \"\"\n  onChange: (slotKey: SlotKey | \"\") => void\n  hasUnselect?: boolean\n}\n\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  return <DropdownButton\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\n    color={slotKey ? \"success\" : \"primary\"}\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\n    {...props}\n  >\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <ListItemText>\n        {t`ui:unselect`}\n      </ListItemText>\n    </MenuItem>}\n    {hasUnselect && <Divider />}\n    {allSlotKeys.map(key =>\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\n        <ListItemIcon>\n          {artifactSlotIcon(key)}\n        </ListItemIcon>\n        <ListItemText>\n          {t(`artifact:slotName:${key}`)}\n        </ListItemText>\n      </MenuItem>)}\n  </DropdownButton>\n}\n","import { TextField, TextFieldProps } from '@mui/material'\nimport { useCallback, useEffect, useState } from 'react'\ntype props = TextFieldProps & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\n  const [state, setState] = useState(\"\")\n  const sendChange = useCallback(\n    () => {\n      if (state === \"\") return onChange(0)\n      const parseFunc = float ? parseFloat : parseInt\n      onChange(parseFunc(state))\n    },\n    [onChange, state, float],\n  )\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\n\n  return <TextField\n    value={state}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    onChange={(e: any) => setState(e.target.value)}\n    onBlur={sendChange}\n    disabled={disabled}\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\n    {...props}\n  />\n}","import { Grid, Typography } from '@mui/material';\nimport React from 'react';\nimport { Trans } from 'react-i18next';\nimport CardLight from '../../../Components/Card/CardLight';\nimport InfoTooltip from '../../../Components/InfoTooltip';\nimport PercentBadge from '../../PercentBadge';\n\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\n  return <CardLight sx={{ py: 1, px: 2 }}>\n    <Grid container spacing={1}>\n      <Grid item>{t(`editor.${eff}`)}</Grid>\n      <Grid item flexGrow={1}>\n        <InfoTooltip title={<span>\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\n        </span>} />\n      </Grid>\n      <Grid item xs=\"auto\">\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\n      </Grid>\n    </Grid>\n  </CardLight>\n}\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport CardLight from '../../../Components/Card/CardLight';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\nimport SqBadge from '../../../Components/SqBadge';\nimport StatIcon from '../../../Components/StatIcon';\nimport TextButton from '../../../Components/TextButton';\nimport Artifact from '../../../Data/Artifacts/Artifact';\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\nimport { allSubstatKeys, ICachedArtifact, ISubstat } from '../../../Types/artifact';\nimport { clamp } from '../../../Util/Util';\nimport PercentBadge from '../../PercentBadge';\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\n  const { t } = useTranslation(\"artifact\")\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\n\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\n  const unit = KeyMap.unit(key), rollNum = rolls.length\n\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\n\n  if (artifact) {\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\n    const rarity = artifact.rarity\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\n    const maxRollNum = numUpgrades + high - 3;\n    allowedRolls = maxRollNum - rollNum\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\n  }\n  const rollOffset = 7 - rollData.length\n\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\n\n  return <CardLight>\n    <Box sx={{ display: \"flex\" }}>\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\n        <DropdownButton\n          startIcon={key ? StatIcon[key] : undefined}\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\n          disabled={!artifact}\n          color={key ? \"success\" : \"primary\"}\n          sx={{ whiteSpace: \"nowrap\" }}>\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\n          {allSubstatKeys.filter(key => mainStatKey !== key)\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\n            </MenuItem>)}\n        </DropdownButton>\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\n          <CustomNumberInput\n            float={unit === \"%\"}\n            placeholder={t`editor.substat.selectSub`}\n            value={key ? value : undefined}\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\n            disabled={!key}\n            error={!!error}\n            sx={{\n              px: 1,\n            }}\n            inputProps={{\n              sx: { textAlign: \"right\" }\n            }}\n          />\n        </CustomNumberInputButtonGroupWrapper>\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\n        {rollData.map((v, i) => {\n          let newValue = cacheValueString(accurateValue + v, unit)\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\n        })}\n      </ButtonGroup>\n    </Box>\n    <Box sx={{ p: 1, }}>\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\n        <Grid item>\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\n          </SqBadge>\n        </Grid>\n        <Grid item flexGrow={1}>\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\n        </Grid>\n        <Grid item xs=\"auto\" flexShrink={1}>\n          <Typography>\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\n            </Trans>\n          </Typography>\n        </Grid>\n      </Grid>}\n\n    </Box>\n  </CardLight >\n}\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\nimport CardDark from '../../../Components/Card/CardDark';\nimport CloseButton from '../../../Components/CloseButton';\nimport ModalWrapper from '../../../Components/ModalWrapper';\nimport scan_art_main from \"./imgs/scan_art_main.png\";\nimport Snippet from \"./imgs/snippet.png\";\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\n  return <ModalWrapper open={modalShow} onClose={hide} >\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={hide} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Alert variant=\"outlined\" severity=\"warning\">\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\n        </Alert>\n        <Grid container spacing={1} mt={1}>\n          <Grid item xs={8} md={4}>\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\n          </Grid>\n          <Grid item xs={12} md={8}>\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\n            <Typography variant=\"h6\">Single artifact</Typography>\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\n          </Grid>\n          <Grid item xs={12} md={7}>\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\n          </Grid>\n          <Grid item xs={8} md={5}>\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={hide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}","export class BorrowManager<T> {\n  data: Dict<string, { value: T, refCount: number }> = {}\n  init: (key: string) => T\n  deinit: (key: string, value: T) => void\n\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\n    this.init = init\n    this.deinit = deinit\n  }\n\n  /**\n   * Borrow the object corresponding to `key`, creating the object as necessary.\n   * The borrowing ends when `callback`'s promise is fulfilled.\n   * When the last borrowing ends, `deinit` the object.\n   *\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\n   */\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\n    if (!this.data[key]) {\n      this.data[key] = { value: this.init(key), refCount: 0 }\n    }\n\n    const box = this.data[key]!\n    box.refCount += 1\n    const result = await callback(box.value)\n    box.refCount -= 1\n    if (!box.refCount) {\n      // Last user. Cleaning up\n      delete this.data[key]\n      this.deinit(key, box.value)\n    }\n    return result\n  }\n}\n","import React from 'react';\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\nimport ColorText from '../Components/ColoredText';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport { allMainStatKeys, allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\nimport { BorrowManager } from './BorrowManager';\n\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\nconst workerCount = 2\n\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\n  const scheduler = createScheduler()\n  const promises = Array(workerCount).fill(0).map(async _ => {\n    const worker = createWorker({\n      errorHandler: console.error\n    })\n\n    await worker.load()\n    await worker.loadLanguage(language)\n    await worker.initialize(language)\n    scheduler.addWorker(worker)\n  })\n\n  await Promise.any(promises)\n  return scheduler\n}, (_language, value) => {\n  value.then(value => value.terminate())\n})\n\nexport type ProcessedEntry = {\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\n}\nexport type OutstandingEntry = {\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\n}\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\ntype ProcessingMessage = { type: \"processing\" }\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\ntype PopMessage = { type: \"pop\" }\ntype ClearMessage = { type: \"clear\" }\ntype Color = [number, number, number] // RGB\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\n  switch (message.type) {\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\n    case \"processing\": // Processing `outstanding` head. Refresh\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\n    case \"processed\":\n      if (queue.outstanding[0].file === message.file)\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\n      return queue // Not in the list, ignored\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\n    case \"clear\": return { processed: [], outstanding: [] }\n  }\n}\n\nexport function processEntry(entry: OutstandingEntry) {\n  if (entry.result) return\n\n  const { file, fileName } = entry\n  entry.imageURL = fileToURL(file)\n  entry.result = entry.imageURL.then(async imageURL => {\n    const sheets = await ArtifactSheet.getAll\n    const ocrResult = await ocr(imageURL)\n\n    const [artifact, texts] = findBestArtifact(\n      sheets, ocrResult.rarities,\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\n      parseSlotKeys(ocrResult.whiteTexts),\n      parseSubstats(ocrResult.substatTexts),\n      parseMainStatKeys(ocrResult.whiteTexts),\n      parseMainStatValues(ocrResult.whiteTexts)\n    )\n\n    return { file, result: { fileName, imageURL, artifact, texts } }\n  })\n}\n\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\n  const reader = new FileReader()\n  reader.onloadend = ({ target }) =>\n    resolve(target!.result as string)\n  reader.readAsDataURL(file)\n})\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\n  const img = new Image()\n  img.onload = ({ target }) =>\n    resolve(imageToImageData(target as HTMLImageElement))\n  img.src = urlFile\n})\nfunction imageToImageData(image: HTMLImageElement): ImageData {\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\n  canvas.width = image.width\n  canvas.height = image.height\n  context.drawImage(image, 0, 0, image.width, image.height)\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\n}\nfunction imageDataToCanvas(imageData: ImageData) {\n  // create off-screen canvas element\n  const canvas = document.createElement('canvas')\n  canvas.width = imageData.width\n  canvas.height = imageData.height\n\n  // update canvas with new data\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\n  return canvas // produces a PNG file\n}\n\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\n  const imageData = await urlToImageData(imageURL)\n\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\n\n  const awaits = [\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\n  ]\n\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\n}\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\n  const canvas = imageDataToCanvas(imageData)\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\n  return rec.data.lines.map(line => line.text)\n}\n\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\n  // TODO: restore\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\n\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\n    // TODO: restore\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\n    location: \"\", lock: false, exclude: false,\n  }]\n\n  // Rate each rarity\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\n    let score = 0\n    if (textSetKeys.size) {\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\n      score += count / textSetKeys.size\n    }\n    if (substats.length) {\n      const count = substats.reduce((count, substat) =>\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\n      score += count / substats.length * 2\n    }\n    return score\n  })\n\n  // Test all *probable* combinations\n  for (const slotKey of allSlotKeys) {\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\n      const relevantMainStatValues = mainStatValues\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\n        .map(value => value.mainStatValue)\n\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\n        const rarity = parseInt(rarityString) as ArtifactRarity\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\n        const rarityScore = mainStatScore + rarityIndividualScore\n\n        if (rarityScore + 2 < bestScore) continue // Early bail out\n\n        for (const minimumMainStatValue of relevantMainStatValues) {\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\n          const mainStatVal = values[level]\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\n\n          for (const setKey of setKeys) {\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\n            if (score >= bestScore) {\n              if (score > bestScore) bestArtifacts = []\n              bestScore = score\n              bestArtifacts.push({\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\n              })\n            }\n          }\n        }\n        if (rarityScore >= bestScore) {\n          const level = 0\n          for (const setKey of setKeys) {\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\n\n            if (score > bestScore) bestArtifacts = []\n            bestScore = score\n            bestArtifacts.push({\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\n            })\n          }\n        }\n      }\n    }\n  }\n\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\n  const chosen = {\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\n  } as Dict<keyof ICachedArtifact, Set<string>>\n\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\n  result.substats = substats.filter((substat, i) =>\n    substat.key !== result.mainStatKey &&\n    substats.slice(0, i).every(other => other.key !== substat.key))\n  for (let i = result.substats.length; i < 4; i++)\n    result.substats.push({ key: \"\", value: 0 })\n\n  for (const other of bestArtifacts) {\n    chosen.setKey!.add(other.setKey)\n    chosen.rarity!.add(other.rarity as any)\n    chosen.level!.add(other.level as any)\n    chosen.slotKey!.add(other.slotKey)\n    chosen.mainStatKey!.add(other.mainStatKey)\n  }\n\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\n  }\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\n  }\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\n  }\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\n  }\n\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\n    if (recommended.size > 1)\n      texts[key] = ambiguousText(result[key], [...available], name, text)\n    else if (recommended.size === 1)\n      texts[key] = detectedText(result[key], name, text)\n    else if (chosen[key]!.size > 1)\n      texts[key] = unknownText(result[key], name, text)\n    else\n      texts[key] = inferredText(result[key], name, text)\n  }\n\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\n  }</>\n\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\n    if (mainStatKeys.has(result.mainStatKey)) {\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\n    } else {\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\n    }\n  } else {\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\n  }\n\n  return [result, texts]\n}\n\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\n  const results = new Set<ArtifactSetKey>([])\n  for (const text of texts)\n    for (const key of allArtifactSets)\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\n        results.add(key)\n  return results\n}\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\n  const results = new Set<Rarity>([])\n  for (let y = 0; y < height; y++) {\n    let star = 0, onStar = false;\n    for (let x = 0; x < width; x++) {\n      let i = (y * width + x) * 4\n      let r = d[i], g = d[i + 1], b = d[i + 2];\n      if (colorCloseEnough({ r, g, b }, starColor)) {\n        if (!onStar) {\n          onStar = true\n          star++\n        }\n      } else {\n        onStar = false\n      }\n    }\n\n    if (lastRowNum !== star) {\n      lastRowNum = star\n      rowsWithNumber = 1;\n    } else if (lastRowNum) {\n      rowsWithNumber++\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\n    }\n  }\n  return results\n}\nfunction colorCloseEnough(color1, color2, threshold = 5) {\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\n  return intCloseEnough(color1.r, color2.r) &&\n    intCloseEnough(color1.g, color2.g) &&\n    intCloseEnough(color1.b, color2.b)\n}\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\n  const results = new Set<SlotKey>()\n  for (const text of texts)\n    for (const key of allSlotKeys)\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\n        results.add(key)\n  return results\n}\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\n  const results = new Set<MainStatKey>([])\n  for (const text of texts)\n    for (const key of allMainStatKeys) {\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\n        results.add(key)\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\n        results.add(key)\n    }\n  return results\n}\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\n  const results: { mainStatValue: number, unit?: string }[] = []\n  for (const text of texts) {\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\n    let match = regex.exec(text)\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\n    match = regex.exec(text)\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\n  }\n  return results\n}\nfunction parseSubstats(texts: string[]): ISubstat[] {\n  const matches: ISubstat[] = []\n  for (let text of texts) {\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\n    //parse substats\n    allSubstatKeys.forEach(key => {\n      const name = KeyMap.getStr(key)\n      const regex = KeyMap.unit(key) === \"%\" ?\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\n      const match = regex.exec(text)\n      if (match)\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\n    })\n  }\n  return matches.slice(0, 4)\n}\n\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\n  const { region = \"all\", mode = \"color\" } = options\n  const d = Uint8ClampedArray.from(pixelData.data)\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\n  const bw = mode === \"bw\", invert = mode === \"invert\"\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\n  for (let i = 0; i < d.length; i += 4) {\n    const r = d[i], g = d[i + 1], b = d[i + 2];\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\n      r >= color1[0] && r <= color2[0] &&\n      g >= color1[1] && g <= color2[1] &&\n      b >= color1[2] && b <= color2[2]) {\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\n      else if (invert) {\n        d[i] = 255 - r\n        d[i + 1] = 255 - g\n        d[i + 2] = 255 - b\n      } // else orignal color\n    } else {\n      d[i] = d[i + 1] = d[i + 2] = 255\n    }\n  }\n  return new ImageData(d, pixelData.width, pixelData.height)\n}\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Add, ChevronRight, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, styled, Typography, useMediaQuery, useTheme } from '@mui/material';\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ArtifactSetSingleAutocomplete } from '../Components/Artifact/ArtifactAutocomplete';\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\nimport CardDark from '../Components/Card/CardDark';\nimport CardLight from '../Components/Card/CardLight';\nimport CloseButton from '../Components/CloseButton';\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport ImgIcon from '../Components/Image/ImgIcon';\nimport ModalWrapper from '../Components/ModalWrapper';\nimport StatIcon, { uncoloredEleIcons } from '../Components/StatIcon';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../Database/Database';\nimport { parseArtifact } from '../Database/imports/parse';\nimport { validateArtifact } from '../Database/imports/validate';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\nimport { clamp, deepClone } from '../Util/Util';\nimport ArtifactCard from './ArtifactCard';\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\n\nconst maxProcessingCount = 3, maxProcessedCount = 16\nconst allSubstatFilter = new Set(allSubstatKeys)\ntype ResetMessage = { type: \"reset\" }\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\ninterface IEditorArtifact {\n  setKey: ArtifactSetKey,\n  slotKey: SlotKey,\n  level: number,\n  rarity: ArtifactRarity,\n  mainStatKey: MainStatKey,\n  substats: ISubstat[],\n}\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\n  switch (action.type) {\n    case \"reset\": return\n    case \"substat\": {\n      const { index, substat } = action\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\n      if (oldIndex === -1 || oldIndex === index)\n        state!.substats[index] = substat\n      else  // Already in used, swap the items instead\n        [state!.substats[index], state!.substats[oldIndex]] =\n          [state!.substats[oldIndex], state!.substats[index]]\n      return { ...state! }\n    }\n    case \"overwrite\": return action.artifact\n    case \"update\": return { ...state!, ...action.artifact }\n  }\n}\n\nconst InputInvis = styled('input')({\n  display: 'none',\n});\n\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false, disableEditSetSlot: disableEditSlotProp = false }:\n  { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean, disableEditSetSlot?: boolean }) {\n  const { t } = useTranslation(\"artifact\")\n\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n\n  const { database } = useContext(DatabaseContext)\n\n  const [show, setShow] = useState(false)\n\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\n\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\n\n  const [modalShow, setModalShow] = useState(false)\n\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\n\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\n\n  const remaining = processed.length + outstanding.length\n\n  const image = firstProcessed?.imageURL ?? processingImageURL\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\n\n  const disableEditSetSlot = disableEditSlotProp || !!artifact?.location\n\n  useEffect(() => {\n    if (!artifact && artifactProcessed)\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\n  }, [artifact, artifactProcessed, artifactDispatch])\n\n  useEffect(() => {\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\n    const processingCurrent = numProcessing && !outstanding[0].result\n    outstanding.slice(0, numProcessing).forEach(processEntry)\n    if (processingCurrent)\n      dispatchQueue({ type: \"processing\" })\n  }, [processed.length, outstanding])\n\n  useEffect(() => {\n    if (processingResult)\n      dispatchQueue({ type: \"processed\", ...processingResult })\n  }, [processingResult, dispatchQueue])\n\n  const uploadFiles = useCallback((files: FileList) => {\n    setShow(true)\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\n  }, [dispatchQueue, setShow])\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\n\n  useEffect(() => {\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\n    allowUpload && window.addEventListener('paste', pasteFunc);\n    return () => {\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\n    }\n  }, [uploadFiles, allowUpload])\n\n  const onUpload = useCallback(\n    e => {\n      uploadFiles(e.target.files)\n      e.target.value = null // reset the value so the same file can be uploaded again...\n    },\n    [uploadFiles],\n  )\n\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database._getArt(artifactIdToEdit)\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\n\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\n    const validated = validateArtifact(artifact, artifactIdToEdit)\n    if (old) {\n      validated.artifact.location = old.location\n      validated.artifact.exclude = old.exclude\n    }\n    return validated\n  }, [artifact, artifactIdToEdit, old])\n\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\n  useEffect(() => {\n    if (artifactIdToEdit === \"new\") {\n      setShow(true)\n      artifactDispatch({ type: \"reset\" })\n    }\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database._getArt(artifactIdToEdit)\n    if (databaseArtifact) {\n      setShow(true)\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\n    }\n  }, [artifactIdToEdit, database, dirtyDatabase])\n\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\n  const reset = useCallback(() => {\n    cancelEdit?.();\n    dispatchQueue({ type: \"pop\" })\n    artifactDispatch({ type: \"reset\" })\n  }, [cancelEdit, artifactDispatch])\n  const update = useCallback((newValue: Partial<IArtifact>) => {\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\n\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\n    }\n\n    if (newValue.setKey) {\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\n    }\n    if (newValue.rarity)\n      newValue.level = artifact?.level ?? 0\n    if (newValue.level)\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\n    if (newValue.slotKey)\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\n\n    if (newValue.mainStatKey) {\n      newValue.substats = [0, 1, 2, 3].map(i =>\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\n    }\n    artifactDispatch({ type: \"update\", artifact: newValue })\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\n    artifactDispatch({ type: \"substat\", index, substat })\n  }, [artifactDispatch])\n  const isValid = !errors.length\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\n  const preventClosing = processed.length || outstanding.length\n  const onClose = useCallback(\n    (e) => {\n      if (preventClosing) e.preventDefault()\n      setShow(false)\n      cancelEdit()\n    }, [preventClosing, setShow, cancelEdit])\n\n  const theme = useTheme();\n  const grmd = useMediaQuery(theme.breakpoints.up('md'));\n\n  const element = artifact ? allElementsWithPhy.find(ele => artifact.mainStatKey.includes(ele)) : undefined\n  const color = artifact\n    ? element ?? \"success\"\n    : \"primary\"\n\n  return <ModalWrapper open={show} onClose={onClose} >\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\n      <CardHeader\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\n      />\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <Grid container spacing={1} columns={{ xs: 1, md: 2 }} >\n          {/* Left column */}\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n            {/* set & rarity */}\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\n              {/* Artifact Set */}\n              <ArtifactSetSingleAutocomplete\n                size=\"small\"\n                disableClearable\n                artSetKey={artifact?.setKey ?? \"\"}\n                setArtSetKey={setKey => update({ setKey: setKey as ArtifactSetKey })}\n                sx={{ flexGrow: 1 }}\n                disabled={disableEditSetSlot}\n              />\n              {/* rarity dropdown */}\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={disableEditSetSlot || !sheet} />\n            </ButtonGroup>\n\n            {/* level */}\n            <Box component=\"div\" display=\"flex\">\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\n              />\n              <ButtonGroup >\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\n              </ButtonGroup>\n            </Box>\n\n            {/* slot */}\n            <Box component=\"div\" display=\"flex\">\n              <ArtifactSlotDropdown disabled={disableEditSetSlot || !sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\n                  <Typography color=\"text.secondary\">\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\n                  </Typography>\n                </Suspense>\n              </CardLight>\n            </Box>\n\n            {/* main stat */}\n            <Box component=\"div\" display=\"flex\">\n              <DropdownButton startIcon={element ? uncoloredEleIcons[element] : (artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined)}\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={color} >\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\n                    <ListItemIcon>{StatIcon[mainStatK]}</ListItemIcon>\n                    <ListItemText>{KeyMap.getArtStr(mainStatK)}</ListItemText>\n                  </MenuItem>)}\n              </DropdownButton>\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                <Typography color=\"text.secondary\">\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\n                </Typography>\n              </CardLight>\n            </Box>\n\n            {/* Current/Max Substats Efficiency */}\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\n\n            {/* Image OCR */}\n            {allowUpload && <CardLight>\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n                {/* TODO: artifactDispatch not overwrite */}\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\n                  <Grid container spacing={1} alignItems=\"center\">\n                    <Grid item flexGrow={1}>\n                      <label htmlFor=\"contained-button-file\">\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\n                          Upload Screenshot (or Ctrl-V)\n                        </Button>\n                      </label>\n                    </Grid>\n                    <Grid item>\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => setModalShow(true)}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\n                    </Grid>\n                  </Grid>\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\n                  </Box>}\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\n                    {!firstProcessed && firstOutstanding && <Grid item>\n                      <CircularProgress size=\"1em\" />\n                    </Grid>}\n                    <Grid item flexGrow={1}>\n                      <Typography>\n                        <span>\n                          Screenshots in file-queue: <b>{remaining}</b>\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\n                        </span>\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\n                    </Grid>\n                  </Grid></CardDark>}\n                </Suspense>\n              </CardContent>\n            </CardLight>}\n          </Grid>\n\n          {/* Right column */}\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n            {/* substat selections */}\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\n            {texts && <CardLight><CardContent>\n              <div>{texts.slotKey}</div>\n              <div>{texts.mainStatKey}</div>\n              <div>{texts.mainStatVal}</div>\n              <div>{texts.rarity}</div>\n              <div>{texts.level}</div>\n              <div>{texts.substats}</div>\n              <div>{texts.setKey}</div>\n            </CardContent></CardLight>}\n          </Grid>\n        </Grid>\n\n        {/* Duplicate/Updated/Edit UI */}\n        {old && <Grid container sx={{ justifyContent: \"space-around\" }} spacing={1} >\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\n            <ArtifactCard artifactObj={old} />\n          </CardLight></Grid>\n          {grmd && <Grid item md={1} display=\"flex\" alignItems=\"center\" justifyContent=\"center\" >\n            <CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight>\n          </Grid>}\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\n            <ArtifactCard artifactObj={cachedArtifact} />\n          </CardLight></Grid>\n        </Grid>}\n\n        {/* Error alert */}\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" >{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\n\n        {/* Buttons */}\n        <Grid container spacing={2}>\n          <Grid item>\n            {oldType === \"edit\" ?\n              <Button startIcon={<Add />} onClick={() => {\n                database.updateArt(editorArtifact!, old!.id);\n                if (allowEmpty) reset()\n                else {\n                  setShow(false)\n                  cancelEdit()\n                }\n              }} disabled={!editorArtifact || !isValid} color=\"primary\">\n                {t`editor.btnSave`}\n              </Button> :\n              <Button startIcon={<Add />} onClick={() => {\n                database.createArt(artifact!);\n                if (allowEmpty) reset()\n                else {\n                  setShow(false)\n                  cancelEdit()\n                }\n              }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\n                {t`editor.btnAdd`}\n              </Button>}\n          </Grid>\n          <Grid item flexGrow={1}>\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\n          </Grid>\n          <Grid item>\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\n          </Grid>\n          {old && oldType !== \"edit\" && <Grid item>\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\n          </Grid>}\n        </Grid>\n      </CardContent>\n    </CardDark ></Suspense>\n  </ModalWrapper>\n}\n"],"names":["ArtifactMultiAutocomplete","allArtifactKeys","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","props","theme","useTheme","options","useMemo","map","key","autoHighlight","multiple","disableCloseOnSelect","value","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","variant","InputLabelProps","style","color","palette","text","primary","length","type","renderOption","image","isSelected","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSets","nameRaw","defIcon","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","KeyMap","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","flattenCorners","concat","clearIcon","event","newValue","reason","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","allArtSetKeys","artSetKey","setArtSetKey","DisabledButton","styled","Button","backgroundColor","dark","secondary","TextButton","children","disabled","ArtifactRarityDropdown","rarity","filter","DropdownButton","title","stars","MenuItem","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","startIcon","artifactSlotIcon","ListItemIcon","Replay","ListItemText","Divider","allSlotKeys","CustomNumberTextField","float","useState","state","setState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","toString","TextField","e","target","onBlur","onKeyDown","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","sx","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","Trans","i18nKey","xs","PercentBadge","SubstatInput","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","a","b","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","Box","display","ButtonGroup","size","width","whiteSpace","k","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","i","cacheValueString","artifactSubstatRollCorrection","clamp","p","SqBadge","count","sort","val","component","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","Array","fill","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","Math","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","setKey","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","set","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatVal","mainStatValScore","push","Object","entries","chosen","resultMainStatVal","every","other","add","unknownText","name","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStrFunc","find","results","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","disableEditSetSlot","disableEditSlotProp","database","useContext","DatabaseContext","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","sheet","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","grmd","useMediaQuery","breakpoints","up","Suspense","fallback","Skeleton","CardHeader","flexDirection","gap","columns","mb","disableClearable","id","mr","my","margin","l","keys","getSlotName","ImgIcon","slotIcons","uncoloredEleIcons","mainStatK","alignItems","htmlFor","accept","PhotoCamera","minWidth","faQuestionCircle","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","fontSize","Add","updateArt","createArt","confirm","process","Update"],"sourceRoot":""}