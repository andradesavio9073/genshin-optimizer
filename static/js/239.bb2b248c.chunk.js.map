{"version":3,"file":"static/js/239.bb2b248c.chunk.js","mappings":"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","sources":["Data/Characters/Albedo/assets.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/assets.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/assets.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/assets.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/assets.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/assets.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/assets.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/assets.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Diluc/assets.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/assets.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/assets.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/assets.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/assets.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/assets.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/assets.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/assets.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/assets.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/assets.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/assets.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KamisatoAyato/assets.tsx","Data/Characters/KamisatoAyato/index.tsx","Data/Characters/Keqing/assets.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/assets.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/assets.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/KukiShinobu/assets.ts","Data/Characters/KukiShinobu/index.tsx","Data/Characters/Lisa/assets.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/assets.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/assets.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/assets.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/assets.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/assets.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/assets.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/assets.ts","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/assets.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/assets.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/assets.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/ShikanoinHeizou/assets.tsx","Data/Characters/ShikanoinHeizou/index.tsx","Data/Characters/Sucrose/assets.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/assets.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/assets.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Traveler/anemo/assets.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/electro/assets.tsx","Data/Characters/Traveler/electro/index.tsx","Data/Characters/Traveler/geo/assets.tsx","Data/Characters/Traveler/geo/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/assets.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/assets.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/assets.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/assets.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/assets.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/assets.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/assets.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yelan/assets.tsx","Data/Characters/Yelan/index.tsx","Data/Characters/Yoimiya/assets.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/assets.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/assets.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts"],"sourcesContent":["import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Albedo_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Albedo\"\nconst elementKey: ElementKey = \"geo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++], // 1\n    dmg2: skillParam_gen.auto[a++], // 2\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    skillDmg: skillParam_gen.skill[s++],\n    blossomDmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n    blossomCd: 2,\n  },\n  burst: {\n    burstDmg: skillParam_gen.burst[b++],\n    blossomDmg: skillParam_gen.burst[b++],\n    blossomAmt: 7,\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    blossomDmgInc: 0.25,\n    hpThresh: 50,\n  },\n  passive2: {\n    eleMasInc: skillParam_gen.passive2[0][0],\n    duration: skillParam_gen.passive2[1][0]\n  },\n  constellation1: {\n    blossomEner: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    blossomDmgInc: 0.30,\n    maxStacks: 4,\n    stackDuration: 30\n  },\n  constellation4: {\n    plunging_dmg_: 0.3,\n  },\n  constellation6: {\n    bonus_dmg_: 0.17\n  }\n} as const\n\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\n\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\n\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\n  prod(\n    lookup(\n      condC2Stacks,\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\n        [i,\n          prod(i, datamine.constellation2.blossomDmgInc)]\n      )\n      ),\n      naught\n    ),\n    input.total.def\n  )\n)\n\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\n)\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\n\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\n// This is technically a nested conditional\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\n  equal(condSkillInField, \"skillInField\",\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\n  )\n)\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\n  },\n}\n\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC3,\n    burst: burstC5,\n  },\n  teamBuff: {\n    premod: {\n      eleMas: p2Burst_eleMas,\n      plunging_dmg_: c4_plunging_dmg_,\n      all_dmg_: c6_Crystal_all_dmg_,\n    }\n  },\n  premod: {\n    burst_dmgInc: c2_burst_dmgInc,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\n        }, {\n          text: trm(\"blossomCD\"),\n          value: datamine.skill.blossomCd,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"passive1\", {\n        value: condP1EnemyHp,\n        path: condP1EnemyHpPath,\n        name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\n        states: {\n          belowHp: {\n            fields: [{\n              node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: trm(\"enerPerBlossom\"),\n          value: datamine.constellation1.blossomEner,\n          fixed: 1,\n        }]\n      }), ct.conditionalTemplate(\"constellation4\", {\n        value: condSkillInField,\n        path: condSkillInFieldPath,\n        name: st(\"activeCharField\"),\n        teamBuff: true,\n        states: {\n          skillInField: {\n            fields: [{\n              node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation6\", {\n        value: condC6Crystallize,\n        path: condC6CrystallizePath,\n        name: st(\"protectedByShieldCrystal\"),\n        canShow: equal(condSkillInField, \"skillInField\", 1),\n        teamBuff: true,\n        states: {\n          c6Crystallize: {\n            fields: [{\n              node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\" }),\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condBurstBlossom,\n        path: condBurstBlossomPath,\n        name: trm(\"isotomaOnField\"),\n        states: {\n          isoOnField: {\n            fields: [{\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"passive2\", {\n        value: condBurstUsed,\n        path: condBurstUsedPath,\n        name: st(\"afterUse.burst\"),\n        teamBuff: true,\n        states: {\n          burstUsed: {\n            fields: [{\n              node: p2Burst_eleMas\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation2\", {\n        value: condC2Stacks,\n        path: condC2StacksPath,\n        name: trm(\"c2Stacks\"),\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\n          [i, {\n            name: st(\"stack\", { count: i }),\n            fields: [{\n              node: c2_burst_dmgInc\n            }]\n          }]\n        ))\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Aloy_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, naught, percent, subscript, unequal } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Aloy\"\nconst elementKey: ElementKey = \"cryo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1.1\n      skillParam_gen.auto[a++], // 1.2\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    aimedCharged: skillParam_gen.auto[a++],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    freezeBombDmg: skillParam_gen.skill[s++],\n    chillWaterBomblets: skillParam_gen.skill[s++],\n    atkDecrease: skillParam_gen.skill[s++],\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\n    rushingDuration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    atkInc: 0.16,\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\n  }\n} as const\n\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\nconst normal_dmg_ = lookup(condCoil, {\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\n}, naught)\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\n\nconst [condA1Path, condA1] = cond(key, \"A1\")\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\n\nconst [condA4Path, condA4] = cond(key, \"A4\")\nconst cryo_dmg_ = greaterEq(input.asc, 4,\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\", {\n      hit: {\n        ele: compareEq(\"rush\", condCoil, elementKey, \"physical\")\n      }\n    })])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease)\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n}\n\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\n  premod: {\n    normal_dmg_,\n    atk_,\n    cryo_dmg_\n  },\n  teamBuff: {\n    premod: {\n      atk_: teamAtk_\n    }\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\n          textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.atkDecrease, { key: `char_${key}_gen:skill.skillParams.2_` }),\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: `${datamine.skill.atkDecreaseDuration}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.7\"),\n          value: `${datamine.skill.cd}`,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condCoil,\n        path: condCoilPath,\n        name: trm(\"skill.coil\"),\n        states: {\n          \"coil1\": {\n            name: trm(\"skill.coil1\"),\n            fields: [{\n              node: normal_dmg_\n            }]\n          },\n          \"coil2\": {\n            name: trm(\"skill.coil2\"),\n            fields: [{\n              node: normal_dmg_\n            }]\n          },\n          \"coil3\": {\n            name: trm(\"skill.coil3\"),\n            fields: [{\n              node: normal_dmg_\n            }]\n          },\n          \"rush\": {\n            name: trm(\"skill.rush\"),\n            fields: [{\n              node: normal_dmg_\n            }, {\n              text: trm(\"normCryoInfus\"),\n            }, {\n              text: tr(\"skill.skillParams.6\"),\n              value: datamine.skill.rushingDuration,\n              unit: \"s\"\n            }]\n          },\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.enerCost,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.passive1.duration,\n          unit: \"s\"\n        }]\n      }), ct.conditionalTemplate(\"passive1\", {\n        value: condA1,\n        path: condA1Path,\n        canShow: unequal(input.activeCharKey, key, 1),\n        teamBuff: true,\n        name: trm(\"a1CondName\"),\n        states: {\n          \"on\": {\n            fields: [{\n              node: infoMut(teamAtk_, { key: \"atk_\" })\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        value: condA4,\n        path: condA4Path,\n        canShow: equal(\"rush\", condCoil, 1),\n        name: trm(\"skill.rushState\"),\n        states: Object.fromEntries(range(1, 10).map(i => [i, {\n          name: st(\"stack\", { count: i }),\n          fields: [{ node: cryo_dmg_ }]\n        }]))\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\"),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\"),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Amber_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Amber\"\nconst elementKey: ElementKey = \"pyro\"\nconst region: Region = \"mondstadt\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    aimedCharged: skillParam_gen.auto[a++]\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++]\n  },\n  skill: {\n    inheritedHp: skillParam_gen.skill[s++],\n    dmg: skillParam_gen.skill[s++],\n    unknown: skillParam_gen.skill[s++], // what is this??\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmgPerWave: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    rainDmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    critRateInc: skillParam_gen.passive1[p1++][0],\n    aoeInc: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    atkInc: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    secArrowDmg: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    manualDetionationDmg: skillParam_gen.constellation2[0],\n  },\n  constellation6: {\n    moveSpdInc: skillParam_gen.constellation6[0],\n    atkInc: skillParam_gen.constellation6[1],\n    duration: skillParam_gen.constellation6[2]\n  }\n} as const\n\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\nconst [condA4Path, condA4] = cond(key, \"A4\")\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\n\nconst [condC6Path, condC6] = cond(key, \"C6\")\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\n  },\n  constellation2: {\n    manualDetonationDmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_: percent(datamine.constellation2.manualDetionationDmg) } })),\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    atk_,\n    burst_critRate_,\n  },\n  teamBuff: {\n    premod: {\n      moveSPD_,\n      atk_: teamAtk_\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        })),\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: trm(\"secondArrow\")\n        }, {\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\n          textSuffix: trm(\"secondArrow\")\n        },],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\n          unit: \"s\"\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 4,\n          text: st(\"charges\"),\n          value: 2,\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: `${datamine.burst.enerCost}`,\n        }]\n      }, ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        name: trm(\"c6CondName\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: teamAtk_\n            }, {\n              node: moveSPD_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          text: trm(\"critRateBonus\"),\n          value: datamine.passive1.critRateInc * 100,\n          unit: \"%\"\n        }, {\n          text: trm(\"aoeRangeBonus\"),\n          value: datamine.passive1.aoeInc * 100,\n          unit: \"%\"\n        }, {\n          node: burst_critRate_\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        value: condA4,\n        path: condA4Path,\n        name: trm(\"a4CondName\"),\n        states: {\n          on: {\n            fields: [{\n              node: atk_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Arataki_Itto_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, tally } from '../../../Formula'\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"AratakiItto\"\nconst elementKey: ElementKey = \"geo\"\n\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[0],\n      skillParam_gen.auto[1],\n      skillParam_gen.auto[2],\n      skillParam_gen.auto[3],\n    ]\n  },\n  charged: {\n    sSlash: skillParam_gen.auto[4],\n    akSlash: skillParam_gen.auto[5],\n    akFinal: skillParam_gen.auto[6],\n    stam: skillParam_gen.auto[7][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[8],\n    low: skillParam_gen.auto[9],\n    high: skillParam_gen.auto[10],\n  },\n  ss: { //Superlative Superstrength\n    duration: skillParam_gen.auto[11][0],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[0],\n    hp: skillParam_gen.skill[1],\n    duration: skillParam_gen.skill[2][0],\n    ss_cd: skillParam_gen.skill[3][0],\n    cd: skillParam_gen.skill[4][0],\n  },\n  burst: {\n    atkSpd: skillParam_gen.burst[0][0],\n    defConv: skillParam_gen.burst[1],\n    resDec: skillParam_gen.burst[2][0],\n    duration: skillParam_gen.burst[3][0],\n    cd: skillParam_gen.burst[4][0],\n    cost: skillParam_gen.burst[5][0],\n  },\n  passive1: {\n    maxStacks: 3,\n    atkSPD_: 0.10\n  },\n  passive2: {\n    def_: skillParam_gen.passive2[0][0],\n  },\n  constellation1: {\n    initialStacks: skillParam_gen.constellation1[0],\n    timedStacks: skillParam_gen.constellation1[1]\n  },\n  constellation2: {\n    burstCdRed: skillParam_gen.constellation2[0],\n    energyRegen: skillParam_gen.constellation2[1],\n  },\n  constellation4: {\n    def_: skillParam_gen.constellation4[0],\n    atk_: skillParam_gen.constellation4[1],\n    duration: skillParam_gen.constellation4[2],\n  },\n  constellation6: {\n    charged_critDMG_: skillParam_gen.constellation6[0],\n  }\n}\n\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\nconst [condP1Path, condP1] = cond(key, \"passive1\")\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\n\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n    hp: nodeSkillHP\n  },\n  burst: {\n    defConv: nodeBurstAtk,\n  },\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  teamBuff: {\n    premod: {\n      atk_: nodeC4Atk,\n      def_: nodeC4Def,\n    }\n  },\n  premod: {\n    charged_critDMG_: nodeC6CritDMG,\n    atk: nodeBurstAtk,\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\n    ...allNodeBurstRes\n  },\n  infusion: {\n    nonOverridableSelf: nodeBurstInfusion,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"geo\",\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.ss.duration,\n          unit: \"s\"\n        }, {\n          node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\n        }, {\n          text: tr(\"auto.skillParams.8\"),\n          value: datamine.charged.stam,\n        }],\n      }, ct.conditionalTemplate(\"passive1\", {\n        name: trm(\"a1.name\"),\n        value: condP1,\n        path: condP1Path,\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\n          [i, {\n            name: st(\"stack_one\", { count: i }),\n            fields: [{\n              node: nodeP1AtkSpd\n            }]\n          }]\n        ))\n      }), ct.headerTemplate(\"passive2\", {\n        fields: [{\n          node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\n        }]\n      }), ct.headerTemplate(\"constellation6\", {\n        fields: [{\n          node: nodeC6CritDMG\n        }]\n      }), {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        name: st(\"afterUse.burst\"),\n        value: condBurst,\n        path: condBurstPath,\n        states: {\n          on: {\n            fields: [{\n              text: st(\"infusion.geo\"),\n              variant: \"geo\",\n            }, {\n              node: nodeBurstAtkSpd,\n            },\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\n            {\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\n            }, {\n              text: tr(\"burst.skillParams.2\"),\n              value: datamine.burst.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: trm(\"c1.initialGain\"),\n          value: datamine.constellation1.initialStacks\n        }, {\n          text: trm(\"c1.timedGain\"),\n          value: datamine.constellation1.timedStacks\n        }],\n        canShow: equal(condBurst, \"on\", 1),\n      }), ct.headerTemplate(\"constellation2\", {\n        fields: [{\n          text: st(\"burstCDRed\"),\n          value: data => data.get(nodeC2BurstRed).value,\n          unit: \"s\",\n          fixed: 1\n        }, {\n          text: st(\"energyRegen\"),\n          value: data => data.get(nodeC2EnergyRegen).value,\n        }],\n        canShow: equal(condBurst, \"on\", 1)\n      }), ct.conditionalTemplate(\"constellation4\", {\n        name: trm(\"c4.name\"),\n        teamBuff: true,\n        value: condC4,\n        path: condC4Path,\n        states: {\n          on: {\n            fields: [{\n              node: nodeC4Atk\n            }, {\n              node: nodeC4Def\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation4.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [{ fields: [{ node: nodeC6CritDMG }] }])\n    },\n  },\n};\n\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Barbara_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Barbara\"\nconst elementKey: ElementKey = \"hydro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ],\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    cregen_hp_: skillParam_gen.skill[s++],\n    cregen_hp: skillParam_gen.skill[s++],\n    regen_hp_: skillParam_gen.skill[s++],\n    regen_hp: skillParam_gen.skill[s++],\n    dmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    hp_: skillParam_gen.burst[b++],\n    hp: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    stam: -skillParam_gen.passive1[0][0],\n  },\n  passive2: {\n    ext: skillParam_gen.passive2[0][0],\n    maxExt: skillParam_gen.passive2[0][1],\n  },\n  constellation2: {\n    cdDec: 0.15,\n    hydro_dmg_: 0.15\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\n\nconst [condC2Path, condC2] = cond(key, \"c2\")\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\n  }\n}\n\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  }, teamBuff: {\n    premod: {\n      staminaDec_: nodeA1,\n      hydro_dmg_: nodeC2,\n    },\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          text: tr(\"auto.skillParams.5\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" })\n        }, {\n          node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\n        }, {\n          text: tr(`skill.skillParams.3`),\n          value: datamine.skill.duration,\n          unit: \"s\",\n        }, {\n          text: tr(`skill.skillParams.4`),\n          value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0`, variant: \"success\" })\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: datamine.burst.cd,\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.enerCost,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        teamBuff: true,\n        value: condSkill,\n        path: condSkillPath,\n        name: trm(\"passive1.cond\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        teamBuff: true,\n        value: condC2,\n        path: condC2Path,\n        name: trm(\"constellation2.cond\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n};\n\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Beidou_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst key: CharacterKey = \"Beidou\"\nconst elementKey: ElementKey = \"electro\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    spinningDmg: skillParam_gen.auto[a++],\n    finalDmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n    duration: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    shieldHp_: skillParam_gen.skill[s++],\n    shieldFlat: skillParam_gen.skill[s++],\n    dmgBase: skillParam_gen.skill[s++],\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    burstDmg: skillParam_gen.burst[b++],\n    lightningDmg: skillParam_gen.burst[b++],\n    damageReduction: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    energyCost: skillParam_gen.burst[b++][0],\n  },\n  //pasive 1: 2, //additional targets for lightning arc\n  ascension4: {\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\n    chargeDmg_: skillParam_gen.passive2[0][0],\n    attackSpeed: skillParam_gen.passive2[0][0],\n  },\n  constellation1: {\n    shieldHp_: skillParam_gen.constellation1[0],\n  },\n  constellation4: {\n    skillDmg: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\n  },\n} as const\n\n//Toggable stuff:\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\n// C6: During the duration of <b>Stormbreaker</b>\n\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\n\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\n  },\n  burst: {\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\n  },\n  constellation1: {\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\n  },\n  constellation4: {\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\n  }\n}\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  }, customBonus: {\n    normal_dmg_: nodeSkillNormalDmg_,\n    charged_dmg_: nodeSkillChargeDmg_,\n    atkSPD_: nodeSkillAttackSpeed_,\n  }, teamBuff: {\n    premod: {\n      electro_enemyRes_: nodeBurstElectroResRed_\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.stamina,\n          unit: '/s'\n        }, {\n          text: tr(\"auto.skillParams.8\"),\n          value: datamine.charged.duration,\n          unit: 's'\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }),\n        }, {\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }),\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"passive2\", {\n        teamBuff: false,\n        value: condA4,\n        path: condA4Path,\n        name: trm(\"tidecallerMaxDmg\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeSkillNormalDmg_,\n            }, {\n              node: nodeSkillChargeDmg_,\n            }, {\n              node: nodeSkillAttackSpeed_,\n            }, {\n              text: trm(\"a4duration\"),\n              value: 10,\n              unit: \"s\"\n            }, {\n              text: trm(\"a4charge\"),\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` })\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.energyCost,\n        }]\n      }, ct.conditionalTemplate(\"constellation6\", {\n        teamBuff: true,\n        value: condC6,\n        path: condC6Path,\n        name: trm(\"duringBurst\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeBurstElectroResRed_,\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" })\n        }, {\n          node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` })\n        }]\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\n        }]\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\n\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Bennett_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { UIData } from '../../../Formula/uiData'\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Bennett\"\nconst elementKey: ElementKey = \"pyro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++], // 1\n    dmg2: skillParam_gen.auto[a++], // 2\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    hold1_1: skillParam_gen.skill[s++],\n    hold1_2: skillParam_gen.skill[s++],\n    hold2_1: skillParam_gen.skill[s++],\n    hold2_2: skillParam_gen.skill[s++],\n    explosion: skillParam_gen.skill[s++],\n    cd_press: skillParam_gen.skill[s++][0],\n    cd_hold1: skillParam_gen.skill[s++][0],\n    cd_hold2: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    regen_: skillParam_gen.burst[b++],\n    regenFlat: skillParam_gen.burst[b++],\n    atkBonus: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    cd_red: 0.2, // Not in the datamine for some reason\n  },\n  passive2: {\n    cd_red: 0.5, // Not in the datamine for some reason\n  },\n  constellation1: {\n    atk_inc: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    hp_thresh: skillParam_gen.constellation2[0],\n    er_inc: skillParam_gen.constellation2[1],\n  },\n  constellation4: {\n    dmg: skillParam_gen.constellation4[0],\n  },\n  constellation6: {\n    pyro_dmg: skillParam_gen.constellation6[0],\n  }\n} as const\n\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\n\nconst burstAtkRatio = subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" })\nconst burstAddlAtk = prod(burstAtkRatio, input.base.atk)\nconst c1AtkRatio = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_` })\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1AtkRatio, input.base.atk))\nconst atkIncRatio = sum(burstAtkRatio, c1AtkRatio)\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\n\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\n\nconst activeInAreaA4 = greaterEq(input.asc, 4,\n  equal(activeInArea, 1, datamine.passive2.cd_red)\n)\n\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\n  lookup(target.weaponType,\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\n)\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\n\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\nconst underHP = greaterEq(input.constellation, 2,\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\n    atkInc: activeInAreaAtk,\n  },\n  constellation4: {\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  teamBuff: {\n    premod: {\n      pyro_dmg_: activeInAreaC6PyroDmg,\n    },\n    total: {\n      // Not 100% sure if this should be in premod or total\n      atk: activeInAreaAtk,\n    },\n    infusion: {\n      team: activeInAreaC6Infusion,\n    },\n  },\n  premod: {\n    enerRech_: underHP,\n\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        })),\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          // Press\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\n        }, {\n          text: sgt(\"press.cd\"),\n          unit: \"s\",\n          value: data => calculateSkillCD(data, datamine.skill.cd_press),\n        }, {\n          // Lvl 1\n          node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\n        }, {\n          text: trm(\"skill.lvl1CD\"),\n          unit: \"s\",\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\n        }, {\n          // Lvl 2\n          node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\n        }, {\n          text: trm(\"skill.lvl2CD\"),\n          unit: \"s\",\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\n        }]\n      }, ct.headerTemplate(\"passive1\", {\n        fields: [{\n          node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\n        }],\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.duration,\n          unit: \"s\",\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condInArea,\n        path: condInAreaPath,\n        name: st(\"activeCharField\"),\n        teamBuff: true,\n        states: {\n          activeInArea: {\n            fields: [{\n              text: tr(\"burst.skillParams.2\"),\n              value: data => data.get(burstAtkRatio).value * 100,\n              unit: \"%\",\n              fixed: 1\n            }, {\n              node: infoMut(burstAddlAtk, { key: `sheet:increase.atk` })\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"passive2\", {\n        fields: [{\n          node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\n        }],\n        canShow: equal(condInArea, \"activeInArea\", 1),\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: trm(\"additionalATKRatio\"),\n          node: c1AtkRatio\n        }, {\n          node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\n        }],\n        canShow: equal(condInArea, \"activeInArea\", 1),\n        teamBuff: true,\n      }), ct.headerTemplate(\"constellation6\", {\n        fields: [{\n          node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\n        }, {\n          text: trm(\"c6PyroInfusion\")\n        }],\n        canShow: equal(condInArea, \"activeInArea\", 1),\n        teamBuff: true,\n      })]),\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [\n        ct.conditionalTemplate(\"constellation2\", {\n          value: condUnderHP,\n          path: condUnderHPPath,\n          name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\n          states: {\n            underHP: {\n              fields: [{\n                node: underHP\n              }]\n            }\n          }\n        }),\n      ]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\n        }],\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n};\nexport default new CharacterSheet(sheet, data);\n\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\n  let cdFactor: number = 1.00;\n  let result: string = skillCD + \"s\"\n  if (data.get(input.asc).value >= 1) {\n    cdFactor = 0.80;\n  }\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\n  if (cdFactor !== 1.00) {\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\n  }\n  return result;\n}\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Chongyun_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Chongyun\"\nconst elementKey: ElementKey = \"cryo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[0], // 1\n      skillParam_gen.auto[1], // 2\n      skillParam_gen.auto[2], // 3\n      skillParam_gen.auto[3], // 4\n    ]\n  },\n  charged: {\n    spin_dmg: skillParam_gen.auto[4],\n    final_dmg: skillParam_gen.auto[5],\n    stamina: skillParam_gen.auto[6][0],\n    duration: skillParam_gen.auto[7][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[8],\n    low: skillParam_gen.auto[9],\n    high: skillParam_gen.auto[10],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    infusionDuration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n    fieldDuration: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    atk_spd: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    dmg: skillParam_gen.passive2[p2++][0],\n    res: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    dmg: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    cdr: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    energy_regen: skillParam_gen.constellation4[0],\n    cd: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    burst_dmg_: skillParam_gen.constellation6[0],\n  }\n} as const\n\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\nconst [condC6Path, condC6] = cond(key, \"c6\")\n\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: skillDmg,\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n  passive2: {\n    dmg: greaterEq(input.asc, 4, skillDmg),\n  },\n  constellation1: {\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\n  }\n}\n\nconst nodeAsc4 = greaterEq(input.asc, 4,\n  equal(condAsc4, \"hit\",\n    -0.10\n  )\n)\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\n\nconst nodeAsc1Disp = greaterEq(input.asc, 1, percent(0.08))\nconst nodeAsc1 = equal(activeInArea, 1, nodeAsc1Disp)\n\nconst correctWep =\n  lookup(target.weaponType,\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\n\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\n\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    burst_dmg_: nodeC6,\n  },\n  teamBuff: {\n    premod: {\n      cryo_enemyRes_: nodeAsc4,\n      atkSPD_: nodeAsc1\n    },\n    infusion: {\n      team: activeInAreaInfusion,\n    },\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"cryo\",\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n          unit: '/s'\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.duration,\n          unit: 's'\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: datamine.skill.fieldDuration,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        teamBuff: true,\n        value: condSkill,\n        path: condSkillPath,\n        name: st(\"activeCharField\"),\n        states: {\n          activeInArea: {\n            fields: [{\n              text: trm(\"infusion\"),\n              variant: elementKey\n            }, {\n              text: tr(\"skill.skillParams.1\"),\n              value: datamine.skill.infusionDuration,\n              unit: \"s\"\n            }, {\n              node: infoMut(nodeAsc1Disp, { key: \"atkSPD_\" })\n            }]\n          },\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.enerCost,\n        }, {\n          text: trm(\"blades\"),\n          value: data => data.get(input.constellation).value < 6 ? 3 : 4\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` }),\n        }]\n      }), ct.conditionalTemplate(\"passive2\", {\n        teamBuff: true,\n        value: condAsc4,\n        path: condAsc4Path,\n        name: trm(\"asc4Cond\"),\n        states: {\n          hit: {\n            fields: [{\n              node: nodeAsc4\n            }]\n          },\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\n        }]\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        name: trm(\"constellation6\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC6\n            }]\n          }\n        }\n      })]),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Diluc_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst key: CharacterKey = \"Diluc\"\nconst elementKey: ElementKey = \"pyro\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    spinningDmg: skillParam_gen.auto[a++],\n    finalDmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n    duration: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    firstHit: skillParam_gen.skill[s++],\n    secondHit: skillParam_gen.skill[s++],\n    thridHit: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0]\n  },\n  burst: {\n    slashDmg: skillParam_gen.burst[b++],\n    dotDmg: skillParam_gen.burst[b++],\n    explosionDmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    duration: skillParam_gen.burst[b++][0],\n    cost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    stamReduction: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0]\n  },\n  passive2: {\n    durationInc: skillParam_gen.passive2[p2++][0],\n    pyroInc: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    dmgInc: skillParam_gen.constellation1[0],\n    hpThresh_: 0.5,\n  },\n  constellation2: {\n    atkInc: skillParam_gen.constellation2[c2i++],\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\n    duration: skillParam_gen.constellation2[c2i++],\n    maxStack: skillParam_gen.constellation2[c2i++],\n    cd: skillParam_gen.constellation2[c2i++],\n  },\n  constellation4: {\n    dmgInc: skillParam_gen.constellation4[0],\n  },\n  constellation6: {\n    duration: skillParam_gen.constellation6[c6i++],\n    dmgInc: skillParam_gen.constellation6[c6i++],\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\n  },\n} as const\n\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\n\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\nconst nodeA4Bonus = greaterEq(input.asc, 4, equal(condBurst, \"on\", datamine.passive2.pyroInc))\n\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\n\nconst skillAdditional: Data = {\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\n  hit: { ele: constant(\"pyro\") }\n}\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\n  skill: {\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\n  },\n  burst: {\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\n  },\n  constellation4: {\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  premod: {\n    pyro_dmg_: nodeA4Bonus,\n    atk_: nodeC2AtkBonus,\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\n    all_dmg_: nodeC1Bonus,\n    normal_dmg_: nodeC6DmgBonus,\n  },\n  infusion: {\n    // CAUTION: Technically, this infusion is overridable,\n    // but it should also be higher prio than `team` because\n    // it refreshes faster than auras. So we put it here instead.\n    nonOverridableSelf: nodeBurstInfusion,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\n          unit: 's'\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }, {\n          node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\n        }, {\n          node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.skill.cd,\n        }],\n      }, ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        name: st(\"afterUse.skill\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC6DmgBonus,\n            }, {\n              node: nodeC6SpdBonus\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\n        }, {\n          node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.cost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        name: st(\"afterUse.burst\"),\n        value: condBurst,\n        path: condBurstPath,\n        states: {\n          on: {\n            fields: [{\n              text: st(\"infusion.pyro\"),\n              variant: \"pyro\",\n            }, {\n              node: nodeA4Bonus\n            }, {\n              text: sgt(\"duration\"),\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        value: condC1,\n        path: condC1Path,\n        name: st(\"enemyGreaterPercentHP\", { percent: datamine.constellation1.hpThresh_ * 100 }),\n        canShow: greaterEq(input.constellation, 1, 1),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC1Bonus,\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        name: st(\"takeDmg\"),\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\n          [i, {\n            name: st(\"stack\", { count: i }),\n            fields: [{\n              node: nodeC2AtkBonus\n            }, {\n              node: nodeC2SpdBonus\n            }]\n          }]\n        ))\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Diona_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Diona\"\nconst elementKey: ElementKey = \"cryo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    aimedCharged: skillParam_gen.auto[a++],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    icyPawDmg: skillParam_gen.skill[s++],\n    shieldHp_: skillParam_gen.skill[s++],\n    shieldFlat: skillParam_gen.skill[s++],\n    cdPress: skillParam_gen.skill[s++][0],\n    cdHold: skillParam_gen.skill[s++][0],\n    duration: skillParam_gen.skill[s++],\n  },\n  burst: {\n    skillDmg: skillParam_gen.burst[b++],\n    fieldDmg: skillParam_gen.burst[b++],\n    healHp_: skillParam_gen.burst[b++],\n    healBase: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    duration: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\n  },\n  passive2: {\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\n    duration: skillParam_gen.passive1[p2++][0],\n  },\n  constellation1: {\n    energyRegen: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\n  },\n  constellation6: {\n    healingBonus_: skillParam_gen.constellation6[0],\n    emBonus: skillParam_gen.constellation6[1],\n  },\n} as const\n\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\n\n// Hold shield bonus is a separate multiplier\nconst holdSkillShieldStr_ = percent(1.75)\n// C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\n// 100% if not C2, 175% if C2 or higher\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, holdSkillShieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\n    pressShield: nodeSkillShieldPress,\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\n    holdShield: nodeSkillShieldHold,\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\n  },\n  burst: {\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\n  },\n}\n\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\n\nconst nodeC6healing_Disp = equal(condC6, \"lower\", percent(datamine.constellation6.healingBonus_),)\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\nconst nodeC6emDisp = equal(condC6, \"higher\", datamine.constellation6.emBonus,)\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  }, premod: {\n    skill_dmg_: nodeC2skillDmg_,\n  }, teamBuff: {\n    premod: {\n      staminaDec_: nodeA1Stamina,\n      moveSPD_: nodeA1MoveSpeed,\n      eleMas: nodeC6em,\n      incHeal_: nodeC6healing_,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: trm(\"skillDuration\"),\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\n          unit: \"s\",\n          fixed: 1,\n        }, {\n          text: tr(`skill.skillParams.3`),\n          value: datamine.skill.cdPress,\n          unit: \"s\"\n        }, {\n          text: tr(`skill.skillParams.4`),\n          value: datamine.skill.cdHold,\n          unit: \"s\",\n        }],\n      }, ct.conditionalTemplate(\"passive1\", {\n        teamBuff: true,\n        value: condA1,\n        path: condA1Path,\n        name: trm(`a1shielded`),\n        states: {\n          on: {\n            fields: [{\n              node: nodeA1MoveSpeed,\n            }, {\n              node: nodeA1Stamina,\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cd,\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"constellation6\", {\n        teamBuff: true,\n        value: condC6,\n        path: condC6Path,\n        name: st(\"activeCharField\"),\n        states: {\n          lower: {\n            name: st(\"lessEqPercentHP\", { percent: 50 }),\n            fields: [{\n              node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\n            }]\n          },\n          higher: {\n            name: st(\"greaterPercentHP\", { percent: 50 }),\n            fields: [{\n              node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2skillDmg_ }] }]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\n\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Eula_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\nimport { CharacterKey } from '../../../Types/consts'\nimport { objectKeyMap, range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Eula\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    spinningDmg: skillParam_gen.auto[a++],\n    finalDmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n    duration: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    hold: skillParam_gen.skill[s++],\n    icewhirl: skillParam_gen.skill[s++],\n    physResDec: skillParam_gen.skill[s++],\n    cryoResDec: skillParam_gen.skill[s++],\n    resDecDuration: skillParam_gen.skill[s++][0],\n    pressCd: skillParam_gen.skill[s++][0],\n    holdCd: skillParam_gen.skill[s++][0],\n    defBonus: skillParam_gen.skill[s++][0],\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\n    physResDecNegative: skillParam_gen.skill[s++],\n    cryoResDecNegative: skillParam_gen.skill[s++],\n    grimheartDuration: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    lightfallDmg: skillParam_gen.burst[b++],\n    dmgPerStack: skillParam_gen.burst[b++],\n    maxStack: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    percentage: skillParam_gen.passive1[p1++][0],\n  },\n  constellation1: {\n    physInc: skillParam_gen.constellation1[0],\n  },\n  constellation4: {\n    dmgInc: skillParam_gen.constellation4[0],\n  },\n} as const\n\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\n\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\n\nconst lightSwordAdditional: Data = {\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\n  hit: { ele: constant(\"physical\") }\n}\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    lightFallSwordNew: customDmgNode(\n      prod(\n        sum(\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\n          prod(\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\n          ),\n        ),\n        input.total.atk\n      ), \"burst\", lightSwordAdditional),\n  },\n  passive1: {\n    shatteredLightfallSword: prod(\n      percent(datamine.passive1.percentage),\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    def_,\n    cryo_enemyRes_,\n    physical_enemyRes_,\n    physical_dmg_\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"cryo\",\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.stamina,\n          unit: '/s'\n        }, {\n          text: tr(\"auto.skillParams.8\"),\n          value: datamine.charged.duration,\n          unit: 's'\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.8\"),\n          value: `${datamine.skill.pressCd}`,\n          unit: 's'\n        }, {\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: st(\"holdCD\"),\n          value: `${datamine.skill.holdCd}`,\n          unit: 's'\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: 2,\n        }, {\n          node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condGrimheart,\n        path: condGrimheartPath,\n        name: trm(\"skillC.name\"),\n        states: {\n          \"stack1\": {\n            name: st(\"stack\", { count: 1 }),\n            fields: [{\n              node: def_,\n            }, {\n              text: trm(\"skillC.grimheart.int\")\n            }, {\n              text: tr(\"skill.skillParams.4\"),\n              value: datamine.skill.grimheartDuration,\n              unit: 's'\n            }]\n          },\n          \"stack2\": {\n            name: st(\"stack\", { count: 2 }),\n            fields: [{\n              node: def_,\n            }, {\n              text: trm(\"skillC.grimheart.int\")\n            }, {\n              text: tr(\"skill.skillParams.4\"),\n              value: datamine.skill.grimheartDuration,\n              unit: 's'\n            }]\n          },\n          \"consumed\": {\n            name: trm(\"skillC.consumed\"),\n            fields: [{\n              node: cryo_enemyRes_,\n            }, {\n              node: physical_enemyRes_,\n            }, {\n              text: sgt('duration'),\n              value: 7,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: `${datamine.burst.cd}`,\n          unit: 's'\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: `${datamine.burst.enerCost}`,\n        }, {\n          text: sgt(\"duration\"),\n          value: 7,\n          unit: 's'\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condLightfallSword,\n        path: condLightfallSwordPath,\n        name: trm(\"burstC.name\"),\n        states: {\n          ...objectKeyMap(range(1, 30), i => ({\n            name: st(\"stack\", { count: i }),\n            fields: [{\n              canShow: data => data.get(input.constellation).value >= 6,\n              text: trm(\"burstC.start5\"),\n            }, {\n              canShow: data => data.get(input.constellation).value >= 6,\n              text: trm(\"burstC.addStacks\"),\n            }]\n          })),\n        }\n      }), ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        name: trm(\"c4C.name\"),\n        states: {\n          on: {\n            fields: [{\n              text: trm(\"c4C.desc\")\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        value: condTidalIllusion,\n        path: condTidalIllusionPath,\n        name: trm(\"c1C.name\"),\n        states: {\n          on: {\n            fields: [{\n              node: physical_dmg_,\n            }, {\n              text: sgt('duration'),\n              value: trm('c1C.durationStack')\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Fischl_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\nconst key: CharacterKey = \"Fischl\"\nconst elementKey: ElementKey = \"electro\"\nconst region: Region = \"mondstadt\"\nconst [tr] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    aimedCharged: skillParam_gen.auto[a++],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    ozDmg: skillParam_gen.skill[s++],\n    summonDmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    dmg: skillParam_gen.passive1[p1++][0]\n  },\n  passive2: {\n    dmg: skillParam_gen.passive2[p2++][0]\n  },\n  constellation1: {\n    dmg: skillParam_gen.constellation1[0]\n  },\n  constellation2: {\n    dmg: skillParam_gen.constellation2[0]\n  },\n  constellation4: {\n    dmg: skillParam_gen.constellation4[0],\n    regen: skillParam_gen.constellation4[1]\n  },\n  constellation6: {\n    dmg: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1]\n  }\n} as const\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\n      { hit: { ele: constant('electro') } })),\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\n  },\n  passive2: {\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\n  },\n  constellation1: {\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          canShow: (data) => data.get(input.asc).value >= 1,\n          node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          canShow: (data) => data.get(input.constellation).value < 2,\n          node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 2,\n          node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 6,\n          node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: `${datamine.skill.cd}`,\n          unit: \"s\"\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 2,\n          text: st(\"aoeInc\"),\n          value: 50,\n          unit: \"%\"\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 4,\n          node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 4,\n          node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: `${datamine.burst.cd}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: `${datamine.burst.enerCost}`,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\n        }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\n        }]\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Ganyu_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Ganyu\"\nconst elementKey: ElementKey = \"cryo\"\nconst region: Region = \"liyue\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5\n      skillParam_gen.auto[a++], // 6\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    aimedCharged: skillParam_gen.auto[a++],\n    frostflake: skillParam_gen.auto[a++],\n    frostflakeBloom: skillParam_gen.auto[a++],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    inheritedHp: skillParam_gen.skill[s++],\n    dmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    duration: skillParam_gen.passive1[p1++][0],\n    critRateInc: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    opCryoRes: skillParam_gen.constellation1[0],\n    duration: skillParam_gen.constellation1[1],\n    enerRegen: skillParam_gen.constellation1[2],\n  }\n} as const\n\nconst [condA1Path, condA1] = cond(key, \"A1\")\nconst [condA4Path, condA4] = cond(key, \"A4\")\nconst [condC1Path, condC1] = cond(key, \"C1\")\nconst [condC4Path, condC4] = cond(key, \"C4\")\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\nconst all_dmg_ = greaterEq(input.constellation, 4,\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  teamBuff: {\n    premod: {\n      cryo_dmg_,\n      all_dmg_,\n      cryo_enemyRes_,\n    },\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\n        }],\n      }, ct.conditionalTemplate(\"passive1\", {\n        value: condA1,\n        path: condA1Path,\n        name: trm(\"a1.condName\"),\n        states: {\n          on: {\n            fields: [{\n              text: trm(\"a1.critRateInc\"),\n              value: datamine.passive1.critRateInc * 100,\n              unit: \"%\"\n            }, {\n              text: sgt(\"duration\"),\n              value: `${datamine.passive1.duration}s`,\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation1\", {\n        value: condC1,\n        path: condC1Path,\n        name: trm(\"c1.condName\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: cryo_enemyRes_\n            }, {\n              text: sgt(\"duration\"),\n              value: `${datamine.constellation1.duration}s`,\n            }]\n          }\n        }\n      }), {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: `${datamine.skill.duration}s`,\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: `${datamine.skill.cd}s`,\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 2,\n          text: st(\"charges\"),\n          value: 2,\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: `${datamine.burst.duration}s`,\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: `${datamine.burst.cd}s`,\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: `${datamine.burst.enerCost}`,\n        }],\n      }, ct.conditionalTemplate(\"passive2\", {\n        value: condA4,\n        path: condA4Path,\n        teamBuff: true,\n        name: st(\"activeCharField\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        teamBuff: true,\n        name: st(\"opponentsField\"),\n        states: Object.fromEntries(range(1, 5).map(i => [i, {\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\n          fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\n        }]))\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Gorou_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, tally, target } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Gorou\"\nconst elementKey: ElementKey = \"geo\"\nconst [tr] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++], // Aimed\n    fully: skillParam_gen.auto[a++], // Fully-charged\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    defInc: skillParam_gen.skill[s++],\n    geo_dmg_: skillParam_gen.skill[s++][0],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0]\n  },\n  burst: {\n    dmg_def: skillParam_gen.burst[b++],\n    crystalDmg_def: skillParam_gen.burst[b++],\n    crystalHits: 6,\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    def_: skillParam_gen.passive1[0][0],\n    duration: skillParam_gen.passive1[1][0],\n  },\n  passive2: {\n    skill_dmgInc: skillParam_gen.passive2[0][0],\n    burst_dmgInc: skillParam_gen.passive2[1][0],\n  },\n  constellation4: {\n    heal_def_: skillParam_gen.constellation4[0],\n  },\n  constellation6: {\n    geo_critDMG_: [\n      skillParam_gen.constellation6[0],\n      skillParam_gen.constellation6[1],\n      skillParam_gen.constellation6[2],\n      skillParam_gen.constellation6[2],\n    ] as number[],\n    duration: skillParam_gen.constellation6[3]\n  }\n} as const\n\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\nconst skill1_defDisp = equal(condInField, \"inField\",\n  greaterEq(tally[\"geo\"], 1,\n    subscript(input.total.skillIndex, datamine.skill.defInc)\n  )\n)\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\",\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\n)\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\n\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\n\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\n\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6,\n  equal(condAfterSkillBurst, \"afterSkillBurst\",\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\n  )\n)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\n  },\n  constellation4: {\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\n  }\n}\n\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    burst: burstC5,\n    skill: skillC3,\n  },\n  teamBuff: {\n    premod: {\n      def: skill1_def,\n      geo_dmg_: skill3_geo_dmg_,\n      def_: afterBurst_def_,\n      geo_critDMG_: c6_geo_critDMG_,\n    }\n  },\n  premod: {\n    skill_dmgInc: p2_skill_dmgInc,\n    burst_dmgInc: p2_burst_dmgInc,\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }],\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condInField,\n        path: condInFieldPath,\n        name: st(\"activeCharField\"),\n        teamBuff: true,\n        states: {\n          inField: {\n            fields: [{\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\n            }, {\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\n              text: st(\"incInterRes\")\n            }, {\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"passive2\", {\n        fields: [{\n          node: p2_skill_dmgInc\n        }]\n      }), ct.headerTemplate(\"constellation4\", {\n        teamBuff: true,\n        canShow: greaterEq(tally.geo, 2, 1),\n        fields: [{\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\", variant: \"success\" }),\n        }]\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\n          textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost\n        }]\n      }, ct.conditionalTemplate(\"passive1\", {\n        value: condAfterBurst,\n        path: condAfterBurstPath,\n        name: st(\"afterUse.burst\"),\n        teamBuff: true,\n        states: {\n          afterBurst: {\n            fields: [{\n              node: afterBurst_def_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"passive2\", {\n        fields: [{\n          node: p2_burst_dmgInc\n        }]\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condAfterSkillBurst,\n        path: condAfterSkillBurstPath,\n        name: st(\"afterUse.skillOrBurst\"),\n        teamBuff: true,\n        states: {\n          afterSkillBurst: {\n            fields: [{\n              node: c6_geo_critDMG_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation6.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })])\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Hu_Tao_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input } from '../../../Formula'\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"HuTao\"\nconst elementKey: ElementKey = \"pyro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5.1\n      skillParam_gen.auto[a++], // 5.2\n      skillParam_gen.auto[a++], // 6\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    activationCost: skillParam_gen.skill[s++][0],\n    atkInc: skillParam_gen.skill[s++],\n    dmg: skillParam_gen.skill[s++],\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n    maxAtkInc: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    lowHpDmg: skillParam_gen.burst[b++],\n    regen: skillParam_gen.burst[b++],\n    lowHpRegen: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    minHp: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    critRateInc: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    minHp: skillParam_gen.passive2[p2++][0],\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    critRateInc: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    minHp: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n    elePhysResInc: skillParam_gen.constellation6[2],\n    critRateInc: skillParam_gen.constellation6[3],\n  },\n} as const\n\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\nconst atk = equal(\"on\", condAfterlife, min(\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\n\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\n\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\n\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  premod: {\n    pyro_dmg_,\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\n    critRate_\n  },\n  total: {\n    atk\n  },\n  teamBuff: {\n    premod: {\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\n    }\n  },\n  infusion: {\n    nonOverridableSelf: infusion\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\n          textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\n        }, {\n          node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: datamine.skill.bloodBlossomDuration,\n          unit: 's'\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condAfterlife,\n        path: condAfterlifePath,\n        name: trm(\"paramita.enter\"),\n        states: {\n          on: {\n            fields: [{\n              text: tr(\"skill.skillParams.0\"),\n              value: datamine.skill.activationCost * 100, // Convert to percentage\n              unit: '% Current HP'\n            }, {\n              node: atk,\n            }, {\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\n            }, {\n              text: tr(\"skill.skillParams.4\"),\n              value: datamine.skill.duration,\n              unit: 's'\n            }, {\n              text: tr(\"skill.skillParams.5\"),\n              value: datamine.skill.cd,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\n        }, {\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\n        }, {\n          node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cd,\n          unit: 's'\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.enerCost\n        }, {\n          canShow: (data) => data.get(input.constellation).value > 1,\n          text: trm(\"constellation2.applyBloodBlossom\"),\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        value: condA1,\n        path: condA1Path,\n        teamBuff: true,\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\n        name: trm(\"paramita.end\"),\n        states: {\n          on: {\n            fields: [{\n              node: critRateTeam_1,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        value: condA2,\n        path: condA2Path,\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\n        states: {\n          on: {\n            fields: [{\n              node: pyro_dmg_,\n            }]\n          }\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        teamBuff: true,\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\n        name: trm(\"constellation4.condName\"),\n        states: {\n          on: {\n            fields: [{\n              node: critRateTeam_2,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation4.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        name: trm(\"constellation6.condName\"),\n        states: {\n          on: {\n            fields: [...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\n              node: critRate_,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation6.duration,\n              unit: 's'\n            }, {\n              text: sgt(\"cd\"),\n              value: 60,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Jean_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Jean\"\nconst elementKey: ElementKey = \"anemo\"\nconst regionKey: Region = \"mondstadt\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    stamina: skillParam_gen.skill[s++][0],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    enterExitDmg: skillParam_gen.burst[b++],\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\n    burstActionFlatModifier: skillParam_gen.burst[b++],\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    chance: skillParam_gen.passive1[p1++][0],\n    atkPercentage: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    energyRegen: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    increaseDmg: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    moveSpd: skillParam_gen.constellation2[0],\n    atkSpd: skillParam_gen.constellation2[1],\n    duration: skillParam_gen.constellation2[2],\n  },\n  constellation4: {\n    anemoRes: skillParam_gen.constellation4[0],\n  },\n  constellation6: {\n    dmgReduction: skillParam_gen.constellation6[0],\n  },\n} as const\n\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\n\nconst [condC1Path, condC1] = cond(key, \"c1\")\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\n\nconst [condC2Path, condC2] = cond(key, \"c2\")\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\n\nconst [condC4Path, condC4] = cond(key, \"c4\")\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\n\nconst [condC6Path, condC6] = cond(key, \"c6\")\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\n    regen,\n    contRegen\n  },\n  passive1: {\n    a1Regen\n  },\n  constellation2: {\n    atkSPD_,\n    moveSPD_\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    skill_dmg_\n  },\n  teamBuff: {\n    premod: {\n      atkSPD_,\n      moveSPD_,\n      anemo_enemyRes_,\n      dmgRed_\n    }\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: `${datamine.skill.stamina}`,\n          unit: \"/s\"\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: `${datamine.skill.duration}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: `${datamine.skill.cd}`,\n          unit: \"s\"\n        }],\n      }, ct.conditionalTemplate(\"constellation1\", {\n        value: condC1,\n        path: condC1Path,\n        name: trm(\"c1CondName\"),\n        states: {\n          on: {\n            fields: [{\n              text: trm(\"c1PullSpeed\")\n            }, {\n              node: skill_dmg_\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\n        }, {\n          node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\n        }, {\n          text: sgt(\"duration\"),\n          value: 11,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: `${datamine.burst.cd}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: `${datamine.burst.enerCost}`,\n        }]\n      }, ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        teamBuff: true,\n        name: st(\"opponentsField\"),\n        states: {\n          on: {\n            fields: [{\n              node: anemo_enemyRes_\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        teamBuff: true,\n        name: st(\"activeCharField\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(dmgRed_disp, { key: \"dmgRed_\" })\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          text: st(\"energyRegen\"),\n          value: datamine.passive2.energyRegen\n        }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        teamBuff: true,\n        name: trm(\"c2CondName\"),\n        states: {\n          on: {\n            fields: [{\n              node: atkSPD_\n            }, {\n              node: moveSPD_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Kazuha_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input, target } from '../../../Formula'\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"KaedeharaKazuha\"\nconst elementKey: ElementKey = \"anemo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3.1\n      skillParam_gen.auto[a++], // 3.2\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5x3\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++],\n    dmg2: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n    hold: skillParam_gen.skill[s++],\n    cdHold: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    dot: skillParam_gen.burst[b++],\n    add: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    asorbAdd: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    elemas: skillParam_gen.constellation2[0],\n  },\n  constellation6: {\n    auto_: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\n\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\n\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\n    equal(ele, condSwirls[ele],\n      // Use premod since this is a percentage-based effect\n      prod(percent(datamine.passive2.elemas_dmg_, { fixed: 2 }), input.premod.eleMas)\n    ))]))\n\n// 2 C2 conds for the 2 parts of his C2\nconst [condC2Path, condC2] = cond(key, \"c2\")\nconst c2EleMas = greaterEq(input.constellation, 2,\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\n\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\n)\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\n)\n\nconst [condC6Path, condC6] = cond(key, \"c6\")\nconst c6infusion = greaterEqStr(input.constellation, 6,\n  equalStr(\"c6\", condC6, \"anemo\"))\nconst c6Dmg_ = greaterEq(input.constellation, 6,\n  // Not sure if this should be premod or total. I am guessing premod\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\n)\n// Share `match` and `prod` between the three nodes\nconst c6NormDmg_ = { ...c6Dmg_ }\nconst c6ChargedDmg_ = { ...c6Dmg_ }\nconst c6PlungingDmg_ = { ...c6Dmg_ }\n\nconst passive = percent(0.2)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\n    ...Object.fromEntries(absorbableEle.map(key =>\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\n  },\n  passive1: Object.fromEntries(absorbableEle.map(key =>\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\n  passive2: asc4,\n  constellation6: {\n    normal_dmg_: c6NormDmg_,\n    charged_dmg_: c6ChargedDmg_,\n    plunging_dmg_: c6PlungingDmg_,\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  teamBuff: {\n    premod: {\n      staminaSprintDec_: passive,\n      eleMas: c2PEleMas,\n    },\n    total: {\n      // Should be in total, since other character abilities should not scale off this\n      // if those abilities are percentage-based (e.g. XQ skill dmg red.)\n      ...asc4,\n    }\n  },\n  infusion: {\n    overridableSelf: c6infusion,\n  },\n  total: {\n    normal_dmg_: c6NormDmg_,\n    charged_dmg_: c6ChargedDmg_,\n    plunging_dmg_: c6PlungingDmg_,\n  },\n  premod: {\n    eleMas: c2EleMas,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\n          textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: data => data.get(input.constellation).value >= 1\n            ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\n            : `${datamine.skill.cd}`,\n          unit: \"s\"\n        }, {\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }, {\n          text: st(\"holdCD\"),\n          value: data => data.get(input.constellation).value >= 1\n            ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\n            : `${datamine.skill.cdHold}`,\n          unit: \"s\"\n        }]\n      }, ct.headerTemplate(\"skill\", {\n        fields: [{\n          node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\n        }, {\n          text: trm(\"c1\"),\n        }]\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", { // Burst absorption\n        value: condBurstAbsorption,\n        path: condBurstAbsorptionPath,\n        name: st(\"eleAbsor\"),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: [{\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\n          }]\n        }]))\n      }), ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        name: trm(\"c2\"),\n        states: {\n          c2: {\n            fields: [{\n              node: c2EleMas\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation2\", { // C2 Party\n        canShow: unequal(input.activeCharKey, key, 1),\n        value: condC2P,\n        path: condC2PPath,\n        teamBuff: true,\n        name: st(\"activeCharField\"),\n        states: {\n          c2p: {\n            fields: [{\n              node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        // Skill Absorption\n        value: condSkillAbsorption,\n        path: condSkillAbsorptionPath,\n        name: st(\"eleAbsor\"),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: [{\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\n          }]\n        }]))\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", { // Poetics of Fuubutsu\n        teamBuff: true,\n        states: Object.fromEntries(absorbableEle.map(ele => [ele, {\n          value: condSwirls[ele],\n          path: condSwirlPaths[ele],\n          name: st(`swirlReaction.${ele}`),\n          fields: [{\n            node: asc4[`${ele}_dmg_`]\n          }, {\n            text: sgt(\"duration\"),\n            value: datamine.passive2.duration,\n            unit: \"s\"\n          }]\n        }]))\n        }),\n      ]),\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\n        teamBuff: true,\n        fields: [{\n          node: passive\n        }]\n      })]),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        // Crimson Momiji\n        value: condC6,\n        path: condC6Path,\n        name: trm(\"c6.after\"),\n        states: {\n          c6: {\n            fields: [{\n              canShow: data => data.get(c6infusion).value === elementKey,\n              text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\n            }, {\n              node: c6NormDmg_\n            }, {\n              node: c6ChargedDmg_\n            }, {\n              node: c6PlungingDmg_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation6.duration,\n              unit: \"s\",\n            }]\n          }\n        }\n      })])\n    },\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Kaeya_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Kaeya\"\nconst elementKey: ElementKey = \"cryo\"\nconst region: Region = \"mondstadt\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++],\n    dmg2: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    duration: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    healAtk_: .15,\n  },\n  constellation1: {\n    critRate_: .15,\n  },\n  constellation4: {\n    shieldHp_: 0.30,\n    duration: 20,\n    cooldown: 60,\n  },\n} as const\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n  passive1: {\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\n  },\n  constellation4: {\n    cryoShield: shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\n    shield: shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0),\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\n//Conditional C1: Oppo affected by Cryo\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\n\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  }, premod: {\n    normal_critRate_: nodeC1NormalCritRate,\n    charged_critRate_: nodeC1ChargeCritRate,\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.enerCost,\n        }, {\n          canShow: data => data.get(input.constellation).value >= 2,\n          text: trm(\"c2burstDuration\"),\n        }],\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.headerTemplate(\"passive1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal`, variant: \"success\" }),\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        value: condC1Cryo,\n        path: condC1Path,\n        name: trm(\"c1cond\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC1NormalCritRate\n            }, {\n              node: nodeC1ChargeCritRate\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `char_${key}:c4shield` }),\n        }, {\n          node: infoMut(dmgFormulas.constellation4.shield, { key: `char_${key}:c4shield` }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.constellation4.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: datamine.constellation4.cooldown,\n          unit: \"s\"\n        }]\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\n\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Kamisato_Ayaka_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\nimport sprint from './sprint.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input } from '../../../Formula'\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"KamisatoAyaka\"\nconst elementKey: ElementKey = \"cryo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4x3\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++], // 1x3\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    cutDmg: skillParam_gen.burst[b++],\n    bloomDmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  sprint: {\n    active_stam: skillParam_gen.sprint[sp++][0],\n    drain_stam: skillParam_gen.sprint[sp++][0],\n    duration: skillParam_gen.sprint[sp++][0],\n  },\n  passive1: {\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    stamina: skillParam_gen.passive2[p2++][0],\n    cryo: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    snowflake: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    def_red: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    cd: skillParam_gen.constellation6[0],\n    charged_bonus: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\n\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\n\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\n\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\nconst afterBurst = greaterEq(input.constellation, 4,\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\n\nconst [condC6Path, condC6] = cond(key, \"C6\")\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n  },\n  burst: {\n    cutting: dmgNode(\"atk\", datamine.burst.cutDmg, \"burst\"),\n    bloom: dmgNode(\"atk\", datamine.burst.bloomDmg, \"burst\"),\n  },\n  constellation2: {\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(\n      subscript(input.total.burstIndex, datamine.burst.cutDmg, { key: \"_\" }),\n      percent(datamine.constellation2.snowflake),\n      input.total.atk,\n    ), \"burst\", { hit: { ele: constant(elementKey) } })),\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  teamBuff: {\n    premod: {\n      enemyDefRed_: afterBurst\n    }\n  },\n  infusion: {\n    overridableSelf: afterSprintInfusion,\n  },\n  premod: {\n    normal_dmg_: a1NormDmg_,\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\n    cryo_dmg_: afterApplySprintCryo,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: st(\"brHits\", { count: 3 })\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n        }]\n      }, ct.conditionalTemplate(\"passive1\", {\n        value: condAfterSkillA1,\n        path: condAfterSkillA1Path,\n        name: trm(\"afterSkill\"),\n        states: {\n          afterSkill: {\n            fields: [{\n              node: a1NormDmg_,\n            }, {\n              node: a1ChargedDmg_,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\",\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.burst.duration,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"constellation4\", {\n        teamBuff: true,\n        value: condAfterBurst,\n        path: condAfterBurstPath,\n        name: trm(\"dmgBySnowflake\"),\n        states: {\n          c4: {\n            fields: [{\n              node: afterBurst\n            }, {\n              text: sgt(\"duration\"),\n              value: \"6s\"\n            }]\n          }\n        }\n      })]),\n\n      sprint: ct.talentTemplate(\"sprint\", [{\n        fields: [{\n          text: st(\"activationStam\"),\n          value: datamine.sprint.active_stam,\n        }, {\n          text: st(\"stamDrain\"),\n          value: datamine.sprint.drain_stam,\n          unit: \"/s\",\n        }]\n      }, ct.conditionalTemplate(\"sprint\", {\n        value: condAfterSprint,\n        path: condAfterSprintPath,\n        name: trm(\"afterSprint\"),\n        states: {\n          afterSprint: {\n            fields: [{\n              canShow: data => data.get(afterSprintInfusion).value === elementKey,\n              text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.sprint.duration,\n              unit: \"s\",\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"passive2\", {\n        value: condAfterApplySprint,\n        path: condAfterApplySprintPath,\n        name: trm(\"afterSprintCryo\"),\n        states: {\n          afterApplySprint: {\n            fields: [{\n              text: trm(\"staminaRestore\"),\n              value: datamine.passive2.stamina,\n            }, {\n              node: afterApplySprintCryo\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\",\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\n        }]\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        name: trm(\"c6Active\"),\n        states: {\n          c6: {\n            fields: [{\n              node: c6ChargedDmg_,\n            }, {\n              text: sgt(\"cd\"),\n              value: datamine.constellation6.cd,\n              unit: \"s\"\n            },]\n          }\n        }\n      })])\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Kamisato_Ayato_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"KamisatoAyato\"\nconst elementKey: ElementKey = \"hydro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4x2\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++], // 1\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmgArr: [\n      skillParam_gen.skill[s++],\n      skillParam_gen.skill[s++],\n      skillParam_gen.skill[s++],\n    ],\n    stateDuration: skillParam_gen.skill[s++][0],\n    stackHpDmgInc: skillParam_gen.skill[s++],\n    maxStacks: 4,\n    illusionDmg: skillParam_gen.skill[s++],\n    illusionDuration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    normal_dmg_: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    stacksGained: skillParam_gen.passive1[0][0],\n  },\n  passive2: {\n    enerThres_: skillParam_gen.passive2[0][0],\n    cd: skillParam_gen.passive2[1][0],\n    energyRestore: skillParam_gen.passive2[2][0]\n  },\n  constellation1: {\n    oppHpThres_: skillParam_gen.constellation1[0],\n    shunDmg_: skillParam_gen.constellation1[1],\n  },\n  constellation2: {\n    extraStacks: skillParam_gen.constellation2[0],\n    stackThresh: 3,\n    hp_: skillParam_gen.constellation2[1],\n  },\n  constellation4: {\n    atkSPD: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    extraStrikes: 2,\n    dmg: skillParam_gen.constellation6[0],\n  }\n} as const\n\nconst [condInSkillPath, condInSkill] = cond(key, \"inSkill\")\n\nconst [condSkillStacksPath, condSkillStacks] = cond(key, \"skillStacks\")\nconst skillStacks_dmgInc = equal(condInSkill, \"on\",\n  lookup(condSkillStacks, Object.fromEntries(range(1, 5).map(stacks => [\n    stacks,\n    prod(\n      stacks,\n      subscript(input.total.skillIndex, datamine.skill.stackHpDmgInc, { key: \"_\" }),\n      input.total.hp,\n    )\n  ])), naught)\n)\n\nconst [condBurstInAreaPath, condBurstInArea] = cond(key, \"burstInArea\")\nconst burst_normal_dmg_Disp = equal(condBurstInArea, \"on\",\n  subscript(input.total.burstIndex, datamine.burst.normal_dmg_)\n)\nconst burst_normal_dmg_ = equal(input.activeCharKey, target.charKey, burst_normal_dmg_Disp)\n\nconst [condC1OppHpPath, condC1OppHp] = cond(key, \"c1OppHp\")\nconst c1Shun_dmg_ = greaterEq(input.constellation, 1, equal(condC1OppHp, \"on\", datamine.constellation1.shunDmg_))\n\n// Not sure what \"Max HP increased by 50%\" means\nconst c2_hp_ = greaterEq(input.constellation, 2, equal(condInSkill, \"on\",\n  lookup(condSkillStacks, Object.fromEntries(range(datamine.constellation2.stackThresh, 5).map(stacks => [\n    stacks,\n    percent(datamine.constellation2.hp_)\n  ])), naught)\n))\n\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\nconst c4_atkSPD_ = greaterEq(input.constellation, 4, equal(condC4AfterBurst, \"on\", datamine.constellation4.atkSPD))\n\nconst shunAddl: Data = {\n  hit: {\n    ele: constant(elementKey)\n  },\n  premod: {\n    normal_dmgInc: skillStacks_dmgInc,\n    normal_dmg_: c1Shun_dmg_\n  }\n}\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    ...Object.fromEntries(datamine.skill.dmgArr.map((arr, i) =>\n      [`dmg${i}`, equal(condInSkill, \"on\", customDmgNode(prod(\n        subscript(input.total.skillIndex, arr, { key: \"_\" }),\n        input.total.atk,\n      ), \"normal\", shunAddl))])),\n    illusionDmg: dmgNode(\"atk\", datamine.skill.illusionDmg, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n  constellation6: {\n    // Not sure if this benefits from C1 or not\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"normal\", { hit: { ele: constant(elementKey) }, premod: { normal_dmg_: c1Shun_dmg_ } }))\n  }\n}\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC3,\n    burst: burstC5,\n  },\n  teamBuff: {\n    premod: {\n      normal_dmg_: burst_normal_dmg_,\n      atkSPD_: c4_atkSPD_,\n    }\n  },\n  premod: {\n    hp_: c2_hp_,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields:\n          datamine.normal.hitArr.map((_, i) => ({\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\n          }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.illusionDmg, { key: `char_${key}_gen:skill.skillParams.5` })\n        }, {\n          text: tr(\"skill.skillParams.6\"),\n          value: datamine.skill.illusionDuration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condInSkill,\n        path: condInSkillPath,\n        name: st(\"afterUse.skill\"),\n        states: {\n          on: {\n            fields: [\n              ...datamine.skill.dmgArr.map((_, i) => ({\n                node: infoMut(dmgFormulas.skill[`dmg${i}`], { key: `char_${key}_gen:skill.skillParams.${i}` })\n              })), {\n                text: st(\"incInterRes\"),\n              }, {\n                text: trm(\"skill.unableToAuto\"),\n              }, {\n                text: sgt(\"duration\"),\n                value: datamine.skill.stateDuration,\n                unit: \"s\"\n              }]\n          }\n        }\n      }), ct.conditionalTemplate(\"skill\", {\n        value: condSkillStacks,\n        path: condSkillStacksPath,\n        name: trm(\"skill.namisenStacks\"),\n        canShow: equal(condInSkill, \"on\", 1),\n        states: Object.fromEntries(range(1, 5).map(stacks => [\n          stacks, {\n            name: st(\"stack\", { count: stacks }),\n            fields: [{\n              node: infoMut(skillStacks_dmgInc, { key: `char_${key}:skill.shun_dmgInc` })\n            }, {\n              text: st(\"maxStacks\"),\n              value: data => data.get(input.constellation).value >= 2\n                ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\n                : datamine.skill.maxStacks\n            }]\n          }\n        ]))\n      }), ct.headerTemplate(\"passive1\", {\n        canShow: equal(condInSkill, \"on\", 1),\n        fields: [{\n          text: trm(\"passive1.afterUse\"),\n          value: datamine.passive1.stacksGained,\n        }, {\n          text: trm(\"passive1.afterExplode\"),\n          value: data => data.get(input.constellation).value >= 2\n            ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\n            : datamine.skill.maxStacks\n        }]\n      }), ct.conditionalTemplate(\"constellation1\", {\n        value: condC1OppHp,\n        path: condC1OppHpPath,\n        name: st(\"enemyLessEqPercentHP\", { percent: datamine.constellation1.oppHpThres_ * 100 }),\n        canShow: equal(condInSkill, \"on\", 1),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(c1Shun_dmg_, { key: `char_${key}:c1.shun_dmg_` }),\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation2\", {\n        fields: [{\n          text: trm(\"c2.addlStacks\"),\n          value: datamine.constellation2.extraStacks,\n        }, {\n          canShow: data => data.get(c2_hp_).value !== 0,\n          node: c2_hp_,\n        }]\n      }), ct.headerTemplate(\"constellation6\", {\n        canShow: equal(condInSkill, \"on\", 1),\n        fields: [{\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:c6.dmg` }),\n          textSuffix: st(\"brHits\", { count: datamine.constellation6.extraStrikes })\n        }]\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.burst.duration,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condBurstInArea,\n        path: condBurstInAreaPath,\n        name: st(\"activeCharField\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(burst_normal_dmg_Disp, { key: \"normal_dmg_\" })\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation4\", {\n        value: condC4AfterBurst,\n        path: condC4AfterBurstPath,\n        name: st(\"afterUse.burst\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: c4_atkSPD_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation4.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Keqing_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input } from '../../../Formula'\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { objectKeyMap, range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Keqing\"\nconst elementKey: ElementKey = \"electro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4.1\n      skillParam_gen.auto[a++], // 4.2\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++], // 1\n    dmg2: skillParam_gen.auto[a++], // 2\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    stiletto: skillParam_gen.skill[s++],\n    slash: skillParam_gen.skill[s++],\n    thunderclap: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    initial: skillParam_gen.burst[b++],\n    slash: skillParam_gen.burst[b++],\n    final: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    cost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    duration: skillParam_gen.passive1[0][0],\n  },\n  passive2: {\n    critInc_: skillParam_gen.passive2[p2++][0],\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0]\n  },\n  constellation1: {\n    dmg: skillParam_gen.constellation1[0],\n  },\n  constellation4: {\n    duration: skillParam_gen.constellation4[0],\n    atkInc: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    electroInc: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\n  },\n  burst: {\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\n  },\n  constellation1: {\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\n  greaterEqStr(input.asc, 1, elementKey)\n)\n\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\n\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\n\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\n  prod(\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\n    datamine.constellation6.electroInc\n  )\n)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  infusion: {\n    overridableSelf: afterRecastInfusion,\n  },\n  premod: {\n    critRate_: afterBurstCritRate_,\n    enerRech_: afterBurstEnerRech_,\n    atk_: afterReactAtk_,\n    electro_dmg_: c6Electro_dmg_,\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i],\n            { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\n          ),\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n          fixed: 1\n        }]\n      }, ct.conditionalTemplate(\"passive1\", {\n        value: condAfterRecast,\n        path: condAfterRecastPath,\n        name: trm(\"recast\"),\n        states: {\n          afterRecast: {\n            fields: [{\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\n          textSuffix: st(\"brHits\", { count: 8 })\n        }, {\n          node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.cost,\n        }]\n      }, ct.conditionalTemplate(\"passive2\", {\n        value: condAfterBurst,\n        path: condAfterBurstPath,\n        name: st(\"afterUse.burst\"),\n        states: {\n          afterBurst: {\n            fields: [{\n              node: afterBurstCritRate_\n            }, {\n              node: afterBurstEnerRech_\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\n        }]\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        value: condAfterReact,\n        path: condAfterReactPath,\n        name: trm(\"electroReact\"),\n        states: {\n          afterReact: {\n            fields: [{\n              node: afterReactAtk_\n            }]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condC6Stack,\n        path: condC6StackPath,\n        name: trm(\"effectTriggers\"),\n        states: objectKeyMap(range(1, 4), i => ({\n          name: st(\"stack\", { count: i }),\n          fields: [{\n            node: c6Electro_dmg_\n          }]\n        }))\n      })]),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Klee_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { cond, sgt, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\nconst key: CharacterKey = \"Klee\"\nconst elementKey: ElementKey = \"pyro\"\nconst regionKey: Region = \"mondstadt\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\n    mineDmg: skillParam_gen.skill[s++],\n    mineDuration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    unknown: skillParam_gen.burst[b++], // what is this??\n    duration: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    charged_dmg_: 0.5\n  },\n  constellation1: {\n    dmg_: 1.2\n  },\n  constellation2: {\n    enemyDefRed_: 0.23\n  },\n  constellation4: {\n    dmg: 5.55\n  },\n  constellation6: {\n    pyro_dmg_: 0.1\n  }\n} as const\n\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\n\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\n\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n  constellation1: {\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\n  },\n  constellation4: {\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  premod: {\n    charged_dmg_\n  },\n  teamBuff: {\n    premod: {\n      pyro_dmg_,\n      enemyDefRed_\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\n        }, {\n          text: tr(\"auto.skillParams.4\"),\n          value: datamine.charged.stamina\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: `${datamine.skill.mineDuration}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: `${datamine.skill.cd}`,\n          unit: \"s\"\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: `${datamine.burst.duration}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: `${datamine.burst.cd}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: `${datamine.burst.enerCost}`\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        value: condA1,\n        path: condA1Path,\n        name: trm(\"a1CondName\"),\n        states: {\n          on: {\n            fields: [{\n              node: charged_dmg_\n            }, {\n              text: trm(\"a1CondName2\")\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\n        }]\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        teamBuff: true,\n        name: trm(\"c2CondName\"),\n        states: {\n          on: {\n            fields: [{\n              node: enemyDefRed_\n            }, {\n              text: sgt(\"duration\"),\n              value: 10,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\n        }]\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        teamBuff: true,\n        name: trm(\"c6CondName\"),\n        states: {\n          on: {\n            fields: [{\n              node: pyro_dmg_\n            }, {\n              text: sgt(\"duration\"),\n              value: 25,\n              unit: \"s\"\n            }]\n          }\n        }\n      })])\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Kujou_Sara_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"KujouSara\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    fullyAimed: skillParam_gen.auto[a++],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    atkBonus: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    titanBreakerDmg: skillParam_gen.burst[b++],\n    stormClusterDmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    energyGen: skillParam_gen.passive2[p2++][0],\n    er: skillParam_gen.passive2[p2++][0]\n  },\n  constellation2: {\n    crowfeatherDmg: skillParam_gen.constellation2[0],\n  },\n  constellation6: {\n    atkInc: skillParam_gen.constellation6[0],\n  },\n} as const\n\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\n  prod(input.base.atk, atkIncRatio)\n)\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\n\nconst [condC6Path, condC6] = cond(key, \"c6\")\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n    skillTenguAmbush_\n  },\n  burst: {\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\n  },\n  constellation2: {\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  teamBuff: {\n    premod: {\n      electro_critDMG_: c6ElectroCritDmg_\n    },\n    total: {\n      atk: skillTenguAmbush_\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"electro\",\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: `${datamine.skill.duration}s`,\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: `${datamine.skill.cd}s`,\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condSkillTenguAmbush,\n        path: condSkillTenguAmbushPath,\n        name: trm(\"skill.ambush\"),\n        teamBuff: true,\n        states: {\n          TenguJuuraiAmbush: {\n            fields: [{\n              text: tr(\"skill.skillParams.1\"),\n              value: data => data.get(atkIncRatio).value * 100,\n              unit: \"%\",\n            }, {\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: `${datamine.burst.cd}s`,\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: `${datamine.burst.enerCost}`,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          text: trm(\"a4.enerRest\"),\n          value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen,\n          fixed: 2\n        }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }]\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        teamBuff: true,\n        name: trm(\"c6.electroCritDmg\"),\n        states: {\n          c6: {\n            fields: [{\n              node: c6ElectroCritDmg_,\n            }]\n          }\n        }\n      })]),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Kuki_Shinobu_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { compareEq, constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst key: CharacterKey = \"KukiShinobu\"\nconst elementKey: ElementKey = \"electro\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++],\n    dmg2: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    pressDmg: skillParam_gen.skill[s++],\n    ringHealHP_: skillParam_gen.skill[s++],\n    ringHealFlat: skillParam_gen.skill[s++],\n    ringDmg: skillParam_gen.skill[s++],\n    cost: skillParam_gen.skill[s++][0],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0]\n  },\n  burst: {\n    singleDmg: skillParam_gen.burst[b++],\n    maxDmgBase: skillParam_gen.burst[b++],\n    maxDmgExtend: skillParam_gen.burst[b++],\n    durationBase: skillParam_gen.burst[b++][0],\n    durationExtend: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    cost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    hpThresh_: skillParam_gen.passive1[p1++][0],\n    heal_: skillParam_gen.passive1[p1++][0]\n  },\n  passive2: {\n    emSkillHeal_: skillParam_gen.passive2[p2++][0],\n    emSkillDmg_: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    aoeInc: 0.5,\n  },\n  constellation2: {\n    skillDurInc: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    markDmg: skillParam_gen.constellation4[0],\n    cd: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    hpThresh_: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n    em: skillParam_gen.constellation6[2],\n    cd: skillParam_gen.constellation6[3],\n  },\n} as const\n\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\nconst a1Heal_ = greaterEq(input.asc, 1, equal(condUnderHP, \"on\", datamine.passive1.heal_))\n\nconst a4Skill_healInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillHeal_), input.total.eleMas))\nconst a4Skill_dmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillDmg_), input.total.eleMas))\n\nconst [condC6TriggerPath, condC6Trigger] = cond(key, \"c6Trigger\")\nconst c6eleMas = greaterEq(input.constellation, 6, equal(condC6Trigger, \"on\", datamine.constellation6.em))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\n  skill: {\n    pressDmg: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\n    ringHeal: healNodeTalent(\"hp\", datamine.skill.ringHealHP_, datamine.skill.ringHealFlat, \"skill\",\n      { premod: { healInc: a4Skill_healInc } }\n    ),\n    ringDmg: dmgNode(\"atk\", datamine.skill.ringDmg, \"skill\"),\n  },\n  burst: {\n    singleDmg: dmgNode(\"hp\", datamine.burst.singleDmg, \"burst\"),\n    totalDmg: compareEq(condUnderHP, \"on\",\n      dmgNode(\"hp\", datamine.burst.maxDmgExtend, \"burst\"),\n      dmgNode(\"hp\", datamine.burst.maxDmgBase, \"burst\")\n    )\n  },\n  constellation4: {\n    markDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.markDmg), input.total.hp), \"elemental\", { hit: { ele: constant(elementKey) } })),\n  },\n}\n\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC3,\n    burst: burstC5,\n  },\n  premod: {\n    heal_: a1Heal_,\n    skill_dmgInc: a4Skill_dmgInc,\n    eleMas: c6eleMas,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.4` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"auto.skillParams.5\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.pressDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.ringHeal, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\n        }, {\n          node: infoMut(dmgFormulas.skill.ringDmg, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: datamine.skill.cost * 100,\n          unit: trm(\"skill.cost\"),\n        }, {\n          text: sgt(\"duration\"),\n          value: (data) => data.get(input.constellation).value >= 2\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skillDurInc}s = ${datamine.skill.duration + datamine.constellation2.skillDurInc}`\n            : datamine.skill.duration,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }, ct.headerTemplate(\"passive2\", {\n        fields: [{\n          node: infoMut(a4Skill_healInc, { key: `char_${key}:a4.heal`, variant: \"success\" }),\n        }, {\n          node: a4Skill_dmgInc\n        }]\n      }), ct.headerTemplate(\"constellation2\", {\n        fields: [{\n          text: st(\"durationInc\"),\n          value: datamine.constellation2.skillDurInc,\n          unit: \"s\",\n        }]\n      }), ct.headerTemplate(\"constellation4\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation4.markDmg, { key: `char_${key}:c4.dmg` })\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.constellation4.cd,\n          unit: \"s\",\n        }]\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.singleDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.totalDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: sgt(\"duration\"),\n          value: (data) => data.get(condUnderHP).value === \"on\"\n            ? `${datamine.burst.durationBase}s + ${datamine.burst.durationExtend - datamine.burst.durationBase}s = ${datamine.burst.durationExtend}`\n            : datamine.burst.durationBase,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.cost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\n        value: condUnderHP,\n        path: condUnderHPPath,\n        states: {\n          on: {\n            fields: [{\n              text: st(\"durationInc\"),\n              value: datamine.burst.durationExtend - datamine.burst.durationBase,\n              fixed: 1,\n              unit: \"s\",\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: st(\"aoeInc\"),\n          value: datamine.constellation1.aoeInc * 100,\n          unit: \"%\",\n        }]\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\n        value: condUnderHP,\n        path: condUnderHPPath,\n        states: {\n          on: {\n            fields: [{\n              node: a1Heal_\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condC6Trigger,\n        path: condC6TriggerPath,\n        name: st(\"lessPercentHP\", { percent: datamine.constellation6.hpThresh_ * 100 }),\n        states: {\n          on: {\n            fields: [{\n              node: c6eleMas,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation6.duration,\n              unit: \"s\",\n            }, {\n              text: sgt(\"cd\"),\n              value: datamine.constellation6.cd,\n              unit: \"s\",\n            }]\n          }\n        }\n      })]),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Lisa_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst key: CharacterKey = \"Lisa\"\nconst elementKey: ElementKey = \"electro\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    stack0: skillParam_gen.skill[s++],\n    stack1: skillParam_gen.skill[s++],\n    stack2: skillParam_gen.skill[s++],\n    stack3: skillParam_gen.skill[s++],\n    holdCD: skillParam_gen.skill[s++][0],\n    press: skillParam_gen.skill[s++],\n    pressCD: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    tick: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    cost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\n  },\n  passive2: {\n    defShred: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0]\n  }\n} as const\n\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\n\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\n  skill: {\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\n  },\n  burst: {\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\n  },\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    burst: nodeC3,\n    skill: nodeC5,\n  },\n  premod: {\n    def_: nodeC2DefIncrease,\n  },\n  teamBuff: {\n    premod: {\n      enemyDefRed_: nodeA4DefShred\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          text: tr(\"auto.skillParams.5\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        },\n        ...range(0, 3).map(i => ({\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\n        })), {\n          text: sgt(\"press.cd\"),\n          value: datamine.skill.pressCD,\n          unit: 's'\n        }, {\n          text: sgt(\"hold.cd\"),\n          value: datamine.skill.holdCD,\n          unit: 's'\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cost,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        name: trm(\"a4C\"),\n        value: condA4,\n        path: condA4Path,\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: nodeA4DefShred\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        name: trm(\"c2C\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC2DefIncrease\n            }, {\n              text: st(\"incInterRes\")\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Mona_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\nimport sprint from './sprint.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { objectKeyMap, range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Mona\"\nconst elementKey: ElementKey = \"hydro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dot: skillParam_gen.skill[s++],\n    dmg: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    bubbleDuration: skillParam_gen.burst[b++][0],\n    dmg: skillParam_gen.burst[b++],\n    dmgBonusNeg: skillParam_gen.burst[b++],\n    omenDuration: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    dmgBonus: skillParam_gen.burst[b++],\n  },\n  sprint: {\n    active_stam: skillParam_gen.sprint[sp++][0],\n    drain_stam: skillParam_gen.sprint[sp++][0],\n  },\n  passive1: {\n    torrentDuration: skillParam_gen.passive1[p1++][0],\n    phantomDuration: skillParam_gen.passive1[p1++][0],\n    percentage: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\n    percentage: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\n    frozenExtension: skillParam_gen.constellation1[3],\n    unknown: skillParam_gen.constellation1[4], // what is this?\n    duration: skillParam_gen.constellation1[5],\n  },\n  constellation4: {\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\n  },\n  constellation6: {\n    unknown: skillParam_gen.constellation6[0], // what is this?\n    dmgBonus: skillParam_gen.constellation6[1],\n    maxDmgBonus: skillParam_gen.constellation6[2],\n    duration: skillParam_gen.constellation6[3],\n  }\n} as const\n\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\n\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\n\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\n\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\n\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\n  },\n  passive1: {\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    charged_dmg_,\n    hydro_dmg_,\n  },\n  teamBuff: {\n    premod: {\n      all_dmg_,\n      electrocharged_dmg_,\n      swirl_dmg_,\n      vaporize_dmg_,\n      critRate_\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\n        }, {\n          text: tr(\"auto.skillParams.5\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n        }]\n      }]),\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          text: trm(\"bubbleDuration\"),\n          value: datamine.burst.bubbleDuration,\n          unit: \"s\",\n        }, {\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condOmen,\n        path: condOmenPath,\n        teamBuff: true,\n        name: trm(\"omen\"),\n        states: {\n          on: {\n            fields: [{\n              node: all_dmg_,\n            }, {\n              text: trm(\"omenDuration\"),\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\n              unit: \"s\",\n            }]\n          }\n        }\n      })]),\n\n      sprint: ct.talentTemplate(\"sprint\", [{\n        fields: [{\n          text: st(\"activationStam\"),\n          value: datamine.sprint.active_stam,\n        }, {\n          text: st(\"stamDrain\"),\n          value: datamine.sprint.drain_stam,\n          unit: \"/s\",\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\n        }, {\n          text: trm(\"phantomDuration\"),\n          value: datamine.passive1.phantomDuration,\n          unit: \"s\"\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          node: hydro_dmg_\n        }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        value: condPoS,\n        path: condPoSPath,\n        teamBuff: true,\n        name: trm(\"hitOp.affectedByOmen\"),\n        states: {\n          on: {\n            fields: [{\n              node: electrocharged_dmg_,\n            }, {\n              node: swirl_dmg_,\n            }, {\n              node: vaporize_dmg_,\n            }, {\n              text: trm(\"frozenDuration\"),\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\n              unit: \"%\",\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        value: condPoO,\n        path: condPoOPath,\n        teamBuff: true,\n        name: trm(\"hitOp.affectedByOmen\"),\n        states: {\n          on: {\n            fields: [{\n              node: critRate_,\n            }]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        value: condRoC,\n        path: condRoCPath,\n        name: trm(\"uponSprint\"),\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\n          name: st(\"stack\", { count: i }),\n          fields: [\n            { node: charged_dmg_ },\n            {\n              text: sgt(\"duration\"),\n              value: datamine.constellation6.duration,\n              unit: 's'\n            }]\n        }]))\n      })])\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Ningguang_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Ningguang\"\nconst elementKey: ElementKey = \"geo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    jadeDmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\n    skillDmg: skillParam_gen.skill[s++],\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmgPerGem: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    geoDmgBonus_: skillParam_gen.passive2[p1++][0],\n    duration: skillParam_gen.passive2[p1++][0],\n  },\n} as const\n\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\n\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\n\nconst nodesC4 = Object.fromEntries(allElements.map(ele => [\n  `${ele}_res_`,\n  equal(condC4, \"on\", percent(0.10))\n]))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\n  },\n  burst: {\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\n  },\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  }, teamBuff: {\n    premod: {\n      geo_dmg_: nodeA4GeoDmgBonus_,\n      ...nodesC4,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` })\n        }, {\n          canShow: data => data.get(input.constellation).value >= 1,\n          text: trm(\"aoeGems\"),\n        }]\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\n        }, {\n          canShow: data => data.get(input.asc).value < 1,\n          text: tr(\"auto.skillParams.3\"),\n          value: datamine.charged.stamina,\n        }, {\n          canShow: data => data.get(input.asc).value >= 1,\n          text: tr(\"auto.skillParams.3\"),\n          value: trm(\"starJadeStaminaCost\"),\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          canShow: data => data.get(input.constellation).value >= 2,\n          text: trm(\"skillReset\"),\n        }],\n      }, ct.conditionalTemplate(\"passive2\", {\n        teamBuff: true,\n        value: condA4,\n        path: condA4Path,\n        name: trm(\"a4toggle\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeA4GeoDmgBonus_\n            }, {\n              text: trm(\"a4duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation4\", {\n        teamBuff: true,\n        value: condC4,\n        path: condC4Path,\n        name: trm(\"c4toggle\"),\n        states: {\n          on: {\n            fields: Object.values(nodesC4).map(n => ({ node: n }))\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.enerCost,\n        }, {\n          canShow: data => data.get(input.constellation).value >= 6,\n          text: trm(\"c6bonus\"),\n          value: 7,\n        }]\n      }]),\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\n\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Noelle_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Noelle\"\nconst elementKey: ElementKey = \"geo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    spinningDmg: skillParam_gen.auto[a++],\n    finalDmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n    duration: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    shieldDef: skillParam_gen.skill[s++],\n    healDef: skillParam_gen.skill[s++],\n    healChance: skillParam_gen.skill[s++],\n    shieldDuration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n    skillDmg: skillParam_gen.skill[s++],\n    shieldFlat: skillParam_gen.skill[s++],\n    healFlat: skillParam_gen.skill[s++],\n  },\n  burst: {\n    burstDmg: skillParam_gen.burst[b++],\n    skillDmg: skillParam_gen.burst[b++],\n    defToAtk: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: { // Devotion Shield\n    hpThreshold: skillParam_gen.passive1[p1++][0],\n    shield: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0],\n    cooldown: skillParam_gen.passive1[p1++][0],\n  },\n  constellation1: {\n    healingChance: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    chargeStamina: skillParam_gen.constellation2[0],\n    chargeDmg_: skillParam_gen.constellation2[1],\n  },\n  constellation4: {\n    skillDmg: skillParam_gen.constellation4[0],\n  },\n  constellation6: {\n    burstAtkBonus: skillParam_gen.constellation6[0],\n  },\n} as const\n\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\n  input.total.def,\n  sum(\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\n  )\n))\n\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\n\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\nconst nodeC2ChargeDec = greaterEq(input.constellation, 2, percent(-datamine.constellation2.chargeStamina))\nconst nodeC4dmg = greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\")),\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\n  },\n  burst: {\n    defConv: nodeBurstAtk,\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\n  },\n  passive1: {\n    devotionShield: greaterEq(input.asc, 1, shieldElement(\"geo\", shieldNode(\"def\", percent(datamine.passive1.shield), 0)))\n  },\n  constellation4: {\n    dmg: nodeC4dmg\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  premod: {\n    charged_dmg_: nodeC2ChargeDMG,\n    atk: nodeBurstAtk,\n    staminaChargedDec_: nodeC2ChargeDec,\n  },\n  infusion: {\n    nonOverridableSelf: nodeBurstInfusion,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"geo\",\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n          unit: '/s'\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.duration,\n          unit: 's'\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\n        }, { //Heal trigger chance\n          canShow: data => data.get(input.constellation).value === 0,\n          node: nodeSkillHealChanceBase,\n        }, {\n          canShow: data => data.get(input.constellation).value >= 1,\n          node: nodeSkillHealChanceC1BurstOff,\n        }, {\n          canShow: data => data.get(input.constellation).value >= 1,\n          node: nodeSkillHealChanceC1BurstOn,\n        }, { //Shield Duration\n          text: tr(\"skill.skillParams.4\"),\n          value: datamine.skill.shieldDuration,\n          unit: \"s\"\n        }, { //Cooldown\n          canShow: data => data.get(input.asc).value < 4,\n          text: tr(\"skill.skillParams.5\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }, {\n          canShow: data => data.get(input.asc).value >= 4,\n          text: tr(\"skill.skillParams.5\"),\n          value: trm(`p4cd`),\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          canShow: data => data.get(input.constellation).value < 6,\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          canShow: data => data.get(input.constellation).value >= 6,\n          text: tr(\"burst.skillParams.3\"),\n          value: trm(`c6duration`),\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cd,\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.enerCost,\n        }],\n      }, ct.conditionalTemplate(\"burst\", {\n        name: tr(\"burst.name\"),\n        value: condBurst,\n        path: condBurstPath,\n        states: {\n          on: {\n            fields: [{\n              text: st(\"infusion.geo\"),\n              variant: \"geo\",\n            }, {\n              text: trm(\"qlarger\")\n            }, {\n              node: nodeBurstAtk\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\n        }, {\n          text: tr(\"skill.skillParams.4\"),\n          value: datamine.passive1.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.5\"),\n          value: datamine.passive1.cooldown,\n          unit: \"s\"\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\n        fields: [{\n          node: nodeC2ChargeDec\n        }, {\n          node: nodeC2ChargeDMG\n        }]\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\n        fields: [{\n          node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\n        }]\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\n\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Qiqi_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst key: CharacterKey = \"Qiqi\"\nconst elementKey: ElementKey = \"cryo\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3x2\n      skillParam_gen.auto[a++], // 4x2\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    hitRegenPercent: skillParam_gen.skill[s++],\n    hitRegenFlat: skillParam_gen.skill[s++],\n    contRegenPercent: skillParam_gen.skill[s++],\n    contRegenFlat: skillParam_gen.skill[s++],\n    tickDmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n    castDmg: skillParam_gen.skill[s++],\n  },\n  burst: {\n    healPercent: skillParam_gen.burst[b++],\n    healFlat: skillParam_gen.burst[b++],\n    dmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    cost: skillParam_gen.burst[b++][0]\n  }\n} as const\n\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\n\n// Values here doesn't exist in skillParam_gen\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, 0.2))\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\n  skill: {\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\n  },\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    burst: nodeC3,\n    skill: nodeC5,\n  },\n  premod: {\n    normal_dmg_: nodeC2NormalDmgInc,\n    charged_dmg_: nodeC2ChargedDmgInc,\n    incHeal_: nodeA1HealingBonus\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: (i === 2 || i === 3) ? st(\"brHits\", { count: 2 }) : undefined\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: st(\"brHits\", { count: 2 })\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\n        }, {\n          node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" })\n        }, {\n          node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\n        }, {\n          text: tr(\"skill.skillParams.4\"),\n          value: datamine.skill.duration,\n          unit: 's'\n        }, {\n          text: tr(\"skill.skillParams.5\"),\n          value: datamine.skill.cd,\n          unit: 's'\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        },\n        {\n          node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.skill.duration,\n          unit: 's'\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.skill.cd,\n          unit: 's'\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cost,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        name: trm(\"a1C\"),\n        value: condA1,\n        path: condA1Path,\n        states: {\n          on: {\n            fields: [{\n              node: nodeA1HealingBonus\n            }, {\n              text: sgt(\"duration\"),\n              value: 8,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        name: trm(\"c2C\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC2NormalDmgInc\n            }, {\n              node: nodeC2ChargedDmgInc\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Raiden_Shogun_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\nimport { CharacterKey } from '../../../Types/consts'\nimport { objectKeyMap } from '../../../Util/Util'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"RaidenShogun\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4.1\n      skillParam_gen.auto[a++], // 4.2\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    skillDmg: skillParam_gen.skill[s++],\n    coorDmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    burstDmg_bonus: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    resolveBonus1: skillParam_gen.burst[b++],\n    resolveBonus2: skillParam_gen.burst[b++],\n    resolveGained: skillParam_gen.burst[b++],\n    hit1: skillParam_gen.burst[b++],\n    hit2: skillParam_gen.burst[b++],\n    hit3: skillParam_gen.burst[b++],\n    hit41: skillParam_gen.burst[b++],\n    hit42: skillParam_gen.burst[b++],\n    hit5: skillParam_gen.burst[b++],\n    charged1: skillParam_gen.burst[b++],\n    charged2: skillParam_gen.burst[b++],\n    stam: skillParam_gen.burst[b++][0],\n    plunge: skillParam_gen.burst[b++],\n    plungeLow: skillParam_gen.burst[b++],\n    plungeHigh: skillParam_gen.burst[b++],\n    enerGen: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    er: skillParam_gen.passive2[p2++][0],\n    energyGen: skillParam_gen.passive2[p2++][0],\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    def_ignore: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    atk_bonus: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n} as const\n\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\n  prod(constant(datamine.burst.enerCost, { key: \"sheet:energy\" }), subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\n\nfunction skillDmg(atkType: number[]) {\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\n  return dmgNode('atk', atkType, 'skill', {\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\n  })\n}\n\nconst energyCosts = [40, 50, 60, 70, 80, 90]\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i, { key: \"sheet:energy\" })), 0),\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\n\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\n\nconst resolveStackNode = lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0, { key: `char_${key}:burst.resolves` })\nconst resolveInitialBonus_ = prod(\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus1, { key: `char_${key}:burst.resolveInitial_` }),\n  resolveStackNode\n)\nconst resolveInfusedBonus_ = prod(\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus2, { key: `char_${key}:burst.resolveInfused_` }),\n  resolveStackNode\n)\nfunction burstResolve(mvArr: number[], initial = false) {\n  const resolveBonus = initial ? resolveInitialBonus_ : resolveInfusedBonus_\n\n  return customDmgNode(\n    prod(\n      sum(\n        subscript(input.total.burstIndex, mvArr, { key: '_' }),\n        resolveBonus\n      ),\n      input.total.atk\n    ),\n    'burst',\n    {\n      hit: {\n        ele: constant('electro')\n      }, enemy: {\n        // if Raiden is above or equal to C2, then account for DEF Ignore else not\n        defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\n      }\n    }\n  )\n}\n\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\n\nconst [condC4Path, condC4] = cond(key, \"c4\")\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\n)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: skillDmg(datamine.skill.skillDmg),\n    coorDmg: skillDmg(datamine.skill.coorDmg),\n    skillEye_\n  },\n  burst: {\n    dmg: burstResolve(datamine.burst.dmg, true),\n    hit1: burstResolve(datamine.burst.hit1),\n    hit2: burstResolve(datamine.burst.hit2),\n    hit3: burstResolve(datamine.burst.hit3),\n    hit41: burstResolve(datamine.burst.hit41),\n    hit42: burstResolve(datamine.burst.hit42),\n    hit5: burstResolve(datamine.burst.hit5),\n    charged1: burstResolve(datamine.burst.charged1),\n    charged2: burstResolve(datamine.burst.charged2),\n    plunge: burstResolve(datamine.burst.plunge),\n    plungeLow: burstResolve(datamine.burst.plungeLow),\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\n  },\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    burst_dmg_: skillEye_,\n    electro_dmg_: passive2ElecDmgBonus,\n  },\n  teamBuff: {\n    premod: {\n      atk_: c4AtkBonus_,\n      burst_dmg_: skillEyeTeamBurstDmgInc\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"electro\",\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: `${datamine.skill.duration}s`,\n        }, {\n          text: tr(\"skill.skillParams.4\"),\n          value: `${datamine.skill.cd}s`,\n        }],\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condSkillEye,\n        path: condSkillEyePath,\n        name: trm(\"skill.eye\"),\n        states: {\n          skillEye: {\n            fields: [{\n              node: skillEye_\n            }]\n          }\n        }\n      },\n      ), ct.conditionalTemplate(\"skill\", {\n        value: condSkillEyeTeam,\n        path: condSkillEyeTeamPath,\n        teamBuff: true,\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\n        name: trm(\"skill.partyCost\"),\n        states: Object.fromEntries(energyCosts.map(c => [c, {\n          name: `${c}`,\n          fields: [{\n            node: skillEyeTeamBurstDmgInc,\n          }]\n        }]))\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\n          textSuffix: \"(2)\"\n        }, {\n          node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"burst.skillParams.9\"),\n          value: `${datamine.burst.stam}`,\n        }, {\n          node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\n        }, {\n          text: tr(\"burst.skillParams.12\"),\n          value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\n        }, {\n          text: tr(\"burst.skillParams.13\"),\n          value: `${datamine.burst.duration}s`,\n        }, {\n          text: tr(\"burst.skillParams.14\"),\n          value: `${datamine.burst.cd}s`,\n        }, {\n          text: tr(\"burst.skillParams.15\"),\n          value: `${datamine.burst.enerCost}`,\n        }],\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condResolveStack,\n        path: condResolveStackPath,\n        name: trm(\"burst.resolves\"),\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\n          name: st(\"stack\", { count: c }),\n          fields: [{\n            node: infoMut(resolveInitialBonus_, { key: `char_${key}:burst.resolveInitial_` }),\n          }, {\n            node: infoMut(resolveInfusedBonus_, { key: `char_${key}:burst.resolveInfused_` })\n          }]\n        }]))\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          text: trm(\"a4.enerRest\"),\n          value: (data) => (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100),\n          unit: \"%\"\n        }, {\n          node: passive2ElecDmgBonus,\n        }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        teamBuff: true,\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\n        name: trm(\"c4.expires\"),\n        states: {\n          c4: {\n            fields: [{\n              node: c4AtkBonus_,\n            }, {\n              text: tr(\"skill.skillParams.2\"),\n              value: `${datamine.constellation4.duration}s`\n            }]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Razor_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { objectKeyMap, range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Razor\"\nconst elementKey: ElementKey = \"electro\"\nconst regionKey: Region = \"mondstadt\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++]\n    ]\n  },\n  charged: {\n    spinningDmg: skillParam_gen.auto[a++],\n    finalDmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n    duration: skillParam_gen.auto[a++][0]\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++]\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    hold: skillParam_gen.skill[s++],\n    erBonus: skillParam_gen.skill[s++][0],\n    enerRegen: skillParam_gen.skill[s++][0],\n    duration: skillParam_gen.skill[s++][0],\n    pressCd: skillParam_gen.skill[s++][0],\n    holdCd: skillParam_gen.skill[s++][0]\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    companionDmg: skillParam_gen.burst[b++],\n    atkSpdBonus: skillParam_gen.burst[b++],\n    electroResBonus: skillParam_gen.burst[b++][0],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    cdRed: 0.18\n  },\n  passive2: {\n    enerThreshold: 0.5,\n    erInc: 0.3\n  },\n  passive3: {\n    sprintStaminaDec: 0.2\n  },\n  constellation1: {\n    allDmgInc: 0.1,\n    duration: 8\n  },\n  constellation2: {\n    hpThreshold: 0.3,\n    critRateInc: 0.1\n  },\n  constellation4: {\n    defDec: 0.15,\n    duration: 7\n  },\n  constellation6: {\n    dmg: 1,\n    electroSigilGenerated: 1,\n    cd: 10\n  }\n} as const\n\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\nconst [condA4Path, condA4] = cond(key, \"A4\")\nconst [condC1Path, condC1] = cond(key, \"C1\")\nconst [condC2Path, condC2] = cond(key, \"C2\")\nconst [condC4Path, condC4] = cond(key, \"C4\")\n\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\n  naught, { key: \"enerRech_\" })\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\n    // Is there a way to disable the electro text color and default it to just normal color instead?\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\n  },\n  constellation6: {\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\n      { hit: { ele: constant(elementKey) } }))\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\n    electro_res_,\n    atkSPD_,\n    all_dmg_,\n    critRate_\n  },\n  teamBuff: {\n    premod: {\n      enemyDefRed_\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n          unit: '/s'\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.duration,\n          unit: 's'\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.5\"),\n          value: (data) => data.get(input.asc).value >= 1\n            ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed)\n            : datamine.skill.pressCd,\n          unit: 's'\n        }, {\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: tr(\"skill.skillParams.6\"),\n          value: (data) => data.get(input.asc).value >= 1\n            ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed)\n            : datamine.skill.holdCd,\n          unit: 's'\n        }]\n      }, ct.conditionalTemplate(\"skill\", { // Electro Sigil\n        value: condElectroSigil,\n        path: condElectroSigilPath,\n        name: trm(\"electroSigil\"),\n        states: {\n          ...objectKeyMap(range(1, 3), i => ({\n            name: st(\"stack\", { count: i }),\n            fields: [{\n              node: enerRechElectroSigil_\n            }, {\n              text: tr(\"skill.skillParams.4\"),\n              value: datamine.skill.duration,\n              unit: \"s\"\n            }, {\n              text: trm(\"electroSigilAbsorbed\"),\n              value: datamine.skill.enerRegen * i,\n            }]\n          })),\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\n          textSuffix: tr(\"auto.skillParams.0\")\n        }, {\n          node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\n          textSuffix: tr(\"auto.skillParams.1\")\n        }, {\n          node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\n          textSuffix: tr(\"auto.skillParams.2\")\n        }, {\n          node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\n          textSuffix: tr(\"auto.skillParams.3\")\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.duration,\n          unit: 's'\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.cd,\n          unit: 's'\n        }, {\n          text: tr(\"burst.skillParams.6\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", { // The Wolf Within\n        value: condTheWolfWithin,\n        path: condTheWolfWithinPath,\n        name: tr(\"burst.description.3\"),\n        states: {\n          \"on\": {\n            fields: [{\n              node: electro_res_\n            }, {\n              node: atkSPD_\n            }, {\n              text: st(\"incInterRes\")\n            }]\n          }\n        }\n      }), {\n        text: trm(\"fullBurstDMG.description\"),\n      }, ct.headerTemplate(\"burst\", {\n        fields: [{\n          node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\n        }, {\n          node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\n        }, {\n          node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\n        }, {\n          node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\n        }]\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        value: condA4,\n        path: condA4Path,\n        name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\n        states: {\n          \"on\": {\n            fields: [{\n              node: enerRechA4_\n            }]\n          }\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        value: condC1,\n        path: condC1Path,\n        name: trm(\"pickUpElementalOrbParticle\"),\n        states: {\n          \"on\": {\n            fields: [{\n              node: all_dmg_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation1.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\n        states: {\n          \"on\": {\n            fields: [{\n              node: critRate_\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        teamBuff: true,\n        name: trm(\"opHitWithClawAndThunder\"),\n        states: {\n          \"on\": {\n            fields: [{\n              node: enemyDefRed_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation4.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\n        }, {\n          text: trm(\"electroSigilPerProc\"),\n          value: datamine.constellation6.electroSigilGenerated\n        }, {\n          text: st(\"cooldown\"),\n          value: datamine.constellation6.cd,\n          unit: \"s\"\n        }]\n      })]),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Rosaria_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { equal, greaterEq, infoMut, min, percent, prod, unequal } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst key: CharacterKey = \"Rosaria\"\nconst elementKey: ElementKey = \"cryo\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3x2\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5.1\n      skillParam_gen.auto[a++], // 5.2\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    hit1: skillParam_gen.skill[s++],\n    hit2: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0]\n  },\n  burst: {\n    hit1: skillParam_gen.burst[b++],\n    hit2: skillParam_gen.burst[b++],\n    dotDmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    cost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    crInc: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0]\n  },\n  passive2: {\n    crBonus: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n    maxBonus: skillParam_gen.passive2[p2++][0]\n  },\n  constellation1: {\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\n    dmgInc: skillParam_gen.constellation1[c1i++],\n    duration: skillParam_gen.constellation1[c1i++],\n  },\n  constellation6: {\n    physShred: skillParam_gen.constellation6[c6i++],\n    duration: skillParam_gen.constellation6[c6i++],\n  },\n} as const\n\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\n\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\nconst nodeA4CritBonusDisp = equal(condA4, \"on\",\n  greaterEq(input.asc, 4, min(\n    prod(percent(datamine.passive2.crBonus), input.premod.critRate_),\n    percent(datamine.passive2.maxBonus)\n  ))\n)\nconst nodeA4CritBonus = unequal(target.charKey, key, nodeA4CritBonusDisp)\n\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\n  skill: {\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\n  },\n  burst: {\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\n  },\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  premod: {\n    critRate_: nodeA1CritInc,\n    atkSPD_: nodeC1AtkSpd,\n    normal_dmg_: nodeC1NormalInc,\n  },\n  teamBuff: {\n    premod: {\n      physical_enemyRes_: nodeC6PhysShred\n    },\n    total: {\n      critRate_: nodeA4CritBonus\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.cd,\n          unit: 's'\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\n          textSuffix: \"(2)\"\n        }, {\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cost,\n        }]\n      }, ct.conditionalTemplate(\"constellation6\", {\n        value: condC6,\n        path: condC6Path,\n        name: st(\"hitOp.skill\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: nodeC6PhysShred\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation6.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        name: trm(\"a1\"),\n        value: condA1,\n        path: condA1Path,\n        states: {\n          on: {\n            fields: [{\n              node: nodeA1CritInc\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        name: st(\"afterUse.burst\"),\n        value: condA4,\n        path: condA4Path,\n        teamBuff: true,\n        // Hide for Rosaria\n        canShow: unequal(input.activeCharKey, key, 1),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(nodeA4CritBonusDisp, { key: \"critRate_\", isTeamBuff: true }),\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        value: condC1,\n        path: condC1Path,\n        name: st(\"hitOp.crit\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC1NormalInc\n            }, {\n              node: nodeC1AtkSpd,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation1.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Sangonomiya_Kokomi_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"SangonomiyaKokomi\"\nconst elementKey: ElementKey = \"hydro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, c6i = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    heal_: skillParam_gen.skill[s++],\n    heal: skillParam_gen.skill[s++],\n    dmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    heal_: skillParam_gen.burst[b++],\n    heal: skillParam_gen.burst[b++],\n    nBonus_: skillParam_gen.burst[b++],\n    cBonus_: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    sBonus_: skillParam_gen.burst[b++],\n  },\n  p: {\n    heal_: 0.25,\n    critRate_: -1\n  },\n  p2: {\n    heal_ratio_: skillParam_gen.passive2[0][0],\n  },\n  c1: {\n    hp_: skillParam_gen.constellation1[0],\n  },\n  c2: {\n    s_heal_: skillParam_gen.constellation2[1],\n    nc_heal_: skillParam_gen.constellation2[2],\n  },\n  c4: {\n    atkSPD_: skillParam_gen.constellation4[0],\n    energy: skillParam_gen.constellation4[1]\n  },\n  c6: {\n    hp_: skillParam_gen.constellation6[c6i++],\n    hydro_: skillParam_gen.constellation6[c6i++],\n    duration: skillParam_gen.constellation6[c6i++]\n  },\n} as const\n\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\nconst [condC2Path, condC2] = cond(key, \"c2\")\nconst [condC6Path, condC6] = cond(key, \"c6\")\n\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\n  sum(\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\n  ),\n  input.premod.hp))\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\n  sum(\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\n  ),\n  input.premod.hp))\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\n  subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\n  input.premod.hp))\n\nconst passiveHeal_ = constant(datamine.p.heal_)\nconst passiveCritRate_ = constant(datamine.p.critRate_)\nconst c2SkillHeal = greaterEq(input.constellation, 2,\n  equal(condC2, \"on\",\n    prod(percent(datamine.c2.s_heal_), input.total.hp)\n  )\n)\nconst c2BurstHeal = greaterEq(input.constellation, 2,\n  equal(condC2, \"on\",\n    prod(percent(datamine.c2.nc_heal_), input.total.hp)\n  )\n)\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, datamine.c4.atkSPD_)\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.c6.hydro_))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n    heal: healNodeTalent(\"hp\", datamine.skill.heal_, datamine.skill.heal, \"skill\",\n      { premod: { healInc: c2SkillHeal } }\n    )\n  },\n  burst: {\n    dmg: dmgNode(\"hp\", datamine.burst.dmg, \"burst\"),\n    heal: healNodeTalent(\"hp\", datamine.burst.heal_, datamine.burst.heal, \"burst\",\n      { premod: { healInc: c2BurstHeal } }\n    )\n  },\n  constellation1: {\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\n      hit: { ele: constant(elementKey) }\n    }))\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    heal_: passiveHeal_,\n    critRate_: passiveCritRate_,\n    atkSPD_: c4AtkSpd_,\n    hydro_dmg_: c6Hydro_,\n    // TODO: below should be for `total`\n    normal_dmgInc: burstNormalDmgInc,\n    charged_dmgInc: burstChargedDmgInc,\n    skill_dmgInc: burstSkillDmgInc,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\n        }, {\n          text: tr(\"auto.skillParams.4\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.6\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.7\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condBurst,\n        path: condBurstPath,\n        name: trm(\"burst\"),\n        states: {\n          on: {\n            fields: [{\n              node: burstNormalDmgInc,\n            }, {\n              node: burstChargedDmgInc,\n            }, {\n              node: burstSkillDmgInc,\n            }, {\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\n            }, {\n              text: tr(\"burst.skillParams.5\"),\n              value: datamine.burst.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n\n      passive: ct.talentTemplate(\"passive\", [{\n        fields: [{\n          node: passiveHeal_\n        }, {\n          node: passiveCritRate_\n        }]\n      }]),\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\n        }]\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        path: condC2Path,\n        value: condC2,\n        name: trm(\"c2\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(c2SkillHeal, { key: `char_${key}:c2SkillHeal` }),\n            }, {\n              node: infoMut(c2BurstHeal, { key: `char_${key}:c2BurstHeal` }),\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [{ fields: [{ node: c4AtkSpd_ }] }]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\n        path: condC6Path,\n        value: condC6,\n        name: trm(\"c6\"),\n        states: {\n          on: { fields: [{ node: c6Hydro_ }] }\n        }\n      })]),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Sayu_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, lookup, min, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Sayu\"\nconst elementKey: ElementKey = \"anemo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[0], // 1\n      skillParam_gen.auto[1], // 2\n      skillParam_gen.auto[2], // 3x2\n      skillParam_gen.auto[4], // 4\n    ]\n  },\n  charged: {\n    spin: skillParam_gen.auto[5],\n    final: skillParam_gen.auto[6],\n    stamina: skillParam_gen.auto[7][0],\n    duration: skillParam_gen.auto[8][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[9],\n    low: skillParam_gen.auto[10],\n    high: skillParam_gen.auto[11],\n  },\n  skill: {\n    wheelDmg: skillParam_gen.skill[s++],\n    eleWheelDmg: skillParam_gen.skill[s++],\n    kickPressDmg: skillParam_gen.skill[s++],\n    kickHoldDmg: skillParam_gen.skill[s++],\n    eleKickDmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cdMin: skillParam_gen.skill[s++][0],\n    cdMax: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    pressDmg: skillParam_gen.burst[b++],\n    pressBaseHeal: skillParam_gen.burst[b++],\n    pressAtkHeal: skillParam_gen.burst[b++],\n    darumaDmg: skillParam_gen.burst[b++],\n    darumaBaseHeal: skillParam_gen.burst[b++],\n    darumaAtkHeal: skillParam_gen.burst[b++],\n    darumaHits: 7,\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    baseHeal: skillParam_gen.passive1[0][0],\n    emHeal: skillParam_gen.passive1[1][0],\n    cd: skillParam_gen.passive1[2][0]\n  },\n  passive2: {\n    nearHeal: skillParam_gen.passive2[0][0]\n  },\n  constellation2: {\n    dmgInc: skillParam_gen.constellation2[0],\n    maxStacks: skillParam_gen.constellation2[1],\n  },\n  constellation4: {\n    ener: skillParam_gen.constellation4[0],\n    cd: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    darumaDmgInc: skillParam_gen.constellation6[0],\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\n    darumaHealInc: skillParam_gen.constellation6[2]\n  }\n} as const\n\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\n\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\n\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\n  lookup(condC2SkillStack,\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\n      stack,\n      prod(stack, percent(datamine.constellation2.dmgInc))\n    ])),\n    naught\n  )\n)\n\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\n  prod(\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\n    datamine.constellation6.darumaDmgInc,\n    input.total.atk\n  )\n)\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\n)\n// Using customHealNode so I can have healInc\nconst darumaHeal = customHealNode(sum(\n  prod(\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\n    input.total.atk,\n  ),\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\n  c6_daruma_heal_inc,\n))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\n      eleKey,\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\n    ])), naught),\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\n      eleKey,\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\n    ])), naught)\n  },\n  burst: {\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\n    darumaHeal\n  },\n  passive1: {\n    heal: greaterEq(input.asc, 1, equal(condActiveSwirl, \"activeSwirl\",\n      customHealNode(\n        sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas))\n      )\n    ))\n  },\n  passive2: {\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\n  }\n}\n\nconst burstC3 = greaterEq(input.constellation, 3, 3)\nconst skillC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC5,\n    burst: burstC3\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: `${datamine.charged.stamina}/s`,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\n        }, {\n          node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\n        }, {\n          text: tr(\"skill.skillParams.5\"),\n          value: datamine.skill.duration,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\n          unit: \"s\",\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condSkillAbsorption,\n        path: condSkillAbsorptionPath,\n        name: st(\"eleAbsor\"),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: [{\n            node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\n          }, {\n            node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\n          }]\n        }]))\n      }), ct.headerTemplate(\"constellation2\", {\n        fields: [{\n          node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\n        }]\n      }), ct.conditionalTemplate(\"constellation2\", {\n        value: condC2SkillStack,\n        path: condC2SkillStackPath,\n        name: trm(\"c2Cond\"),\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\n          name: st(\"seconds\", { count: stack * 0.5 }),\n          fields: [{\n            node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\n          }]\n        }]))\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\n        }, {\n          node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\n        }, {\n          node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\n        }, {\n          text: trm(\"burstHits\"),\n          value: datamine.burst.darumaHits,\n        }]\n      }, ct.headerTemplate(\"passive2\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"success\" })\n        }, {\n          text: trm(\"p2Aoe\")\n        }]\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: trm(\"c1Text\")\n        }]\n      }), ct.headerTemplate(\"constellation6\", {\n        fields: [{\n          node: infoMut(c6_daruma_dmg_inc, { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\n        }, {\n          node: infoMut(c6_daruma_heal_inc, { key: `char_${key}:c6DarumaHealInc`, variant: \"success\" })\n        }]\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        value: condActiveSwirl,\n        path: condActiveSwirlPath,\n        name: trm(\"p1Swirl\"),\n        states: {\n          activeSwirl: {\n            fields: [{\n              node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing`, variant: \"success\" })\n            }, {\n              text: sgt(\"cd\"),\n              value: datamine.passive1.cd,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\n        fields: [{\n          text: trm(\"c4Ener\"),\n          value: datamine.constellation4.ener,\n          fixed: 1\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.constellation4.cd,\n          unit: \"s\"\n        }]\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\")\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Shenhe_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { objectKeyMap, range } from '../../../Util/Util'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Shenhe\"\nconst elementKey: ElementKey = \"cryo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[0], // 1\n      skillParam_gen.auto[1], // 2\n      skillParam_gen.auto[2], // 3\n      skillParam_gen.auto[3], // 4x2\n      skillParam_gen.auto[5], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[6],\n    stamina: skillParam_gen.auto[7][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[8],\n    low: skillParam_gen.auto[9],\n    high: skillParam_gen.auto[10],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    hold: skillParam_gen.skill[s++],\n    dmgAtk_: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    durationHold: skillParam_gen.skill[s++][0],\n    trigger: skillParam_gen.skill[s++][0],\n    triggerHold: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n    cdHold: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    res_: skillParam_gen.burst[b++],\n    dot: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    press_dmg_: skillParam_gen.passive2[p2++][0],\n    durationPress: skillParam_gen.passive2[p2++][0],\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\n    durationHold: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    durationInc: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    dmg_: skillParam_gen.constellation4[0],\n    maxStacks: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    auto_: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\nconst nodeSkill = equal(\"quill\", condQuill,\n  prod(input.total.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\n\n\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\nconst enemyRes_ = equal(\"burst\", condBurst,\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\n\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\n\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\n  equal(condAsc1, \"field\",\n    datamine.passive1.cryo_dmg_\n  )\n)\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\n\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\nconst nodeAsc4 = greaterEq(input.asc, 1,\n  equal(condAsc4, \"press\",\n    datamine.passive2.press_dmg_\n  )\n)\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\n  equal(condAsc4, \"hold\",\n    datamine.passive2.hold_dmg_\n  )\n)\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\n\nconst nodeC2Disp = greaterEq(input.constellation, 2,\n  equal(condAsc1, \"field\",\n    datamine.passive1.cryo_dmg_\n  )\n)\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\n\nconst [condC4Path, condC4] = cond(key, \"c4\")\nconst c4Inc = greaterEq(input.constellation, 4,\n  lookup(condC4,\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\n    0),\n  { key: \"char_Shenhe:c4Bonus_\" })\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\n    quillDmg: nodeSkill\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\n  },\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5\n  },\n  teamBuff: {\n    premod: {\n      cryo_dmgInc: nodeSkill,\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\n      cryo_dmg_: nodeAsc1,\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\n      cryo_critDMG_: nodeC2\n    },\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: trm(\"pressDuration\"),\n          value: datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: trm(\"pressQuota\"),\n          value: datamine.skill.trigger,\n        }, {\n          text: st(\"pressCD\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }, {\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          text: trm(\"holdDuration\"),\n          value: datamine.skill.durationHold,\n          unit: \"s\"\n        }, {\n          text: trm(\"holdQuota\"),\n          value: datamine.skill.triggerHold,\n        }, {\n          text: st(\"holdCD\"),\n          value: datamine.skill.cdHold,\n          unit: \"s\"\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 1,\n          text: st(\"charges\"),\n          value: 2\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        teamBuff: true,\n        value: condQuill,\n        path: condQuillPath,\n        name: trm(\"quill\"),\n        states: {\n          quill: {\n            fields: [{\n              node: nodeSkill\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"passive2\", {\n        value: condAsc4,\n        path: condAsc4Path,\n        teamBuff: true,\n        name: st(\"afterUse.skill\"),\n        states: {\n          press: {\n            name: st(\"press\"),\n            fields: [{\n              node: nodeAsc4Press_skill_dmg_\n            }, {\n              node: nodeAsc4Press_burst_dmg_\n            }]\n          },\n          hold: {\n            name: st(\"hold\"),\n            fields: [{\n              node: nodeAsc4Hold_normal_dmg_\n            }, {\n              node: nodeAsc4Hold_charged_dmg_\n            }, {\n              node: nodeAsc4Hold_plunging_dmg_\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: st(\"addlCharges\"),\n          value: 1\n        }]\n      }), ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        name: trm(\"c4\"),\n        states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\n          name: i.toString(),\n          fields: [{ node: c4Inc }]\n        }))\n      }), ct.headerTemplate(\"constellation6\", {\n        fields: [{\n          text: tr(\"constellation6.description\")\n        }],\n        teamBuff: true\n      }),\n      ]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n      }, {\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\n      }, {\n        text: tr(\"burst.skillParams.3\"),\n        value: (data) => data.get(input.constellation).value >= 2\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\n          : datamine.burst.duration,\n        unit: \"s\"\n      }, {\n        text: tr(\"burst.skillParams.4\"),\n        value: datamine.burst.cd,\n        unit: \"s\"\n      }, {\n        text: tr(\"burst.skillParams.5\"),\n        value: datamine.burst.enerCost,\n      }]\n    }, ct.conditionalTemplate(\"burst\", {\n        teamBuff: true,\n        value: condBurst,\n        path: condBurstPath,\n        name: st(\"opponentsField\"),\n        states: {\n          burst: {\n            fields: [{\n              node: nodeBurstCryo_enemyRes_\n            }, {\n              node: nodeBurstPhysical_enemyRes_\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"passive1\", {\n          value: condAsc1,\n          path: condAsc1Path,\n          teamBuff: true,\n          name: st(\"activeCharField\"),\n          states: {\n            field: {\n              fields: [{\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\n              }]\n            }\n          }\n        }), ct.headerTemplate(\"constellation2\", {\n          fields: [{\n          text: st(\"durationInc\"),\n          value: datamine.constellation2.durationInc,\n          unit: \"s\"\n        }, {\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\n        }],\n        teamBuff: true,\n       }),\n      ]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './banner.png'\nimport burst from './burst.png'\nimport card from './characterCard.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './icon.png'\nimport thumbSide from './iconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from \"../../../Formula/index\"\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\nconst key: CharacterKey = \"ShikanoinHeizou\"\nconst elementKey: ElementKey = \"anemo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4.1\n      skillParam_gen.auto[a++], // 4.2\n      skillParam_gen.auto[a++], // 4.3\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    declension_dmg_: skillParam_gen.skill[s++],\n    conviction_dmg_: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n    declension_duration: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    slugger_dmg: skillParam_gen.burst[b++],\n    iris_dmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    duration: skillParam_gen.passive2[p2++][0],\n    eleMas: skillParam_gen.passive2[p2++][0],\n  },\n  passive3: {\n    staminaSprintDec_: 0.25,\n  },\n  constellation1: {\n    duration: skillParam_gen.constellation1[0],\n    atkSpd_: skillParam_gen.constellation1[1],\n    cd: skillParam_gen.constellation1[2],\n  },\n  constellation4: {\n    baseEnergy: skillParam_gen.constellation4[0],\n    addlEnergy: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    hsCritRate_: skillParam_gen.constellation6[0],\n    hsCritDmg_: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst stacksArr = range(1, 4)\nconst [condDeclensionStacksPath, condDeclensionStacks] = cond(key, \"declensionStacks\")\nconst declension_dmg_ = lookup(\n  condDeclensionStacks,\n  Object.fromEntries(stacksArr.map(stacks => [\n    stacks,\n    prod(\n      subscript(input.total.skillIndex, datamine.skill.declension_dmg_, { key: \"sheet:bonusScaling.skill_\" }),\n      constant(stacks, { key: `char_${key}:declensionStacks` })\n    )\n  ])), naught, { key: \"sheet:bonusScaling.skill_\" })\nconst conviction_dmg_ = equal(condDeclensionStacks, \"4\",\n  subscript(input.total.skillIndex, datamine.skill.conviction_dmg_, { key: \"_\" }),\n  { key: \"sheet:bonusScaling.skill_\" }\n)\nconst totalStacks_dmg_ = sum(declension_dmg_, conviction_dmg_)\n\nconst [condSkillHitPath, condSkillHit] = cond(key, \"skillHit\")\nconst a4_eleMas = greaterEq(input.asc, 4,\n  unequal(target.charKey, key, // Not applying to Heizou\n    equal(condSkillHit, \"on\", datamine.passive2.eleMas)\n  )\n)\n\n// TODO: After non-stacking buffs\n// const staminaSprintDec_ = percent(datamine.passive3.staminaSprintDec_)\n\nconst [condTakeFieldPath, condTakeField] = cond(key, \"takeField\")\nconst c1_atkSpd_ = greaterEq(input.constellation, 1, equal(condTakeField, \"on\", percent(datamine.constellation1.atkSpd_)))\n\nconst c6_skill_critRate_ = greaterEq(input.constellation, 6, lookup(\n  condDeclensionStacks,\n  Object.fromEntries(stacksArr.map(stacks => [\n    stacks,\n    prod(\n      percent(datamine.constellation6.hsCritRate_),\n      constant(stacks, { key: `char_${key}:declensionStacks` })\n    )\n  ])),\n  naught\n))\nconst c6_skill_critDMG_ = greaterEq(input.constellation, 6,\n  equal(condDeclensionStacks, \"4\", percent(datamine.constellation6.hsCritDmg_))\n)\n\nexport const dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: customDmgNode(\n      prod(\n        sum(\n          subscript(input.total.skillIndex, datamine.skill.dmg, { key: \"_\" }),\n          totalStacks_dmg_\n        ),\n        input.total.atk\n      ),\n      \"skill\",\n      { hit: { ele: constant(\"anemo\") } }\n    )\n  },\n  burst: {\n    slugger_dmg: dmgNode(\"atk\", datamine.burst.slugger_dmg, \"burst\"),\n    ...Object.fromEntries(absorbableEle.map(ele => [\n      `${ele}_iris_dmg`,\n      dmgNode(\"atk\", datamine.burst.iris_dmg, \"burst\", { hit: { ele: constant(ele) } })\n    ]))\n  },\n}\n\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC3,\n    burst: burstC5,\n  },\n  premod: {\n    atkSPD_: c1_atkSpd_,\n    skill_critRate_: c6_skill_critRate_,\n    skill_critDMG_: c6_skill_critDMG_,\n  },\n  teamBuff: {\n    premod: {\n      // TODO: after non-stacking buffs\n      // staminaSprintDec_\n      eleMas: a4_eleMas,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(\n            dmgFormulas.normal[i],\n            { key: `char_${key}_gen:auto.skillParams.${i > 2 ? (i < 6 ? 3 : 4) : i}` }\n          ),\n          textSuffix: (i > 2 && i < 6) ? `(${i - 2})` : undefined,\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        path: condDeclensionStacksPath,\n        value: condDeclensionStacks,\n        name: trm(\"declensionStacks\"),\n        states: Object.fromEntries(stacksArr.map(stacks => [\n          stacks,\n          {\n            name: st(\"stack\", { count: stacks }),\n            fields: [{\n              node: infoMut(totalStacks_dmg_, { key: \"sheet:bonusScaling.skill_\" })\n            }, {\n              canShow: (data) => data.get(condDeclensionStacks).value === \"4\",\n              text: st(\"aoeInc\"),\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.skill.declension_duration,\n              unit: \"s\"\n            }]\n          }\n        ]))\n      }), ct.conditionalTemplate(\"passive2\", {\n        path: condSkillHitPath,\n        value: condSkillHit,\n        name: st(\"hitOp.skill\"),\n        teamBuff: true,\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\n        states: {\n          on: {\n            fields: [{\n              node: a4_eleMas\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation6\", {\n        fields: [{\n          node: c6_skill_critRate_\n        }, {\n          node: c6_skill_critDMG_\n        }]\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.slugger_dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, ...absorbableEle.map(ele => ({\n          node: infoMut(dmgFormulas.burst[`${ele}_iris_dmg`], { key: `char_${key}_gen:burst.skillParams.1` }),\n        })), {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"/* TODO: after non-stacking buffs, [{ fields: [{ node: staminaSprintDec_ }] }]*/),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        path: condTakeFieldPath,\n        value: condTakeField,\n        name: trm(\"takingField\"),\n        states: {\n          on: {\n            fields: [{\n              node: c1_atkSpd_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation1.duration,\n              unit: \"s\"\n            }, {\n              text: sgt(\"cd\"),\n              value: datamine.constellation1.cd,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Sucrose_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input, target } from \"../../../Formula/index\"\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { objectKeyMap } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\nconst key: CharacterKey = \"Sucrose\"\nconst elementKey: ElementKey = \"anemo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dot: skillParam_gen.burst[b++],\n    dmg_: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    eleMas: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    eleMas_: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    durationInc: skillParam_gen.constellation2[0],\n  },\n  constellation6: {\n    ele_dmg_: skillParam_gen.constellation6[0],\n  }\n} as const\n\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\n// A1 Swirl Reaction Element\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\n// Set to \"hit\" if skill hit opponents\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\n\n// Conditional Output\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\n  equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\n  greaterEq(input.asc, 4,\n    prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\nconst asc4 = unequal(target.charKey, key, asc4Disp)\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\n\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\n  equal(condAbsorption, key.slice(0, -5), c6Base))\n\nexport const dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\n  },\n  burst: {\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\n    ...Object.fromEntries(absorbableEle.map(key =>\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\n  },\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  teamBuff: {\n    total: { eleMas: asc4 },\n    premod: { ...c6Bonus, eleMas: asc1 },\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          text: tr(\"auto.skillParams.5\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 1,\n          text: st(\"charges\"),\n          value: 2\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: data => data.get(input.constellation).value >= 2\n            ? `${datamine.burst.duration}s + 2`\n            : datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", { // Absorption\n        value: condAbsorption,\n        path: condAbsorptionPath,\n        name: st(\"eleAbsor\"),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: [{\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\n          }]\n        }]))\n      }), ct.conditionalTemplate(\"constellation6\", { // Absorption teambuff for C6\n        teamBuff: true,\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\n        value: condAbsorption,\n        path: condAbsorptionPath,\n        name: st(\"eleAbsor\"),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: Object.values(c6Bonus).map(n => ({ node: n }))\n        }]))\n      }), ct.headerTemplate(\"constellation6\", {\n        canShow: unequal(condAbsorption, undefined, 1),\n        fields: Object.values(c6Bonus).map(n => ({ node: n }))\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        // Swirl Element\n        teamBuff: true,\n        value: condSwirlReaction,\n        path: condSwirlReactionPath,\n        name: st(\"eleSwirled\"),\n        // Hide for Sucrose\n        canShow: unequal(input.activeCharKey, key, 1),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: [{\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\n          }, {\n            text: sgt(\"duration\"),\n            value: datamine.passive1.duration,\n            unit: \"s\",\n          }],\n        }]))\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        // Swirl element\n        teamBuff: true,\n        value: condSkillHitOpponent,\n        path: condSkillHitOpponentPath,\n        name: trm(\"asc4\"),\n        canShow: unequal(input.activeCharKey, key, 1),\n        states: {\n          hit: {\n            fields: [{\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\"\n            }],\n          }\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Tartaglia_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\nimport { st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Tartaglia\"\nconst elementKey: ElementKey = \"hydro\"\nconst region: Region = \"snezhnaya\"\nconst [tr] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    aimedCharged: skillParam_gen.auto[a++],\n  },\n  riptide: {\n    flashDmg: skillParam_gen.auto[a++],\n    burstDmg: skillParam_gen.auto[a++],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  riptideDuration: skillParam_gen.auto[a++][0],\n  skill: {\n    stanceDmg: skillParam_gen.skill[s++],\n    normal1: skillParam_gen.skill[s++],\n    normal2: skillParam_gen.skill[s++],\n    normal3: skillParam_gen.skill[s++],\n    normal4: skillParam_gen.skill[s++],\n    normal5: skillParam_gen.skill[s++],\n    normal61: skillParam_gen.skill[s++], // 6.1\n    normal62: skillParam_gen.skill[s++], // 6.2\n    charged1: skillParam_gen.skill[s++],\n    charged2: skillParam_gen.skill[s++],\n    riptideSlash: skillParam_gen.skill[s++],\n    chargedStamina: skillParam_gen.skill[s++][0],\n    duration: skillParam_gen.skill[s++][0],\n    preemptiveCd1: skillParam_gen.skill[s++][0],\n    preemptiveCd2: skillParam_gen.skill[s++][0],\n    maxCd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    meleeDmg: skillParam_gen.burst[b++],\n    riptideBlastDmg: skillParam_gen.burst[b++],\n    rangedDmg: skillParam_gen.burst[b++],\n    enerReturned: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    durationExt: skillParam_gen.passive1[p1++][0],\n  },\n  passive: {\n    auto_boost: 1,\n  },\n  constellation1: {\n    cdRed: 0.2\n  }\n} as const\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\n  },\n  burst: {\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\n  }\n}\n\nconst nodePassive = constant(1)\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  teamBuff: {\n    bonus: {\n      auto: nodePassive,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\n        }]\n      }, {\n        text: tr(\"auto.fields.riptide\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\n          textSuffix: st(\"brHits\", { count: 3 })\n        }, {\n          node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\n        }, {\n          text: tr(\"auto.skillParams.10\"),\n          value: (data) => data.get(input.asc).value >= 1\n            ? datamine.passive1.durationExt + datamine.riptideDuration\n            : datamine.riptideDuration,\n          unit: \"s\"\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\n          textSuffix: \"(2)\"\n        }, {\n          node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\n          textSuffix: \"(2)\"\n        }, {\n          node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\n        }, {\n          text: tr(\"skill.skillParams.10\"),\n          value: datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.11\"),\n          value: (data) => data.get(input.constellation).value >= 1\n            ? `${datamine.skill.preemptiveCd1 - (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)}\n            - ${datamine.skill.preemptiveCd2 - (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}`\n            : `${datamine.skill.preemptiveCd1} - ${datamine.skill.preemptiveCd2}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.12\"),\n          value: (data) => data.get(input.constellation).value >= 1\n            ? `${datamine.skill.maxCd - (datamine.skill.maxCd * datamine.constellation1.cdRed)}`\n            : `${datamine.skill.maxCd}`,\n          unit: \"s\"\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: `${datamine.burst.cd}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: `${datamine.burst.enerCost}`,\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: `${datamine.burst.enerReturned}`,\n        }]\n      }]),\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\n        teamBuff: true,\n        fields: [{ node: nodePassive }]\n      })]),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Thoma_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Thoma\"\nconst elementKey: ElementKey = \"pyro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3x2\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    hpShield_: skillParam_gen.skill[s++],\n    baseShield: skillParam_gen.skill[s++],\n    shieldDuration: skillParam_gen.skill[s++][0],\n    maxHpShield_: skillParam_gen.skill[s++],\n    maxBaseShield: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0]\n  },\n  burst: {\n    pressDmg: skillParam_gen.burst[b++],\n    collapseDmg: skillParam_gen.burst[b++],\n    hpShield_: skillParam_gen.burst[b++],\n    baseShield: skillParam_gen.burst[b++],\n    shieldDuration: skillParam_gen.burst[b++][0],\n    unknown: skillParam_gen.burst[b++][0],\n    scorchingDuration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    shield_: skillParam_gen.passive1[0][0],\n    duration: skillParam_gen.passive1[1][0],\n    maxStacks: skillParam_gen.passive1[2][0],\n    cd: skillParam_gen.passive1[3][0]\n  },\n  passive2: {\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\n  },\n  c2: {\n    burstDuration: skillParam_gen.constellation2[0],\n  },\n  c4: {\n    energyRestore: skillParam_gen.constellation4[0],\n  },\n  c6: {\n    auto_dmg: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\n// This should technically only apply to the active character, but I am trying\n// to minimize the amount of jank active character fixes.\nconst p1_shield_ = greaterEq(input.asc, 1,\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\n    stacks,\n    constant(stacks * datamine.passive1.shield_)\n  ])), naught)\n)\n\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\n\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\n\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\n)\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\n  },\n  burst: {\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\n    ),\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\n  }\n}\n\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC3,\n    burst: burstC5,\n  },\n  teamBuff: {\n    premod: {\n      shield_: p1_shield_,\n      normal_dmg_: c6_normal_dmg_,\n      charged_dmg_: c6_charged_dmg_,\n      plunging_dmg_: c6_plunging_dmg_,\n    }\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          text: tr(\"auto.skillParams.5\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\n        }, {\n          node: infoMut(dmgFormulas.skill.minPyroShield,\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\n          ),\n        }, {\n          node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\n        }, {\n          node: infoMut(dmgFormulas.skill.maxPyroShield,\n            { key: `char_${key}:maxPyroShield`, variant: elementKey }\n          ),\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.skill.shieldDuration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\n        }, {\n          node: infoMut(dmgFormulas.burst.pyroShield,\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\n          ),\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.shieldDuration,\n          unit: \"s\",\n        }, {\n          node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: data => data.get(input.constellation).value >= 2\n            ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\n            : datamine.burst.scorchingDuration,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"passive1\", {\n        value: condP1BarrierStacks,\n        path: condP1BarrierStacksPath,\n        name: trm(\"a1\"),\n        teamBuff: true,\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\n          stacks,\n          {\n            name: st(\"stack\", { count: stacks }),\n            fields: [{\n              node: p1_shield_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\"\n            }, {\n              text: st(\"triggerCD\"),\n              value: datamine.passive1.cd,\n              unit: \"s\",\n              fixed: 1\n            }]\n          }\n        ]))\n      }), ct.headerTemplate(\"passive2\", {\n        fields: [{\n          node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\n        }]\n      }), ct.headerTemplate(\"constellation2\", {\n        fields: [{\n          text: trm(\"c2\"),\n          value: datamine.c2.burstDuration,\n          unit: \"s\"\n        }]\n      }), ct.conditionalTemplate(\"constellation4\", {\n        value: condC4AfterBurst,\n        path: condC4AfterBurstPath,\n        name: st(\"afterUse.burst\"),\n        states: {\n          on: {\n            fields: [{\n              text: st(\"energyRegen\"),\n              value: datamine.c4.energyRestore,\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation6\", {\n        value: condC6AfterBarrier,\n        path: condC6AfterBarrierPath,\n        name: trm(\"c6\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: c6_normal_dmg_,\n            }, {\n              node: c6_charged_dmg_,\n            }, {\n              node: c6_plunging_dmg_,\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../../CharacterSheet'\nimport burst from './burst.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\n}\n\nexport default talentAssets\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../../Components/ColoredText'\nimport { Translate } from '../../../../Components/Translate'\nimport { input, target } from '../../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../../Formula/utils'\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\nimport { objectKeyValueMap } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\nimport data_gen_src from '../data_gen.json'\nimport skillAssets from './assets'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Traveler\"\nconst elementKey: ElementKey = \"anemo\"\nconst ct = charTemplates(key, data_gen.weaponTypeKey, skillAssets, elementKey)\n\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    hit1: skillParam_gen.auto[a++],\n    hit2: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    initial_dmg: skillParam_gen.skill[s++],\n    initial_max: skillParam_gen.skill[s++],\n    storm_dmg: skillParam_gen.skill[s++],\n    storm_max: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n    maxCd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    absorbDmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    dmg: 0.6,\n  },\n  passive2: {\n    heal_: 0.02,\n  },\n  constellation2: {\n    enerRech_: 0.16,\n  },\n  constellation6: {\n    enemyRes_: -0.2\n  }\n} as const\n\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, `${elementKey}BurstAbsorption`)\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\nconst [condC6Path, condC6] = cond(key, `${elementKey}C6Hit`)\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.enemyRes_))\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, greaterEq(input.constellation, 6, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_)))])\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\n  },\n  passive1: {\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\n  },\n  passive2: {\n    heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\n  }\n} as const\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    enerRech_: nodeC2,\n  },\n  teamBuff: {\n    premod: {\n      ...nodesC6,\n      anemo_enemyRes_: nodeC6,\n    }\n  }\n})\n\nconst talentSheet: TalentSheet = {\n  sheets: {\n    auto: ct.talentTemplate(\"auto\", [{\n      text: tr(\"auto.fields.normal\")\n    }, {\n      fields: datamine.normal.hitArr.map((_, i) => ({\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\n      }))\n    }, {\n      text: tr(\"auto.fields.charged\"),\n    }, {\n      fields: [{\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\n        textSuffix: \"(1)\"\n      }, {\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\n        textSuffix: \"(2)\"\n      }, {\n        text: tr(\"auto.skillParams.6\"),\n        value: datamine.charged.stamina,\n      }]\n    }, {\n      text: tr(\"auto.fields.plunging\"),\n    }, {\n      fields: [{\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n      }, {\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n      }, {\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n      }]\n    }]),\n\n    skill: ct.talentTemplate(\"skill\", [{\n      fields: [{\n        node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\n      }, {\n        node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }),\n      }, {\n        node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.2` }),\n      }, {\n        node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.3` }),\n      }, {\n        text: tr(\"skill.skillParams.4\"),\n        value: datamine.skill.cd,\n        unit: \"s\"\n      }, {\n        text: tr(\"skill.skillParams.5\"),\n        value: datamine.skill.maxCd,\n        unit: \"s\"\n      }, {\n        canShow: data => data.get(input.constellation).value >= 4,\n        text: trm(\"c1\"),\n        value: 10,\n        unit: \"%\"\n      }]\n    }]),\n\n    burst: ct.talentTemplate(\"burst\", [{\n      fields: [{\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }),\n      }, {\n        text: tr(\"burst.skillParams.2\"),\n        value: datamine.burst.duration,\n        unit: \"s\"\n      }, {\n        text: tr(\"burst.skillParams.3\"),\n        value: datamine.burst.cd,\n        unit: \"s\"\n      }, {\n        text: tr(\"burst.skillParams.4\"),\n        value: datamine.burst.enerCost,\n      }]\n    }, ct.conditionalTemplate(\"burst\", {\n      value: condBurstAbsorption,\n      path: condBurstAbsorptionPath,\n      name: st(\"eleAbsor\"),\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n        fields: [{\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }),\n        }]\n      }]))\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 anemo\n      value: condC6,\n      path: condC6Path,\n      teamBuff: true,\n      name: trm(\"c6\"),\n      states: {\n        on: {\n          fields: [{\n            node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\n          }]\n        }\n      }\n    }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\n      canShow: unequal(condBurstAbsorption, undefined, equal(condC6, \"on\", equal(target.charKey, key, 1))),\n      fields: absorbableEle.map(eleKey => (\n        { node: nodesC6[`${eleKey}_enemyRes_`] }\n      ))\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\n      value: condBurstAbsorption,\n      path: condBurstAbsorptionPath,\n      name: st(\"eleAbsor\"),\n      teamBuff: true,\n      canShow: equal(condC6, \"on\", unequal(input.activeCharKey, key, 1)),\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n        fields: [{\n          node: nodesC6[`${eleKey}_enemyRes_`]\n        }]\n      }]))\n    })]),\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n      fields: [{\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:${elementKey}.p1` })\n      }]\n    })]),\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n      fields: [{\n        node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing`, variant: \"success\" })\n      }]\n    })]),\n    constellation1: ct.talentTemplate(\"constellation1\"),\n    constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n    constellation4: ct.talentTemplate(\"constellation4\"),\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n    constellation6: ct.talentTemplate(\"constellation6\"),\n  },\n}\nexport default talentSheet\n","import { TalentSheetElementKey } from '../../CharacterSheet'\nimport burst from './burst.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\n}\n\nexport default talentAssets\n","import { CharacterData } from 'pipeline'\nimport { Translate } from '../../../../Components/Translate'\nimport { input, target } from '../../../../Formula'\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\nimport { cond, sgt } from '../../../SheetUtil'\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\nimport data_gen_src from '../data_gen.json'\nimport talentAssets from './assets'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Traveler\"\nconst elementKey: ElementKey = \"electro\"\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\n\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    hit1: skillParam_gen.auto[a++],\n    hit2: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    energyRestore: skillParam_gen.skill[s++],\n    amulets: 2,\n    amuletDuration: skillParam_gen.skill[s++][0],\n    enerRech_: skillParam_gen.skill[s++][0],\n    enerRech_duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    pressDmg: skillParam_gen.burst[b++],\n    thunderDmg: skillParam_gen.burst[b++],\n    thunderCd: 0.5,\n    energyRestore: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    cdRed: skillParam_gen.passive1[0][0],\n  },\n  passive2: {\n    enerRech_: skillParam_gen.passive2[0][0],\n  },\n  constellation1: {\n    addlAmulets: 1\n  },\n  constellation2: {\n    duration: skillParam_gen.constellation2[0],\n    electro_enemyRes: skillParam_gen.constellation2[1],\n  },\n  constellation6: {\n    numAttacks: skillParam_gen.constellation6[0],\n    thunder_dmg_: skillParam_gen.constellation6[0],\n    energyRestore: skillParam_gen.constellation6[1]\n  }\n} as const\n\nconst [condSkillAmuletPath, condSkillAmulet] = cond(key, `${elementKey}SkillAmulet`)\nconst p2_enerRech_ = greaterEq(input.asc, 4,\n  prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\n)\nconst skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\n  sum(\n    percent(datamine.skill.enerRech_),\n    p2_enerRech_\n  )\n)\nconst skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\n\nconst burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\n  { key: `char_${key}_gen:${elementKey}.burst.skillParmas.2` }\n)\n\nconst [condC2ThunderPath, condC2Thunder] = cond(key, `${elementKey}C2Thunder`)\nconst c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\n  equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\n)\n\nconst [condC6After2ThunderPath, condC6After2Thunder] = cond(key, `${elementKey}C6After2Thunder`)\nconst c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\n    thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\n      { premod: { burst_dmg_: c6_thunder_dmg_ } })\n  }\n} as const\n\nconst burstC3 = greaterEq(input.constellation, 3, 3)\nconst skillC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC5,\n    burst: burstC3,\n  },\n  teamBuff: {\n    premod: {\n      electro_enemyRes_: c2Thunder_electro_enemyRes_,\n    },\n    total: {\n      enerRech_: skillAmulet_enerRech_ // In total to avoid loops\n    }\n  }\n})\n\nconst talentSheet: TalentSheet = {\n  sheets: {\n    auto: ct.talentTemplate(\"auto\", [{\n      text: tr(\"auto.fields.normal\")\n    }, {\n      fields: datamine.normal.hitArr.map((_, i) => ({\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\n      }))\n    }, {\n      text: tr(\"auto.fields.charged\"),\n    }, {\n      fields: [{\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\n        textSuffix: \"(1)\"\n      }, {\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\n        textSuffix: \"(2)\"\n      }, {\n        text: tr(\"auto.skillParams.6\"),\n        value: datamine.charged.stamina,\n      }]\n    }, {\n      text: tr(\"auto.fields.plunging\"),\n    }, {\n      fields: [{\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n      }, {\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n      }, {\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n      }]\n    }]),\n\n    skill: ct.talentTemplate(\"skill\", [{\n      fields: [{\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\n      }, {\n        text: trm(\"skill.amuletGenAmt\"),\n        value: data => data.get(input.constellation).value >= 1\n          ? datamine.skill.amulets + datamine.constellation1.addlAmulets\n          : datamine.skill.amulets\n      }, {\n        text: tr(\"skill.skillParams.4\"),\n        value: datamine.skill.amuletDuration,\n        unit: \"s\"\n      }, {\n        text: sgt(\"cd\"),\n        value: datamine.skill.cd,\n        unit: \"s\",\n        fixed: 1\n      }]\n    }, ct.conditionalTemplate(\"skill\", {\n      value: condSkillAmulet,\n      path: condSkillAmuletPath,\n      name: trm(\"skill.absorb\"),\n      teamBuff: true,\n      states: {\n        on: {\n          fields: [{\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\n              { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }\n            )\n          }, {\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\n          }, {\n            text: sgt(\"duration\"),\n            value: datamine.skill.enerRech_duration,\n            unit: \"s\"\n          }]\n        }\n      }\n    }), ct.headerTemplate(\"passive1\", {\n      fields: [{\n        text: tr(\"passive1.description\")\n      }]\n    }), ct.headerTemplate(\"passive2\", {\n      fields: [{\n        node: infoMut(p2_enerRech_, { key: `char_${key}:${elementKey}.passive2.enerRech_` })\n      }]\n    })]),\n\n    burst: ct.talentTemplate(\"burst\", [{\n      fields: [{\n        node: infoMut(dmgFormulas.burst.pressDmg,\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\n        )\n      }, {\n        node: infoMut(dmgFormulas.burst.thunderDmg,\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\n        )\n      }, {\n        text: trm(\"burst.thunderCd\"),\n        value: datamine.burst.thunderCd,\n        unit: \"s\",\n        fixed: 1\n      }, {\n        node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:${elementKey}.burst.skillParams.2` })\n      }, {\n        text: sgt(\"duration\"),\n        value: datamine.burst.duration,\n        unit: \"s\"\n      }, {\n        text: sgt(\"cd\"),\n        value: datamine.burst.cd,\n        unit: \"s\"\n      }, {\n        text: sgt(\"energyCost\"),\n        value: datamine.burst.enerCost,\n      }]\n    }, ct.conditionalTemplate(\"constellation2\", {\n      value: condC2Thunder,\n      path: condC2ThunderPath,\n      name: trm(\"c2.thunderHit\"),\n      teamBuff: true,\n      states: {\n        on: {\n          fields: [{\n            node: c2Thunder_electro_enemyRes_\n          }, {\n            text: sgt(\"duration\"),\n            value: datamine.constellation2.duration,\n            unit: \"s\"\n          }]\n        }\n      }\n    }), ct.conditionalTemplate(\"constellation6\", {\n      value: condC6After2Thunder,\n      path: condC6After2ThunderPath,\n      name: trm(\"c6.fallingThunder3\"),\n      states: {\n        on: {\n          fields: [{\n            node: infoMut(c6_thunder_dmg_,\n              { key: `char_${key}:${elementKey}.c6.fallingThunderBonus_`, variant: \"electro\" }\n            )\n          }, {\n            text: tr(\"burst.skillParams.2\"),\n            value: datamine.constellation6.energyRestore\n          }]\n        }\n      }\n    })]),\n\n    passive1: ct.talentTemplate(\"passive1\"),\n    passive2: ct.talentTemplate(\"passive2\"),\n    constellation1: ct.talentTemplate(\"constellation1\"),\n    constellation2: ct.talentTemplate(\"constellation2\"),\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\n    constellation4: ct.talentTemplate(\"constellation4\"),\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\n    constellation6: ct.talentTemplate(\"constellation6\"),\n  }\n}\nexport default talentSheet\n","import { TalentSheetElementKey } from '../../CharacterSheet'\nimport burst from './burst.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\n}\n\nexport default talentAssets\n","import { CharacterData } from 'pipeline'\nimport { Translate } from '../../../../Components/Translate'\nimport { input, target } from '../../../../Formula'\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\nimport data_gen_src from '../data_gen.json'\nimport talentAssets from './assets'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Traveler\"\nconst elementKey: ElementKey = \"geo\"\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\n\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    hit1: skillParam_gen.auto[a++],\n    hit2: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0]\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    numShockwaves: 4,\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    skill_cdRed: 2\n  },\n  passive2: {\n    geoDmg: percent(0.6),\n  },\n  constellation1: {\n    critRate_: percent(0.1),\n  },\n  constellation4: {\n    energyRestore: 5,\n    maxTriggers: 5\n  },\n  constellation6: {\n    burstDuration: 5,\n    skillDuration: 10\n  }\n} as const\n\nconst [condC1BurstAreaPath, condC1BurstArea] = cond(key, `${elementKey}C1BurstArea`)\nconst c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\n  equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\n)\nconst c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\n\nconst [condC4BurstHitPath, condC4BurstHit] = cond(key, `${elementKey}C4BurstHit`)\nconst c4Burst_energyRestore = lookup(condC4BurstHit,\n  Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\n    stack,\n    constant(stack * datamine.constellation4.energyRestore)\n  ])),\n  naught\n)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n  passive2: {\n    dmg: customDmgNode(\n      prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\n    )\n  },\n  constellation2: {\n    dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\n  }\n} as const\n\nconst burstC3 = greaterEq(input.constellation, 3, 3)\nconst skillC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC5,\n    burst: burstC3,\n  },\n  teamBuff: {\n    premod: {\n      critRate_: c1BurstArea_critRate_\n    }\n  }\n})\n\nconst talentSheet: TalentSheet = {\n  sheets: {\n    auto: ct.talentTemplate(\"auto\", [{\n      text: tr(\"auto.fields.normal\")\n    }, {\n      fields: datamine.normal.hitArr.map((_, i) => ({\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\n      }))\n    }, {\n      text: tr(\"auto.fields.charged\"),\n    }, {\n      fields: [{\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\n        textSuffix: \"(1)\"\n      }, {\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\n        textSuffix: \"(2)\"\n      }, {\n        text: tr(\"auto.skillParams.6\"),\n        value: datamine.charged.stamina,\n      }]\n    }, {\n      text: tr(\"auto.fields.plunging\"),\n    }, {\n      fields: [{\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n      }, {\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n      }, {\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n      }]\n    }]),\n\n    skill: ct.talentTemplate(\"skill\", [{\n      fields: [{\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\n      }, {\n        text: tr(\"skill.skillParams.1\"),\n        value: data => data.get(input.constellation).value >= 6\n          ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\n          : datamine.skill.duration,\n        unit: \"s\",\n      }, {\n        text: sgt(\"cd\"),\n        value: data => data.get(input.asc).value >= 1\n          ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\n          : datamine.skill.cd,\n        unit: \"s\",\n      }]\n    }, ct.headerTemplate(\"passive1\", {\n      fields: [{\n        text: st(\"skillCDRed\"),\n        value: datamine.passive1.skill_cdRed,\n        unit: \"s\"\n      }]\n    }), ct.headerTemplate(\"constellation2\", {\n      fields: [{\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:${elementKey}.c2.key` }),\n      }]\n    }), ct.headerTemplate(\"constellation6\", {\n      fields: [{\n        text: st(\"durationInc\"),\n        value: datamine.constellation6.skillDuration,\n        unit: \"s\"\n      }]\n    })]),\n\n    burst: ct.talentTemplate(\"burst\", [{\n      fields: [{\n        node: infoMut(dmgFormulas.burst.dmg,\n          { key: `sheet_gen:skillDMG` }\n        ),\n        textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\n      }, {\n        text: tr(\"burst.skillParams.1\"),\n        value: data => data.get(input.constellation).value >= 6\n          ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\n          : datamine.burst.duration,\n        unit: \"s\"\n      }, {\n        text: sgt(\"cd\"),\n        value: datamine.burst.cd,\n        unit: \"s\"\n      }, {\n        text: sgt(\"energyCost\"),\n        value: datamine.burst.enerCost,\n      }]\n    }, ct.conditionalTemplate(\"constellation1\", {\n      value: condC1BurstArea,\n      path: condC1BurstAreaPath,\n      name: st(\"activeCharField\"),\n      teamBuff: true,\n      states: {\n        on: {\n          fields: [{\n            node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\n          }, {\n            text: st(\"incInterRes\"),\n          }]\n        }\n      }\n    }), ct.conditionalTemplate(\"constellation4\", {\n      value: condC4BurstHit,\n      path: condC4BurstHitPath,\n      name: st(\"hitOp.burst\"),\n      states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\n        stack,\n        {\n          name: st(\"hits\", { count: stack }),\n          fields: [{\n            node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\n          }]\n        }\n      ]))\n    }), ct.headerTemplate(\"constellation6\", {\n      fields: [{\n        text: st(\"durationInc\"),\n        value: datamine.constellation6.burstDuration,\n        unit: \"s\"\n      }]\n    })]),\n\n    passive1: ct.talentTemplate(\"passive1\"),\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n      fields: [{\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:${elementKey}.passive2.key` })\n      }]\n    })]),\n    constellation1: ct.talentTemplate(\"constellation1\"),\n    constellation2: ct.talentTemplate(\"constellation2\"),\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\n    constellation4: ct.talentTemplate(\"constellation4\"),\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\n    constellation6: ct.talentTemplate(\"constellation6\"),\n  }\n}\nexport default talentSheet\n","import { CharacterData } from 'pipeline'\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\nimport { trans } from '../../SheetUtil'\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\nimport anemo, { data as anemoData } from './anemo'\nimport data_gen_src from './data_gen.json'\nimport electro, { data as electroData } from './electro'\nimport geo, { data as geoData } from './geo'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport card from './Traveler_Female_Card.jpg'\nconst data_gen = data_gen_src as CharacterData\nconst key: CharacterKey = \"Traveler\"\nconst [tr] = trans(\"char\", key)\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  rarity: data_gen.star,\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\n  gender: \"F/M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talents: {\n    anemo,\n    geo,\n    electro,\n  }\n};\nexport default new CharacterSheet(sheet, {\n  anemo: anemoData,\n  geo: geoData,\n  electro: electroData,\n});\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Venti_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input, target } from '../../../Formula'\nimport { reactions } from '../../../Formula/reaction'\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { objectKeyMap } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Venti\"\nconst elementKey: ElementKey = \"anemo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1x2\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4x2\n      skillParam_gen.auto[a++], // 5\n      skillParam_gen.auto[a++], // 6\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++], // Aimed\n    fully: skillParam_gen.auto[a++], // Fully-charged\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    pressDmg: skillParam_gen.skill[s++],\n    pressCD: skillParam_gen.skill[s++][0],\n    holdDmg: skillParam_gen.skill[s++],\n    holdCD: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    baseDmg: skillParam_gen.burst[b++],\n    baseTicks: 20,\n    absorbDmg: skillParam_gen.burst[b++],\n    absorbTicks: 15,\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0]\n  },\n  passive1: {\n    duration: skillParam_gen.passive1[0][0]\n  },\n  // No real p3/constellation datamine values :(\n  passive3: {\n    stam_: 0.20,\n  },\n  constellation1: {\n    dmgRatio: 0.33,\n  },\n  constellation2: {\n    res_: -0.12,\n    duration: 10,\n  },\n  constellation4: {\n    anemo_dmg_: 0.25,\n    duration: 10,\n  },\n  constellation6: {\n    res_: -0.20,\n    duration: 10, // From KQM\n  }\n} as const\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\n\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\n\nconst [condC2Path, condC2] = cond(key, \"c2\")\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\n  lookup(condC2, {\n    \"hit\": constant(datamine.constellation2.res_),\n    \"launched\": prod(datamine.constellation2.res_, 2)\n  },\n    naught\n  )\n)\nconst c2Hit_phys_enemyRes__ = { ...c2Hit_anemo_enemyRes_ }\n\nconst [condC4Path, condC4] = cond(key, \"c4\")\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\n  datamine.constellation4.anemo_dmg_))\n\nconst [condC6Path, condC6] = cond(key, \"c6\")\nconst c6_anemo_enemyRes_ = greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", datamine.constellation6.res_))\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\n  `${ele}_enemyRes_`,\n  greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", equal(ele, condBurstAbsorption, datamine.constellation6.res_)))\n]))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\n  },\n  burst: {\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } })),\n    full7: unequal(condBurstAbsorption, undefined, sum(\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\n    )),\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\n    )))\n  },\n  constellation1: {\n    aimed: greaterEq(input.constellation, 1,\n      customDmgNode(\n        prod(\n          percent(datamine.constellation1.dmgRatio),\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\n          input.total.atk\n        ),\n        \"charged\"\n      )\n    ),\n    fully: greaterEq(input.constellation, 1,\n      customDmgNode(\n        prod(\n          percent(datamine.constellation1.dmgRatio),\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\n          input.total.atk\n        ),\n        \"charged\", { hit: { ele: constant(elementKey) } }\n      )\n    ),\n  },\n}\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    burst: nodeC3,\n    skill: nodeC5,\n  },\n  premod: {\n    anemo_dmg_: c4_anemo_dmg_,\n    staminaGlidingDec_: p3_staminaGlidingDec_,\n  },\n  teamBuff: {\n    premod: {\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\n      ...c6_ele_enemyRes_arr,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\n        }, {\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\n        }, {\n          node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.pressCD,\n          unit: \"s\"\n        }, {\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\n        }, {\n          text: st(\"holdCD\"),\n          value: datamine.skill.holdCD,\n          unit: \"s\"\n        }]\n      }, ct.headerTemplate(\"passive1\", {\n        fields: [{\n          text: trm(\"upcurrentDuration\"),\n          value: datamine.passive1.duration,\n          unit: \"s\"\n        }]\n      }), ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        teamBuff: true,\n        name: tr(\"constellation2.name\"),\n        states: {\n          hit: {\n            name: trm(\"c2.hit\"),\n            fields: [{\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\n            }, {\n              node: c2Hit_phys_enemyRes__\n            }]\n          },\n          launched: {\n            name: trm(\"c2.launched\"),\n            fields: [{\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\n            }, {\n              node: c2Hit_phys_enemyRes__\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\n          textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condBurstAbsorption,\n        path: condBurstAbsorptionPath,\n        name: st(\"eleAbsor\"),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: [{\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\n          }]\n        }]))\n      }), ct.headerTemplate(\"burst\", { // Custom burst formula\n        fields: [{\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\n        }, {\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\n        }],\n        canShow: unequal(condBurstAbsorption, undefined, 1),\n      }), {\n        text: trm(\"fullBurstDMG.description\"),\n      }, ct.headerTemplate(\"passive2\", {\n        fields: [{\n          text: trm(\"regenEner\"),\n        }, {\n          text: trm(\"q\"),\n        }]\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 Anemo\n        value: condC6,\n        path: condC6Path,\n        teamBuff: true,\n        name: trm(\"c6\"),\n        states: {\n          takeDmg: {\n            fields: [{\n              node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\n        fields: absorbableEle.map(eleKey => (\n          { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\n        )),\n        canShow: unequal(condBurstAbsorption, undefined,\n          equal(condC6, \"takeDmg\",\n            equal(target.charKey, key, 1)\n          )\n        ),\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\n        value: condBurstAbsorption,\n        path: condBurstAbsorptionPath,\n        name: st(\"eleAbsor\"),\n        teamBuff: true,\n        canShow: equal(condC6, \"takeDmg\", unequal(input.activeCharKey, key, 1)),\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n          fields: [{\n            node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\n          }]\n        }]))\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\", [{ fields: [{ node: p3_staminaGlidingDec_ }] }]),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [\n        ct.conditionalTemplate(\"constellation4\", {\n          value: condC4,\n          path: condC4Path,\n          name: trm(\"c4\"),\n          states: {\n            pickup: {\n              fields: [{\n                node: c4_anemo_dmg_,\n              }]\n            }\n          }\n        }),\n      ]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Xiangling_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Xiangling\"\nconst elementKey: ElementKey = \"pyro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3x2\n      skillParam_gen.auto[a++], // 4x4\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++], // 1\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg1: skillParam_gen.burst[b++],\n    dmg2: skillParam_gen.burst[b++],\n    dmg3: skillParam_gen.burst[b++],\n    dmgNado: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    atk_bonus: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation1: {\n    pyroRes: skillParam_gen.constellation1[0],\n    duration: skillParam_gen.constellation1[1],\n  },\n  constellation2: {\n    duration1: skillParam_gen.constellation2[0],\n    duration2: skillParam_gen.constellation2[1],\n    dmg: skillParam_gen.constellation2[2],\n  },\n  constellation6: {\n    pyroDmg: skillParam_gen.constellation6[0],\n  }\n} as const\n\n// A4\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\nconst afterChili = greaterEq(input.asc, 4,\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\n\n// C1\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\nconst afterGuobaHit = greaterEq(input.constellation, 1,\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\n\n// C6\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\nconst duringPyronado = greaterEq(input.constellation, 6,\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\n)\nconst antiC6 = prod(duringPyronado, -1)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n  },\n  burst: {\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\n  },\n  constellation2: {\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\n      { hit: { ele: constant(elementKey) } })\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  teamBuff: {\n    premod: {\n      atk_: afterChili,\n      pyro_dmg_: duringPyronado,\n      pyro_enemyRes_: afterGuobaHit,\n    }\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n        }]\n      }, ct.conditionalTemplate(\"constellation1\", {\n        value: condAfterGuobaHit,\n        path: condAfterGuobaHitPath,\n        name: trm(\"afterGuobaHit\"),\n        teamBuff: true,\n        states: {\n          afterGuobaHit: {\n            fields: [{\n              node: afterGuobaHit\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation1.duration,\n              unit: \"s\",\n            }],\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\n        }, {\n          node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\n        }, {\n          node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.burst.duration,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"constellation6\", {\n        value: condDuringPyronado,\n        path: condDuringPyronadoPath,\n        name: trm(\"duringPyronado\"),\n        teamBuff: true,\n        states: {\n          duringPyronado: {\n            fields: [{\n              text: trm(\"c6Exception\"),\n              canShow: data => data.get(input.constellation).value >= 6\n                && data.get(condDuringPyronado).value === \"duringPyronado\"\n            }, {\n              node: duringPyronado\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation1.duration,\n              unit: \"s\",\n            }],\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        value: condAfterChili,\n        path: condAfterChiliPath,\n        name: trm(\"afterChili\"),\n        teamBuff: true,\n        states: {\n          afterChili: {\n            fields: [{\n              node: afterChili,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\",\n            }]\n          }\n        }\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\n        fields: [{\n          value: datamine.constellation2.dmg,\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\n        }]\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Xiao_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input } from '../../../Formula'\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Xiao\"\nconst elementKey: ElementKey = \"anemo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[0], // 1\n      skillParam_gen.auto[2], // 2\n      skillParam_gen.auto[3], // 3\n      skillParam_gen.auto[4], // 4\n      skillParam_gen.auto[6], // 5\n      skillParam_gen.auto[7], // 6\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[8], // 1\n    stamina: skillParam_gen.auto[9][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[10],\n    low: skillParam_gen.auto[11],\n    high: skillParam_gen.auto[12],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmgBonus: skillParam_gen.burst[b++],\n    drain: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    dmgBonus: skillParam_gen.passive1[0][0],\n  },\n  passive2: {\n    duration: skillParam_gen.passive2[0][0],\n    skillDmgBonus: skillParam_gen.passive2[1][0],\n    maxStacks: skillParam_gen.passive2[2][0],\n  },\n  passive3: {\n    staminaClimbingDec_: 0.20,\n  },\n  constellation2: {\n    enerRech_: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    hpThresh: skillParam_gen.constellation4[0],\n    def_: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    duration: skillParam_gen.constellation6[0]\n  }\n} as const\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n  },\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\nconst charged_dmg_ = { ...normal_dmg_ }\nconst plunging_dmg_ = { ...normal_dmg_ }\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\n\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\nconst a1BurstStackArr = range(0, 4)\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\n  lookup(condA1BurstStack,\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\n    naught\n  )\n)\n\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\nconst skill_dmg_ = greaterEq(input.asc, 4,\n  lookup(condA4SkillStack,\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\n    naught\n  )\n)\n\nconst c2Inactive = greaterEq(input.constellation, 2,\n  unequal(input.activeCharKey, key, 1)\n)\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\n\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  premod: {\n    normal_dmg_,\n    charged_dmg_,\n    plunging_dmg_,\n    all_dmg_,\n    skill_dmg_,\n    enerRech_: c2Inactive_enerRech_,\n    def_: c4BelowHP_def_,\n  },\n  infusion: {\n    nonOverridableSelf: infusion\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n        }, {\n          text: st(\"charges\"),\n          value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\n        }]\n      }, ct.conditionalTemplate(\"passive2\", { // A4\n        path: condA4SkillStackPath,\n        value: condA4SkillStack,\n        name: trm(\"skillStack\"),\n        states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\n          name: st(\"uses\", { count: i }),\n          fields: [{ node: skill_dmg_ }]\n        }]))\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\n        }, {\n          node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\n          textSuffix: trm(\"burst.currentHPPerSec\"),\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.burst.duration,\n          unit: \"s\",\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        path: condInBurstPath,\n        value: condInBurst,\n        name: trm(\"burst.inBurst\"),\n        states: {\n          inBurst: {\n            fields: [{\n              node: normal_dmg_,\n            }, {\n              node: charged_dmg_,\n            }, {\n              node: plunging_dmg_,\n            }, {\n              text: trm(\"burst.incJump\"),\n            }, {\n              text: trm(\"burst.incAtkAoe\"),\n            }, {\n              canShow: data => data.get(infusion).value === elementKey,\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"passive1\", { // A1\n        path: condA1BurstStackPath,\n        value: condA1BurstStack,\n        name: trm(\"burst.stack\"),\n        canShow: equal(\"inBurst\", condInBurst, 1),\n        states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\n          name: st(\"seconds\", { count: i * 3 }),\n          fields: [{ node: all_dmg_ }]\n        }]))\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\n        canShow: equal(c2Inactive, 1, 1),\n        teamBuff: true,\n        fields: [{ node: c2Inactive_enerRech_ }],\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        path: condC4BelowHPPath,\n        value: condC4BelowHP,\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\n        states: {\n          c4BelowHP: {\n            fields: [{ node: c4BelowHP_def_ }]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Xingqiu_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from \"../../../Formula/index\"\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum, one } from \"../../../Formula/utils\"\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst key: CharacterKey = \"Xingqiu\"\nconst elementKey: ElementKey = \"hydro\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet s = 0, b = 0\nexport const datamine = {\n  normal: {\n    hitArr: [\n      (skillParam_gen.auto[0]),//1\n      (skillParam_gen.auto[1]),//2\n      (skillParam_gen.auto[2]),//3\n      // (skillParam_gen.auto[3]),\n      (skillParam_gen.auto[4]),//4\n      (skillParam_gen.auto[5]),//5\n      // (skillParam_gen.auto[6]),\n    ]\n  },\n  charged: {\n    hit1: (skillParam_gen.auto[7]),\n    hit2: (skillParam_gen.auto[8]),\n    stamina: skillParam_gen.auto[9][0]\n  },\n  plunging: {\n    dmg: (skillParam_gen.auto[10]),\n    low: (skillParam_gen.auto[11]),\n    high: (skillParam_gen.auto[12]),\n  },\n  skill: {\n    hit1: (skillParam_gen.skill[s++]),\n    hit2: (skillParam_gen.skill[s++]),\n    dmgRed_: (skillParam_gen.skill[s++]),\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: (skillParam_gen.burst[b++]),\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    cost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    hydro_dmg_: 0.20\n  },\n  constellation2: {\n    hydro_enemyRes_: -0.15,\n    skill_duration: 3\n  },\n  constellation4: {\n    dmg_: 0.50\n  },\n} as const\n\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\n\nconst [condC2Path, condC2] = cond(key, \"c2\")\nconst nodeC2 = greaterEq(input.constellation, 2,\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\n\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\n\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\nconst nodeC4 = greaterEq(input.constellation, 4,\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\n\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.premod.hydro_dmg_))))\n\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\n\nexport const dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    // Multiplicative DMG increase requires customDmgNode\n    press1: customDmgNode(prod(\n      subscript(input.total.skillIndex, datamine.skill.hit1, { key: \"_\" }),\n      input.total.atk,\n      sum(one, nodeC4)\n    ), \"skill\"),\n    press2: customDmgNode(prod(\n      subscript(input.total.skillIndex, datamine.skill.hit2, { key: \"_\" }),\n      input.total.atk,\n      sum(one, nodeC4)\n    ), \"skill\"),\n    dmgRed_: nodeSkillDmgRed_,\n  },\n  passive1: {\n    healing: nodeA4Heal\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\n  }\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  teamBuff: {\n    premod: {\n      hydro_enemyRes_: nodeC2,\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\n    }\n  },\n  premod: {\n    hydro_dmg_: nodeA4,\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\n          textSuffix: \"(1)\"\n        }, {\n          node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\n          textSuffix: \"(2)\"\n        }, {\n          text: tr(\"skill.skillParams.2\"),\n          value: data => data.get(input.constellation).value >= 2\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\n            : `${datamine.skill.duration}`,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.3\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        teamBuff: true,\n        value: condSkill,\n        path: condSkillPath,\n        name: trm(\"skillCond\"),\n        states: {\n          on: {\n            fields: [{\n              node: dmgFormulas.skill.dmgRed_,\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condBurst,\n        path: condBurstPath,\n        name: trm(\"burstCond\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n            }, {\n              text: tr(\"burst.skillParams.1\"),\n              value: datamine.burst.duration,\n              unit: \"s\"\n            }, {\n              node: nodeC4\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          node: nodeA4\n        }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        value: condC2,\n        path: condC2Path,\n        teamBuff: true,\n        name: trm(\"c2Cond\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC2\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    },\n  },\n};\n\nexport default new CharacterSheet(sheet, data);\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Xinyan_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, target } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Xinyan\"\nconst elementKey: ElementKey = \"pyro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    spin: skillParam_gen.auto[a++],\n    final: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n    duration: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    shieldArr: [\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\n    ],\n    lvl3Dmg: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    pressPhysDmg: skillParam_gen.burst[b++],\n    dotPyroDmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    duration: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    physical_dmg_: skillParam_gen.passive2[0][0],\n  },\n  c1: {\n    atkSPD_: skillParam_gen.constellation1[0],\n    duration: skillParam_gen.constellation1[1],\n    cd: skillParam_gen.constellation1[1],\n  },\n  c2: {\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\n  },\n  c4: {\n    physical_enemyRes_: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n  c6: {\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\n    charged_atkBonus: skillParam_gen.constellation6[1]\n  }\n} as const\n\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\n\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\n\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\n\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\n\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\n\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\n  equal(condC6Charged, \"on\",\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\n  )\n)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\n      `normShield${i + 1}`,\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\n    ])),\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\n      `pyroShield${i + 1}`,\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\n    ])),\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\n  },\n  burst: {\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\n      hit: { ele: constant(\"physical\") },\n      premod: {\n        burst_critRate_: c2BurstPhysical_critRate_,\n      }\n    }),\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\n  },\n} as const\n\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC3,\n    burst: burstC5\n  },\n  teamBuff: {\n    premod: {\n      physical_dmg_: p2Shield_physical_dmg_,\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\n    }\n  },\n  premod: {\n    atkSPD_: c1Crit_atkSPD_,\n    staminaChargedDec_: c6_staminaChargedDec_,\n    atk: c6_chargedAtkBonus\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\")\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: `${datamine.charged.stamina}/s`,\n        }],\n      }, ct.headerTemplate(\"constellation6\", {\n        fields: [{\n          node: c6_staminaChargedDec_\n        }]\n      }), ct.conditionalTemplate(\"constellation6\", {\n        value: condC6Charged,\n        path: condC6ChargedPath,\n        name: trm(\"c6.duringCharge\"),\n        states: {\n          on: {\n            fields: [{\n              node: c6_chargedAtkBonus\n            }]\n          }\n        }\n      }), {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condSkillHitNum,\n        path: condSkillHitNumPath,\n        name: trm(\"skill.shieldLevel\"),\n        states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\n          lvl, {\n            name: trm(`skill.shieldLevels.${lvl}`),\n            fields: [\n              ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\n                node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\n                  {\n                    key: type === \"norm\" // And change the key to match\n                      ? `char_${key}_gen:skill.skillParams.${lvl}`\n                      : `char_${key}:skill.pyroShield.${lvl}`\n                  }\n                )\n              },\n              ])), {\n                text: sgt(\"duration\"),\n                value: datamine.skill.duration,\n                unit: \"s\",\n              },\n              // Level 3 damage\n              ...lvl === 3 ? [{ node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` }) }] : [],\n            ]\n          }\n        ]))\n      }), ct.headerTemplate(\"passive1\", {\n        fields: [{\n          text: trm(\"p1.desc\"),\n        }]\n      }), ct.conditionalTemplate(\"passive2\", {\n        value: condP2Shield,\n        path: condP2ShieldPath,\n        name: trm(\"p2.activeShield\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"constellation4\", {\n        value: condC4SkillHit,\n        path: condC4SkillHitPath,\n        name: trm(\"c4.swingHit\"),\n        teamBuff: true,\n        states: {\n          on: {\n            fields: [{\n              node: c4SkillHit_physical_enemyRes_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.c4.duration,\n              unit: \"s\",\n            }]\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.headerTemplate(\"constellation2\", {\n        fields: [{\n          node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\n        }, {\n          text: trm(\"c2.shield\"),\n        }]\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\n        value: condC1Crit,\n        path: condC1CritPath,\n        name: st(\"hitOp.crit\"),\n        states: {\n          on: {\n            fields: [{\n              node: c1Crit_atkSPD_,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.c1.duration,\n              unit: \"s\",\n            }, {\n              text: sgt(\"cd\"),\n              value: datamine.c1.cd,\n              unit: \"s\",\n            }]\n          }\n        }\n      })]),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Yae_Miko_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"YaeMiko\"\nconst elementKey: ElementKey = \"electro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg1: skillParam_gen.skill[s++],\n    dmg2: skillParam_gen.skill[s++],\n    dmg3: skillParam_gen.skill[s++],\n    dmg4: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    tenkoDmg: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\n  },\n  constellation4: {\n    ele_dmg_: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    defIgn_: skillParam_gen.constellation6[0],\n  }\n\n} as const\n\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_, { fixed: 2 })))\n\nconst [condC4Path, condC4] = cond(key, \"c4\")\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\n\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\n  },\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5\n  },\n  total: {\n    skill_dmg_: nodeAsc4,\n  },\n  teamBuff: {\n    premod: {\n      electro_dmg_: nodeC4\n    },\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\n        }, {\n          text: tr(\"auto.skillParams.4\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\n        }, {\n          text: tr(\"skill.skillParams.4\"),\n          value: datamine.skill.duration,\n          unit: \"s\"\n        }, {\n          text: tr(\"skill.skillParams.5\"),\n          value: datamine.skill.cd,\n        }],\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.enerCost,\n        }]\n      }]),\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [{ fields: [{ node: nodeAsc4 }] }]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        teamBuff: true,\n        name: trm(\"c4\"),\n        states: {\n          hit: {\n            fields: [{\n              node: nodeC4,\n            }]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Yanfei_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Yanfei\"\nconst elementKey: ElementKey = \"pyro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n    ]\n  },\n  charged: {\n    dmgArr: [\n      skillParam_gen.auto[a++], // 0 seals\n      skillParam_gen.auto[a++], // 1 seal\n      skillParam_gen.auto[a++], // 2 seals\n      skillParam_gen.auto[a++], // 3 seals\n      skillParam_gen.auto[a++], // 4 seals\n    ],\n    unknown: {\n      arr: [\n        skillParam_gen.auto[a++][0],\n        skillParam_gen.auto[a++][0],\n        skillParam_gen.auto[a++][0],\n        skillParam_gen.auto[a++][0],\n        skillParam_gen.auto[a++][0],\n      ]\n    },\n    stamina: skillParam_gen.auto[a++][0],\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\n    maxSeals: 3,\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  sealDuration: skillParam_gen.auto[a++][0],\n  // There is another unknown here for auto\n  skill: {\n    dmg: skillParam_gen.skill[0],\n    cd: skillParam_gen.skill[1][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    charged_dmg_: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    sealInterval: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\n    duration: skillParam_gen.passive1[1][0],\n  },\n  passive2: {\n    dmg: percent(skillParam_gen.passive2[0][0])\n  },\n  c1: {\n    sealStaminaRed_: skillParam_gen.constellation1[0]\n  },\n  c2: {\n    hpThresh: skillParam_gen.constellation2[0],\n    charged_critRate_: skillParam_gen.constellation2[1]\n  },\n  c4: {\n    hpShield_: skillParam_gen.constellation4[0],\n    duration: 15,\n  },\n  c6: {\n    extraSeals: skillParam_gen.constellation6[0]\n  }\n} as const\n\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\n)\n\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\n  // TODO: Should be changing number of seals shown based on C6\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\n    seals,\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\n  ])), naught)\n)\n\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\n\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\n)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\n    [i, i < 4\n      ? dmgNode(\"atk\", arr, \"charged\")\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\n    ])),\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\n  },\n  passive2: {\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\n    ))\n  },\n  constellation4: {\n    pyro_shield: greaterEq(input.constellation, 4,\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\n    ),\n    norm_shield: greaterEq(input.constellation, 4,\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\n    ),\n  },\n} as const\n\nconst skillC3 = greaterEq(input.constellation, 3, 3)\nconst burstC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC3,\n    burst: burstC5,\n  },\n  premod: {\n    charged_dmg_: afterBurst_charged_dmg_,\n    charged_critRate_: c2EnemyHp_critRate_,\n    pyro_dmg_: p1_pyro_dmg_,\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [\n          // TODO: Would probably be better as a conditional,\n          // but can't make conditional states based on constellation value\n          ...datamine.charged.dmgArr.map((_, i) => ({\n            node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\n          })), {\n            text: tr(\"auto.skillParams.4\"),\n            // TODO: Should change this value based on how many seals, but can't do without conditional\n            // charged attack. And its a bit execssive.\n            value: datamine.charged.stamina,\n          }, {\n            text: st(\"staminaDec_\"),\n            value: datamine.charged.sealStaminaRed_ * 100,\n            textSuffix: trm(\"perSeal\"),\n            unit: \"%\",\n          }, {\n            text: trm(\"maxSeals\"),\n            value: data => data.get(input.constellation).value >= 6\n              ? datamine.charged.maxSeals + datamine.c6.extraSeals\n              : datamine.charged.maxSeals,\n          }, {\n            text: tr(\"auto.skillParams.6\"),\n            value: datamine.sealDuration,\n            unit: \"s\"\n          }],\n      }, ct.conditionalTemplate(\"passive1\", {\n        value: condP1Seals,\n        path: condP1SealsPath,\n        name: trm(\"passive1.sealsConsumed\"),\n        // TODO: Should be changing number of seals shown based on C6\n        states: Object.fromEntries(range(1, 4).map(seals => [\n          seals, {\n            name: trm(`seals.${seals}`),\n            fields: [{\n              node: p1_pyro_dmg_,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\"\n            }]\n          }\n        ]))\n      }), ct.conditionalTemplate(\"passive2\", {\n        value: condP2ChargedCrit,\n        path: condP2ChargedCritPath,\n        name: trm(\"passive2.chargedCrit\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: trm(\"c1.sealChargedStam_\"),\n          value: datamine.c1.sealStaminaRed_ * -100,\n          textSuffix: trm(\"perSeal\"),\n          unit: \"%\"\n        }, {\n          text: st(\"incInterRes\")\n        }]\n      }), ct.conditionalTemplate(\"constellation2\", {\n        value: condC2EnemyHp,\n        path: condC2EnemyHpPath,\n        name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\n        states: {\n          on: {\n            fields: [{\n              node: c2EnemyHp_critRate_\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation6\", {\n        fields: [{\n          text: trm(\"c6.maxSealInc\"),\n          value: datamine.c6.extraSeals\n        }]\n      }), {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\",\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: trm(\"burst.grantMax\")\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\",\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        value: condAfterBurst,\n        path: condAfterBurstPath,\n        name: st(\"afterUse.burst\"),\n        states: {\n          on: {\n            fields: [{\n              text: tr(\"burst.skillParams.2\"),\n              value: datamine.burst.sealInterval,\n              unit: \"s\"\n            }, {\n              node: afterBurst_charged_dmg_\n            }]\n          }\n        }\n      }), ct.headerTemplate(\"constellation4\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\n        }, {\n          node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.c4.duration,\n          unit: \"s\"\n        }]\n      })]),\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  }\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Yelan_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, tally, target } from '../../../Formula'\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Yelan\"\nconst elementKey: ElementKey = \"hydro\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4x3\n    ]\n  },\n  charged: {\n    aimed: skillParam_gen.auto[a++],\n    aimedCharged: skillParam_gen.auto[a++],\n    barb: skillParam_gen.auto[a++],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    dmg: skillParam_gen.skill[s++],\n    resetChance: skillParam_gen.skill[s++][0],\n    maxDuration: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    pressDmg: skillParam_gen.burst[b++],\n    throwDmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    hp_Arr: [0, ...skillParam_gen.passive1.map(([a]) => a)],\n  },\n  passive2: {\n    baseDmg_: skillParam_gen.passive2[0][0],\n    stackDmg_: skillParam_gen.passive2[1][0],\n    maxDmg_: skillParam_gen.passive2[2][0],\n    maxStacks: 14,\n  },\n  constellation1: {\n    addlCharge: skillParam_gen.constellation1[0],\n  },\n  constellation2: {\n    arrowDmg_: skillParam_gen.constellation2[0],\n    cd: skillParam_gen.constellation2[1],\n  },\n  constellation4: {\n    bonusHp_: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n    maxHp_: skillParam_gen.constellation4[2],\n    maxStacks: 4,\n  },\n  constellation6: {\n    charges: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n    dmg_: skillParam_gen.constellation6[2],\n  }\n}\n\nconst a1_hp_ = greaterEq(input.asc, 1, subscript(tally.ele, datamine.passive1.hp_Arr))\n\nconst [condA4StacksPath, condA4Stacks] = cond(key, \"a4Stacks\")\nconst a4Stacks = range(0, datamine.passive2.maxStacks)\nconst a4Dmg_Disp = greaterEq(input.asc, 4,\n  lookup(condA4Stacks, Object.fromEntries(a4Stacks.map(stacks => [\n    stacks,\n    sum(percent(datamine.passive2.baseDmg_), prod(stacks, percent(datamine.passive2.stackDmg_)))\n  ])),\n    naught)\n)\nconst a4Dmg = equal(target.charKey, input.activeCharKey, a4Dmg_Disp)\n\nconst [condC4StacksPath, condC4Stacks] = cond(key, \"c4Stacks\")\nconst c4Stacks = range(1, datamine.constellation4.maxStacks)\nconst c4Hp_ = greaterEq(input.constellation, 4,\n  lookup(condC4Stacks, Object.fromEntries(c4Stacks.map(stacks => [\n    stacks,\n    prod(stacks, percent(datamine.constellation4.bonusHp_))\n  ])),\n    naught)\n)\n\nconst [condC6ActivePath, condC6Active] = cond(key, \"c6Active\")\nconst c6Active = greaterEq(input.constellation, 6, equal(condC6Active, \"on\", 1))\n\nconst hitEle = { hit: { ele: constant(elementKey) } }\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, unequal(c6Active, 1, dmgNode(\"atk\", arr, \"normal\"))])),\n  charged: {\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", hitEle),\n    barb: dmgNode(\"hp\", datamine.charged.barb, \"charged\", hitEle),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"hp\", datamine.skill.dmg, \"skill\"),\n  },\n  burst: {\n    pressDmg: dmgNode(\"hp\", datamine.burst.pressDmg, \"burst\"),\n    throwDmg: dmgNode(\"hp\", datamine.burst.throwDmg, \"burst\"),\n  },\n  constellation2: {\n    arrowDmg: greaterEq(input.constellation, 2, customDmgNode(\n      prod(\n        percent(datamine.constellation2.arrowDmg_),\n        input.total.hp\n      ),\n      \"burst\",\n      hitEle\n    ))\n  },\n  constellation6: {\n    barbDmg: equal(c6Active, 1, customDmgNode(\n      prod(\n        subscript(input.total.autoIndex, datamine.charged.barb, { key: \"_\" }),\n        percent(datamine.constellation6.dmg_),\n        input.total.hp\n      ),\n      \"charged\",\n      hitEle\n    )),\n  },\n}\n\nconst burstC3 = greaterEq(input.constellation, 3, 3)\nconst skillC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: skillC5,\n    burst: burstC3,\n  },\n  premod: {\n    hp_: a1_hp_,\n  },\n  teamBuff: {\n    premod: {\n      all_dmg_: a4Dmg,\n      hp_: c4Hp_,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        canShow: unequal(c6Active, 1, 1),\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, ct.conditionalTemplate(\"constellation6\", {\n        path: condC6ActivePath,\n        value: condC6Active,\n        name: trm(\"c6.condName\"),\n        states: {\n          on: {\n            fields: [{\n              node: infoMut(dmgFormulas.constellation6.barbDmg, { key: `char_${key}:c6.dmg` }),\n            }, {\n              text: st(\"charges\"),\n              value: datamine.constellation6.charges,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation6.duration\n            }]\n          }\n        }\n      }), {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }]\n      }, {\n        text: tr(`auto.fields.breakthrough`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.barb, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          text: tr(\"skill.skillParams.1\"),\n          value: datamine.skill.maxDuration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.skill.cd,\n          unit: \"s\"\n        }, {\n          canShow: (data) => data.get(input.constellation).value >= 1,\n          text: st(\"charges\"),\n          value: 2\n        }]\n      }, ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: st(\"addlCharge\"),\n          value: datamine.constellation1.addlCharge,\n        }]\n      }), ct.conditionalTemplate(\"constellation4\", {\n        path: condC4StacksPath,\n        value: condC4Stacks,\n        teamBuff: true,\n        name: trm(\"c4.condName\"),\n        states: Object.fromEntries(c4Stacks.map(stacks => [\n          stacks,\n          {\n            name: st(\"stack\", { count: stacks }),\n            fields: [{\n              node: c4Hp_,\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation4.duration,\n              unit: \"s\"\n            }]\n          }\n        ]))\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.throwDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\n        }, {\n          text: sgt(\"duration\"),\n          value: datamine.burst.duration,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: sgt(\"energyCost\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"passive2\", {\n        path: condA4StacksPath,\n        value: condA4Stacks,\n        teamBuff: true,\n        name: st(\"afterUse.burst\"),\n        states: Object.fromEntries(a4Stacks.map(stack => [\n          stack,\n          {\n            name: st(\"seconds\", { count: stack }),\n            fields: [{\n              node: infoMut(a4Dmg_Disp, { key: \"all_dmg_\" }),\n            }]\n          }\n        ]))\n      }), ct.headerTemplate(\"constellation2\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation2.arrowDmg, { key: `char_${key}:c2.dmg` })\n        }, {\n          text: sgt(\"cd\"),\n          value: datamine.constellation2.cd,\n          unit: \"s\",\n          fixed: 1,\n        }]\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\n        fields: [{\n          node: a1_hp_\n        }]\n      })]),\n      passive2: ct.talentTemplate(\"passive2\"),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Yoimiya_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, one, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\nimport { INodeFieldDisplay } from '../../../Types/fieldDisplay'\nimport { range } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst characterKey: CharacterKey = \"Yoimiya\"\nconst elementKey: ElementKey = \"pyro\"\nconst data_gen = data_gen_src as CharacterData\nconst [tr, trm] = trans(\"char\", characterKey)\nconst ct = charTemplates(characterKey, data_gen.weaponTypeKey, talentAssets)\n\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[0], //x2\n      skillParam_gen.auto[1],\n      skillParam_gen.auto[2],\n      skillParam_gen.auto[3], //x2\n      skillParam_gen.auto[4],\n    ]\n  },\n  charged: {\n    hit: skillParam_gen.auto[5],\n    full: skillParam_gen.auto[6],\n    kindling: skillParam_gen.auto[7],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[8],\n    low: skillParam_gen.auto[9],\n    high: skillParam_gen.auto[10],\n  },\n  skill: {\n    dmg_: skillParam_gen.skill[3],\n    duration: skillParam_gen.skill[1][0],\n    cd: skillParam_gen.skill[2][0]\n  },\n  burst: {\n    dmg: skillParam_gen.burst[0],\n    exp: skillParam_gen.burst[1],\n    duration: skillParam_gen.burst[3][0],\n    cd: skillParam_gen.burst[4][0],\n    cost: skillParam_gen.burst[5][0]\n  },\n  passive1: {\n    pyro_dmg_: skillParam_gen.passive1[0][0],\n    duration: skillParam_gen.passive1[1][0],\n    maxStacks: 10,\n  },\n  passive2: {\n    fixed_atk_: skillParam_gen.passive2[0][0],\n    var_atk_: skillParam_gen.passive2[1][0],\n    duration: skillParam_gen.passive2[2][0],\n  },\n  constellation1: {\n    burst_durationInc: skillParam_gen.constellation1[0],\n    atk_: skillParam_gen.constellation1[1],\n    duration: skillParam_gen.constellation1[2]\n  },\n  constellation2: {\n    pyro_dmg_: skillParam_gen.constellation2[0],\n    duration: skillParam_gen.constellation2[1],\n  },\n  constellation3: {},\n  constellation4: {\n    cdRed: skillParam_gen.constellation4[0]\n  },\n  constellation5: {},\n  constellation6: {\n    chance: skillParam_gen.constellation6[0],\n    dmg_: skillParam_gen.constellation6[1],\n  },\n}\n\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\nconst normal_dmgMult = compareEq(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_, { key: `char_${characterKey}:normMult_` }), one)\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\nconst pyro_dmg_ = greaterEq(input.asc, 1, equal(condSkill, \"skill\", infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })))\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\n\nconst normalEntries = datamine.normal.hitArr.map((arr, i) => [\n  i,\n  customDmgNode(\n    prod(subscript(input.total.autoIndex, arr, { key: \"_\" }), input.total.atk, normal_dmgMult),\n    \"normal\", {\n    hit: {\n      ele: compareEq(condSkill, \"skill\", elementKey, \"physical\")\n    }\n  }\n  )\n])\n\n// This might just need to be a single dmgNode of her kindling arrow, with proper scaling applied.\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, equal(condSkill, \"skill\", prod(percent(datamine.constellation6.dmg_), node)))])\n\nexport const dmgFormulas = {\n  normal: Object.fromEntries(normalEntries),\n  charged: {\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {},\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\n  },\n  constellation6: Object.fromEntries(kindlingEntries)\n}\n\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: const3TalentInc,\n    burst: const5TalentInc,\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n    }\n  },\n  premod: {\n    atk_: c1atk_,\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\n        }, {\n          node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\n        }],\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          text: tr(\"skill.skillParams.2\"),\n          value: datamine.skill.cd,\n          unit: 's'\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        name: st(\"afterUse.skill\"),\n        path: condSkillPath,\n        value: condSkill,\n        states: {\n          skill: {\n            fields: [{\n              node: normal_dmgMult\n            }, {\n              text: trm(\"normPyroInfus\"),\n            }, {\n              text: tr(\"skill.skillParams.1\"),\n              value: datamine.skill.duration,\n              unit: 's'\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"passive1\", {\n        // Conditional for self display\n        canShow: equal(condSkill, \"skill\", 1),\n        value: condA1,\n        path: condA1Path,\n        name: tr(\"passive1.name\"),\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\n          [i, {\n            name: `${i} stack`,\n            fields: [{\n              node: pyro_dmg_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\"\n            }]\n          }]\n        ))\n      }), ct.headerTemplate(\"constellation6\", {\n        canShow: equal(condSkill, \"skill\", 1),\n        fields: datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\n        }))\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: 60,\n        }]\n      }, ct.headerTemplate(\"constellation1\", {\n        fields: [{\n          text: st(\"durationInc\"),\n          value: datamine.constellation1.burst_durationInc,\n          unit: \"s\"\n        }]\n      }), ct.conditionalTemplate(\"constellation1\", {\n        name: trm(\"c1\"),\n        value: condC1,\n        path: condC1Path,\n        states: {\n          c1: {\n            fields: [{\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation1.duration,\n              unit: 's'\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\n        teamBuff: true,\n        // Hide for Yoimiya\n        canShow: unequal(input.activeCharKey, characterKey, 1),\n        path: condBurstPath,\n        value: condBurst,\n        name: tr(\"burst.name\"),\n        states: {\n          on: {\n            fields: [{\n              node: atk_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      }), ct.conditionalTemplate(\"passive1\", {\n        // Conditional from P1 for team buff display when P2 is activated\n        canShow: unequal(input.activeCharKey, characterKey,\n          equal(condBurst, \"on\", greaterEq(input.asc, 4, 1))\n        ),\n        teamBuff: true,\n        value: condA1,\n        path: condA1Path,\n        name: tr(\"passive1.name\"),\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\n          [i, {\n            name: `${i} stack`,\n            fields: [{\n              node: pyro_dmg_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.passive1.duration,\n              unit: \"s\"\n            }]\n          }]\n        ))\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\n        name: trm(\"c2\"),\n        value: condC2,\n        path: condC2Path,\n        states: {\n          c2: {\n            fields: [{\n              node: c2pyro_dmg_\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation2.duration,\n              unit: \"s\"\n            }]\n          }\n        }\n      })]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: const3TalentInc }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: const5TalentInc }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\")\n    },\n  },\n}\n\nexport default new CharacterSheet(sheet, dataObj)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Yun_Jin_Card.jpg'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input, tally } from '../../../Formula'\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { cond, sgt, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"YunJin\"\nconst elementKey: ElementKey = \"geo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3.1\n      skillParam_gen.auto[a++], // 3.2\n      skillParam_gen.auto[a++], // 4.1\n      skillParam_gen.auto[a++], // 4.2\n      skillParam_gen.auto[a++], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    shield_: skillParam_gen.skill[s++],\n    shield: skillParam_gen.skill[s++],\n    dmg: skillParam_gen.skill[s++],\n    dmg1: skillParam_gen.skill[s++],\n    dmg2: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    dmgInc: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n    triggerNum: skillParam_gen.burst[b++][0],\n  },\n  passive2: {\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\n  },\n  constellation2: {\n    normalInc: skillParam_gen.constellation2[0],\n  },\n  constellation4: {\n    def_: skillParam_gen.constellation4[0],\n    duration: skillParam_gen.constellation4[1],\n  },\n  constellation6: {\n    atkSpd: skillParam_gen.constellation6[0],\n  }\n} as const\n\nconst nodeA4 = greaterEq(input.asc, 4,\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\n\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\nconst nodeSkill = equal(\"on\", condBurst, sum(\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\n\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\n\nconst [condC4Path, condC4] = cond(key, \"c4\")\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\n\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    dmg: dmgNode(\"def\", datamine.skill.dmg, \"skill\"),\n    dmg1: dmgNode(\"def\", datamine.skill.dmg1, \"skill\"),\n    dmg2: dmgNode(\"def\", datamine.skill.dmg2, \"skill\"),\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\n\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    dmgInc: nodeSkill\n  },\n}\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC5,\n    burst: nodeC3,\n  },\n  premod: {\n    def_: nodeC4,\n    atkSPD_: nodeC6,\n  },\n  teamBuff: {\n    premod: {\n      normal_dmgInc: nodeSkill,\n      normal_dmg_: nodeC2,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\n          textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n        }, {\n          text: tr(\"auto.skillParams.6\"),\n          value: datamine.charged.stamina,\n        }],\n      }, {\n        text: tr(\"auto.fields.plunging\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }],\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\n        }, {\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\n        }, {\n          text: tr(\"skill.skillParams.4\"),\n          value: data => data.get(input.constellation).value >= 1\n            ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd * (1 - 0.18)).toFixed(2)}`\n            : `${datamine.skill.cd}`,\n          unit: \"s\"\n        }]\n      }]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n        }, {\n          text: tr(\"burst.skillParams.4\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.5\"),\n          value: datamine.burst.enerCost,\n        }]\n      }, ct.conditionalTemplate(\"burst\", {\n        teamBuff: true,\n        value: condBurst,\n        path: condBurstPath,\n        name: trm(\"burst\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeSkill\n            }, {\n              node: nodeC2\n            }, {\n              node: nodeC6\n            }, {\n              text: tr(\"burst.skillParams.2\"),\n              value: datamine.burst.duration,\n              unit: \"s\"\n            }, {\n              text: tr(\"burst.skillParams.3\"),\n              value: datamine.burst.triggerNum,\n            }]\n          }\n        }\n      })]),\n\n      passive1: ct.talentTemplate(\"passive1\"),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\n        value: condC4,\n        path: condC4Path,\n        name: trm(\"c4\"),\n        states: {\n          on: {\n            fields: [{\n              node: nodeC4\n            }, {\n              text: sgt(\"duration\"),\n              value: datamine.constellation4.duration,\n              unit: \"s\"\n            },]\n          }\n        }\n      })]),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\"),\n    }\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { TalentSheetElementKey } from '../CharacterSheet'\nimport banner from './Banner.png'\nimport burst from './burst.png'\nimport card from './Character_Zhongli_Card.png'\nimport constellation1 from './constellation1.png'\nimport constellation2 from './constellation2.png'\nimport constellation3 from './constellation3.png'\nimport constellation4 from './constellation4.png'\nimport constellation5 from './constellation5.png'\nimport constellation6 from './constellation6.png'\nimport thumb from './Icon.png'\nimport thumbSide from './IconSide.png'\nimport passive1 from './passive1.png'\nimport passive2 from './passive2.png'\nimport passive3 from './passive3.png'\nimport skill from './skill.png'\n\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\n}\n\nexport { card, thumb, thumbSide, banner, talentAssets }\n","import { CharacterData } from 'pipeline'\nimport { input } from '../../../Formula'\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Zhongli\"\nconst elementKey: ElementKey = \"geo\"\nconst [tr, trm] = trans(\"char\", key)\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n      skillParam_gen.auto[a++],\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    stele: skillParam_gen.skill[s++],\n    resonance: skillParam_gen.skill[s++],\n    pressCD: skillParam_gen.skill[s++][0],\n    holdDMG: skillParam_gen.skill[s++],\n    shield: skillParam_gen.skill[s++],\n    shield_: skillParam_gen.skill[s++],\n    shileDuration: skillParam_gen.skill[s++][0],\n    holdCD: skillParam_gen.skill[s++][0],\n    enemyRes_: -0.2,\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    shield_: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    auto_: skillParam_gen.passive2[p2++][0],\n    skill_: skillParam_gen.passive2[p2++][0],\n    burst_: skillParam_gen.passive2[p2++][0],\n  },\n  constellation4: {\n    durationInc: skillParam_gen.constellation4[1]\n  },\n  constellation6: {\n    hp_: skillParam_gen.constellation6[1]\n  }\n} as const\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\n\nconst [condP1Path, condP1] = cond(key, \"p1\")\nconst nodeP1 = greaterEq(\n  input.asc, 1,\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\n)\n\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\nconst p4normalDmgInc = { ...p4AutoDmgInc }\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\n\nconst nodeC6 = greaterEq(input.constellation, 6,\n  customHealNode(prod(\n    percent(datamine.constellation6.hp_),\n    input.total.hp\n  )))\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n  },\n  passive2: {\n    p4normalDmgInc,\n    p4ChargedDmgInc,\n    p4PlungingDmgInc,\n    p4SKillDmgInc,\n    p4BurstDmgInc,\n  },\n  constellation6: {\n    heal: nodeC6\n  }\n}\n\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\n\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: nodeC3,\n    burst: nodeC5,\n  },\n  premod: {\n    // TODO: below should be for `total`\n    normal_dmgInc: p4normalDmgInc,\n    charged_dmgInc: p4ChargedDmgInc,\n    plunging_dmgInc: p4PlungingDmgInc,\n    skill_dmgInc: p4SKillDmgInc,\n    burst_dmgInc: p4BurstDmgInc,\n  },\n  teamBuff: {\n    premod: {\n      shield_: nodeP1,\n      ...nodesSkill,\n    }\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey,\n  weaponTypeKey: data_gen.weaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: ct.talentTemplate(\"auto\", [{\n        text: tr(\"auto.fields.normal\"),\n      }, {\n        fields: datamine.normal.hitArr.map((_, i) => ({\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n          textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\n        }))\n      }, {\n        text: tr(\"auto.fields.charged\"),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\n        }, {\n          text: tr(\"auto.skillParams.7\"),\n          value: datamine.charged.stamina,\n        }]\n      }, {\n        text: tr(`auto.fields.plunging`),\n      }, {\n        fields: [{\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n        }, {\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n        }]\n      }]),\n\n      skill: ct.talentTemplate(\"skill\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\n        }, {\n          node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\n        }, {\n          text: trm(\"skill.maxStele\"),\n          value: data => data.get(input.constellation).value >= 1 ? 2 : 1\n        }, {\n          text: st(\"pressCD\"),\n          value: datamine.skill.pressCD,\n          unit: \"s\"\n        }, {\n          node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\n        }, {\n          text: st(\"holdCD\"),\n          value: datamine.skill.holdCD,\n          unit: \"s\"\n        }, {\n          node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\n        }, {\n          text: tr(\"skill.skillParams.5\"),\n          value: datamine.skill.shileDuration,\n          unit: \"s\"\n        }]\n      }, ct.conditionalTemplate(\"skill\", {\n        value: condSkill,\n        path: condSkillPath,\n        teamBuff: true,\n        name: trm(\"skill.nearShield\"),\n        states: {\n          on: {\n            fields: Object.values(nodesSkill).map(node => ({ node }))\n          }\n        }\n      })]),\n\n      burst: ct.talentTemplate(\"burst\", [{\n        fields: [{\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\n        }, {\n          text: tr(\"burst.skillParams.1\"),\n          value: data =>\n            data.get(input.constellation).value < 4 ?\n              datamine.burst.duration[data.get(input.total.burstIndex).value] :\n              `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\n          fixed: 1,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.2\"),\n          value: datamine.burst.cd,\n          unit: \"s\"\n        }, {\n          text: tr(\"burst.skillParams.3\"),\n          value: datamine.burst.enerCost,\n        }]\n      }]),\n\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\n        value: condP1,\n        path: condP1Path,\n        teamBuff: true,\n        name: trm(\"p1cond\"),\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\n      })]),\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\n        fields: [{\n          node: p4normalDmgInc\n        }, {\n          node: p4ChargedDmgInc\n        }, {\n          node: p4PlungingDmgInc\n        }, {\n          node: p4SKillDmgInc\n        }, {\n          node: p4BurstDmgInc\n        }]\n      })]),\n      passive3: ct.talentTemplate(\"passive3\"),\n      constellation1: ct.talentTemplate(\"constellation1\"),\n      constellation2: ct.talentTemplate(\"constellation2\"),\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\n      constellation4: ct.talentTemplate(\"constellation4\"),\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\n        fields: [{\n          node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\n        }]\n      })]),\n    },\n  },\n}\nexport default new CharacterSheet(sheet, data)\n","import { CharacterKey } from '../../Types/consts'\nimport CharacterSheet from './CharacterSheet'\n\nimport Albedo from './Albedo'\nimport Aloy from './Aloy'\nimport Amber from './Amber'\nimport AratakiItto from './AratakiItto'\nimport Barbara from './Barbara'\nimport Beidou from './Beidou'\nimport Bennett from './Bennett'\nimport Chongyun from './Chongyun'\nimport Diluc from './Diluc'\nimport Diona from './Diona'\nimport Eula from './Eula'\nimport Fischl from './Fischl'\nimport Ganyu from './Ganyu'\nimport Gorou from './Gorou'\nimport HuTao from './HuTao'\nimport Jean from './Jean'\nimport KaedeharaKazuha from './KaedeharaKazuha'\nimport Kaeya from './Kaeya'\nimport KamisatoAyaka from './KamisatoAyaka'\nimport KamisatoAyato from './KamisatoAyato'\nimport Keqing from './Keqing'\nimport Klee from './Klee'\nimport KujouSara from './KujouSara'\nimport KukiShinobu from './KukiShinobu'\nimport Lisa from './Lisa'\nimport Mona from './Mona'\nimport Ningguang from './Ningguang'\nimport Noelle from './Noelle'\nimport Qiqi from './Qiqi'\nimport RaidenShogun from './RaidenShogun'\nimport Razor from './Razor'\nimport Rosaria from './Rosaria'\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\nimport Sayu from './Sayu'\nimport Shenhe from \"./Shenhe\"\nimport ShikanoinHeizou from \"./ShikanoinHeizou\"\nimport Sucrose from \"./Sucrose\"\nimport Tartaglia from './Tartaglia'\nimport Thoma from './Thoma'\nimport Traveler from './Traveler'\nimport Venti from './Venti'\nimport Xiangling from './Xiangling'\nimport Xiao from './Xiao'\nimport Xingqiu from './Xingqiu'\nimport Xinyan from './Xinyan'\nimport YaeMiko from './YaeMiko'\nimport Yanfei from './Yanfei'\nimport Yelan from './Yelan'\nimport Yoimiya from './Yoimiya'\nimport YunJin from './YunJin'\nimport Zhongli from './Zhongli'\n\nconst characters: Record<CharacterKey, CharacterSheet> = {\n  Albedo,\n  Aloy,\n  Amber,\n  AratakiItto,\n  Barbara,\n  Beidou,\n  Bennett,\n  Chongyun,\n  Diluc,\n  Diona,\n  Eula,\n  Fischl,\n  Ganyu,\n  Gorou,\n  HuTao,\n  Jean,\n  KaedeharaKazuha,\n  Kaeya,\n  KamisatoAyaka,\n  KamisatoAyato,\n  Keqing,\n  Klee,\n  KujouSara,\n  KukiShinobu,\n  Lisa,\n  Mona,\n  Ningguang,\n  Noelle,\n  Qiqi,\n  RaidenShogun,\n  Razor,\n  Rosaria,\n  SangonomiyaKokomi,\n  Sayu,\n  Shenhe,\n  ShikanoinHeizou,\n  Sucrose,\n  Tartaglia,\n  Thoma,\n  Traveler,\n  Venti,\n  Xiangling,\n  Xiao,\n  Xingqiu,\n  Xinyan,\n  YaeMiko,\n  Yanfei,\n  Yelan,\n  Yoimiya,\n  YunJin,\n  Zhongli\n} as const\nexport default characters\n"],"names":["talentAssets","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","skill","burst","passive1","passive2","passive3","data_gen","data_gen_src","key","trans","tr","trm","ct","charTemplates","weaponTypeKey","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skillDmg","blossomDmg","duration","cd","blossomCd","burstDmg","blossomAmt","enerCost","blossomDmgInc","hpThresh","eleMasInc","blossomEner","maxStacks","stackDuration","plunging_dmg_","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","input","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","prod","lookup","Object","fromEntries","range","map","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","dmgNode","entries","value","blossom","total","skill_dmg_","skillC3","burstC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","auto","talentTemplate","text","fields","_","node","infoMut","textSuffix","unit","sgt","conditionalTemplate","path","st","percent","states","belowHp","headerTemplate","fixed","skillInField","canShow","c6Crystallize","isoOnField","count","burstUsed","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","subscript","atk_","unequal","undefined","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","hit","ele","compareEq","constant","fieldsTemplate","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","variant","get","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","equalStr","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","tally","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","sum","infusion","nonOverridableSelf","values","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","healNodeTalent","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shieldElement","shieldNodeTalent","shield","baseDmg","dmgOneHit","dmgTwoHits","shieldNode","customDmgNode","customBonus","charged_dmg_","electro_enemyRes_","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","burstAtkRatio","burstAddlAtk","c1AtkRatio","c1AddlAtk","atkIncRatio","activeInAreaAtkDisp","condInAreaPath","condInArea","activeInArea","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","result","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc4","nodeAsc1Disp","nodeAsc1","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","hpThresh_","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","lower","higher","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","physical_dmg_","lightSwordAdditional","lightFallSwordNew","objectKeyMap","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","customHealNode","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","critRate_","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","condAfterBurstPath","condAfterBurst","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","heal","healNode","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","color","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","overridableSelf","eleKey","c2","c2p","c6","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sprint","sp","cutDmg","bloomDmg","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","c4","afterSprint","afterApplySprint","dmgArr","stateDuration","stackHpDmgInc","illusionDmg","illusionDuration","stacksGained","enerThres_","energyRestore","oppHpThres_","shunDmg_","extraStacks","stackThresh","atkSPD","extraStrikes","condInSkillPath","condInSkill","condSkillStacksPath","condSkillStacks","skillStacks_dmgInc","stacks","condBurstInAreaPath","condBurstInArea","burst_normal_dmg_Disp","burst_normal_dmg_","condC1OppHpPath","condC1OppHp","c1Shun_dmg_","c2_hp_","condC4AfterBurstPath","condC4AfterBurst","c4_atkSPD_","shunAddl","normal_dmgInc","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","x","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","pressDmg","ringHealHP_","ringHealFlat","ringDmg","singleDmg","maxDmgBase","maxDmgExtend","durationBase","durationExtend","heal_","emSkillHeal_","emSkillDmg_","skillDurInc","markDmg","em","a1Heal_","a4Skill_healInc","a4Skill_dmgInc","condC6TriggerPath","condC6Trigger","c6eleMas","ringHeal","healInc","totalDmg","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodesC4","allElements","gemDmg","n","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC2ChargeDec","nodeC4dmg","devotionShield","staminaChargedDec_","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","resolveStackNode","resolveInitialBonus_","resolveInfusedBonus_","burstResolve","mvArr","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","cdRed","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","electro_res_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonusDisp","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","isTeamBuff","nBonus_","cBonus_","sBonus_","p","heal_ratio_","c1","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c2SkillHeal","c2BurstHeal","c4AtkSpd_","c6Hydro_","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","burstC3","skillC5","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","declension_dmg_","conviction_dmg_","declension_duration","slugger_dmg","iris_dmg","atkSpd_","baseEnergy","addlEnergy","hsCritRate_","hsCritDmg_","stacksArr","condDeclensionStacksPath","condDeclensionStacks","totalStacks_dmg_","condSkillHitPath","condSkillHit","a4_eleMas","condTakeFieldPath","condTakeField","c1_atkSpd_","c6_skill_critRate_","c6_skill_critDMG_","skill_critRate_","skill_critDMG_","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","slice","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","p2Collapse_dmgInc","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","skillAssets","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","talentSheet","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","talents","anemo","geo","electro","anemoData","geoData","electroData","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","base","full7","reactions","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","one","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","customShieldNode","norm_shield","barb","resetChance","maxDuration","throwDmg","hp_Arr","baseDmg_","stackDmg_","maxDmg_","addlCharge","arrowDmg_","bonusHp_","maxHp_","charges","a1_hp_","condA4StacksPath","condA4Stacks","a4Stacks","a4Dmg_Disp","a4Dmg","condC4StacksPath","condC4Stacks","c4Stacks","c4Hp_","condC6ActivePath","condC6Active","c6Active","hitEle","arrowDmg","barbDmg","characterKey","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","a1Stacks","c1atk_","c2pyro_dmg_","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","toFixed","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Diluc","Diona","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","KukiShinobu","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Sucrose","Tartaglia","Thoma","Traveler","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yelan","Yoimiya","YunJin","Zhongli"],"sourceRoot":""}