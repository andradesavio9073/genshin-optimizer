{"version":3,"file":"static/js/328.fda17154.chunk.js","mappings":"kYAUaA,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,EAAkB,gBAAGE,EAAH,EAAGA,MAAH,MAAgB,CAC/DC,gBAAiBD,EAAME,QAAQC,QAAQC,KACvCC,WAAY,gBACZ,UAAW,CACTJ,gBAAiBD,EAAME,QAAQC,QAAQG,MAEzC,gBAAiB,CACfL,gBAAiBD,EAAME,QAAQC,QAAQG,MAEzC,iBAAkB,CAChBL,gBAAiBD,EAAME,QAAQC,QAAQG,UAIrCC,GAAUT,EAAAA,EAAAA,IAAOU,EAAAA,EAAPV,EAAe,kBAAgB,CAC7CG,gBAD6B,EAAGD,MACTE,QAAQC,QAAQC,KACvCK,QAAS,EACTC,SAAU,SACV,IAAO,CACLC,MAAO,OACPC,OAAQ,YAKL,SAASC,EAAT,GAA0I,IAA3FC,EAA0F,EAA1FA,SAAoEC,GAAsB,EAAhFC,cAAgF,EAAjEC,mBAAiE,EAA7CC,oBAA6C,aAC9I,OAAO,SAACX,GAAD,gBAASS,eAAa,EAACC,oBAAkB,EAACC,oBAAkB,GAAKH,GAAjE,aAAyED,KAGnE,SAASK,EAAT,GAAuG,IAAD,IAAzEC,MAAAA,OAAyE,MAAjE,EAAiE,EAA9DC,EAA8D,EAA9DA,SAA8D,IAApDC,SAAAA,OAAoD,aAAlCC,MAAAA,OAAkC,SAAhBR,GAAgB,YACnH,GAA4BS,EAAAA,EAAAA,UAASJ,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAAYC,EAAAA,EAAAA,UAAQ,kBAAMP,EAAQQ,WAAaC,WAAU,CAACT,IAC1DU,GAASC,EAAAA,EAAAA,cACb,WACEb,EAASI,GACTG,GAAS,KAEX,CAACP,EAAUI,EAAQG,IAEfO,GAAUD,EAAAA,EAAAA,cACd,WACEN,GAAS,KAEX,CAACA,KAEHQ,EAAAA,EAAAA,YAAU,kBAAMV,EAAUN,KAAQ,CAACA,EAAOM,IAC1C,IAAMW,GAAgBH,EAAAA,EAAAA,cAAY,SAAAI,GAAC,OAAIZ,EAAUG,EAAUS,EAAEC,OAAOnB,QAAU,KAAI,CAACM,EAAWG,IACxFW,GAAYN,EAAAA,EAAAA,cAAY,SAAAI,GAAC,MAAc,UAAVA,EAAEG,KAAmBR,MAAU,CAACA,IACnE,OAAO,SAACpC,GAAD,QACLuB,MAAQO,IAAYF,EAAU,GAAKA,EACnC,aAAW,eACXiB,KAAK,SACLC,WAAY,CAAEC,KAAMrB,EAAQ,GAAM,GAClCF,SAAUgB,EACVJ,OAAQA,EACRE,QAASA,EACTb,SAAUA,EACVuB,UAAWL,GACPzB,M,sHCvDR,IALoB,SAAC,GAAD,IAAG+B,EAAH,EAAGA,UAAc/B,GAAjB,mBAClB,SAAC,KAAD,gBAAkBgC,UAAU,OAAUhC,GAAtC,IAA6C+B,UAAWA,EAAxD,UACE,SAAC,IAAD,CAAKE,UAAU,OAAOC,GAAI,CAAEC,OAAQ,QAApC,UAA8C,SAAC,IAAD,CAAiBC,KAAMC,EAAAA,a,wVCK1D,SAASC,EAAT,GAAuE,IAAD,IAA5C/B,SAAAA,OAA4C,SAC3EgC,GAAMC,EAAAA,EAAAA,GAAe,kBAArBD,EACkBE,GAAmBC,EAAAA,EAAAA,YAAWC,EAAAA,GAAhDC,UAAalB,IACbmB,GAASH,EAAAA,EAAAA,YAAWI,EAAAA,GAApBD,KACR,GAAgEE,EAAAA,EAAAA,IAAgBN,GAAxDO,EAAxB,EAAQC,aAAgBD,YAAeE,EAAvC,EAAuCA,qBACjCC,GAAiBhC,EAAAA,EAAAA,cAAY,SAAC6B,GAAD,OAAwCE,EAAqB,CAAEF,YAAAA,MAAgB,CAACE,IAE7GE,GAAWrC,EAAAA,EAAAA,UAAQ,WACvB,IAAMqC,EAAsB,CAAC,MAAO,KAAM,MAAO,SAAU,YAAa,WAAY,QAAS,aACpD,aAArCP,EAAKQ,IAAIC,EAAAA,GAAAA,YAAkBjD,OAAsB+C,EAASG,KAAK,iBACnE,IAAMC,EAAUX,EAAKQ,IAAIC,EAAAA,GAAAA,SAAejD,MAExC,OADA+C,EAASG,KAAT,UAAiBC,EAAjB,UACOJ,IACN,CAACP,IAEEY,GAAgB1C,EAAAA,EAAAA,UAAQ,kBAAMqC,EAASM,QAAO,SAAAhC,GAAG,OAAMiC,OAAOC,KAAKZ,GAAqBa,MAAK,SAAAC,GAAC,OAAIA,IAAMpC,UAAO,CAAC0B,EAAUJ,IAC1He,GAAY5C,EAAAA,EAAAA,cAAY,SAAC6C,EAAMC,GAAP,OAAed,GAAe,kBAAKH,GAAN,cAAoBgB,EAAOC,OAAQ,CAACjB,EAAaG,IAC5G,OAAO,UAAC,IAAD,YACL,SAAC,IAAD,WACE,UAAC,IAAD,CAAajB,GAAI,CAAEgC,QAAS,OAAQC,IAAK,EAAGC,eAAgB,iBAA5D,WACE,SAAC,IAAD,UAAa7B,EAAb,2DACA,SAAC,IAAD,CAAa8B,OAAO,SAAC,IAAD,UAAa9B,EAAb,oEAGxB,UAAC,IAAD,CAAK2B,QAAQ,OAAOI,cAAc,SAASH,IAAK,GAAhD,UACGR,OAAOY,QAAQvB,GAAawB,KAAI,YAAqB,IAAD,eAAlBC,EAAkB,KAATR,EAAS,KACnD,OAAO,SAACS,EAAD,CAA8BD,QAASA,EAASrB,SAAUK,EAAeM,UAAWA,EAAWxD,SAAUA,EAAUF,MAAO4D,EAAKU,MAAO,kBACpI3B,EAAYyB,GACnBtB,GAAe,UAAKH,MAFMyB,OAK9B,SAACC,EAAD,CAAgBtB,SAAUK,EAAeM,UAAWA,EAAWxD,SAAUA,UAKxE,SAASmE,EAAT,GAEH,IAF6BD,EAE9B,EAF8BA,QAE9B,IAFuCrB,SAAAA,OAEvC,MAFkD,GAElD,MAFsD/C,MAAAA,OAEtD,MAF8D,EAE9D,EAFiEsE,EAEjE,EAFiEA,MAAOZ,EAExE,EAFwEA,UAExE,IAFmFxD,SAAAA,OAEnF,SACKqE,EAAmC,MAAzBC,EAAAA,GAAAA,KAAYJ,GACtBnE,GAAWa,EAAAA,EAAAA,cAAY,SAAA2D,GAAC,OAAIL,GAAWV,EAAUU,EAASK,KAAI,CAACf,EAAWU,IAChF,OAAO,UAAC,IAAD,CAAavC,GAAI,CAAEtC,MAAO,QAA1B,WACL,SAAC,IAAD,CACEyE,MAAOI,GAAU,SAAC,KAAD,CAAqBA,QAASA,IAAc,WAC7DlE,SAAUA,EACVwE,MAAON,EAAU,UAAY,YAH/B,SAKGrB,EAASoB,KAAI,SAAAR,GAAI,OAAI,SAAC,IAAD,CAAqBgB,QAAS,WAAa,OAALL,QAAK,IAALA,GAAAA,IAAWZ,EAAUC,EAAM3D,IAAjE,UAA2E,SAAC,KAAD,CAAqBoE,QAAST,KAA1FA,SAEvC,SAAC,KAAD,CAAqC9B,GAAI,CAAE+C,UAAW,GAAIC,SAAU,GAApE,UACE,SAAC,KAAD,CACE3E,UAAWkE,GAAWlE,EACtBC,MAAOoE,EACPvE,MAAOA,EACP8E,YAAY,aACZ7E,SAAUA,EACV4B,GAAI,CAAEkD,GAAI,GACVxD,WAAY,CAAEM,GAAI,CAAEmD,UAAW,UAC/BC,aAAcT,EAAAA,GAAAA,KAAYJ,SAG3BE,IAAS,SAAC,IAAD,CAAQI,MAAM,QAAQC,QAASL,EAAOpE,SAAUA,EAAhD,UAA0D,SAAC,IAAD,CAAiB6B,KAAMmD,EAAAA,a,sBC5E1F,SAASC,IACd,MAAO,CAAEC,QAAQ,G,ijBC0BbC,GAAiBC,EAAAA,EAAAA,OAAK,kBAAM,0DAgB5BC,EAAmB,IAAIC,IAAIC,EAAAA,GAElB,SAASC,EAAT,GAA+Q,IAAD,QAAtPC,EAAsP,EAAtPA,WAAYC,EAA0O,EAA1OA,YAAajB,EAA6N,EAA7NA,QAASkB,EAAoN,EAApNA,SAAoN,KAA1MC,wBAAAA,QAA0M,OAAhL,EAAgL,QAA7KC,UAAAA,QAA6K,OAAjKR,EAAiK,GAA/IS,GAA+I,EAA/IA,kBAA+I,KAA5HC,mBAAAA,QAA4H,gBAAhGC,OAAAA,QAAgG,gBAAhFC,WAAAA,QAAgF,gBAA5DC,SAAAA,QAA4D,WAA1CC,GAA0C,EAA1CA,aACzOnE,IAAMC,EAAAA,EAAAA,GAAe,CAAC,WAAY,OAAlCD,EACAoE,IAAajE,EAAAA,EAAAA,YAAWkE,EAAAA,GAAxBD,SACFE,IAAmBC,EAAAA,EAAAA,GAAYd,GAC/Be,IAAQC,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,IAAA,iBAAmBhB,QAAnB,IAAmBA,EAAAA,EAAeY,UAAlC,aAAkB,EAAmCK,QAAS,CAACjB,EAAaY,KAE/FM,IAAYlB,EAClB,IAAoCxF,EAAAA,EAAAA,WAAS,GAA7C,iBAAO2G,GAAP,MAAmBC,GAAnB,MACMC,IAAenG,EAAAA,EAAAA,cAAY,kBAAMkG,IAAc,KAAQ,CAACA,KACxDE,IAAepG,EAAAA,EAAAA,cAAY,kBAAMgG,IAAYE,IAAc,KAAO,CAACF,GAAUE,KAE7EG,IAAcrG,EAAAA,EAAAA,cAAY,SAAApB,GAAQ,OAAI,SAAC,IAAD,CAAgBiF,QAAS,kBAAMgB,IAAU,OAAIhB,QAAJ,IAAIA,OAAJ,EAAIA,EAAUgB,KAAa9D,GAAI,CAAEgD,SAAU,EAAGhB,QAAS,OAAQI,cAAe,UAAvH,SAAqIvE,MAA4B,CAACiF,EAASgB,IACjNyB,IAAmBtG,EAAAA,EAAAA,cAAY,SAAApB,GAAQ,OAAI,SAAC,IAAD,CAAKmC,GAAI,CAAEgD,SAAU,EAAGhB,QAAS,OAAQI,cAAe,UAAxD,SAAsEvE,MAAiB,IAElI2H,GAAG,OAAGzB,QAAH,IAAGA,EAAAA,EAAeY,GAC3B,IAAKa,GAAK,OAAO,KAEjB,IAAQC,GAAoFD,GAApFC,GAAIC,GAAgFF,GAAhFE,KAAMC,GAA0EH,GAA1EG,QAASC,GAAiEJ,GAAjEI,OAAQC,GAAyDL,GAAzDK,MAAOC,GAAkDN,GAAlDM,YAAaC,GAAqCP,GAArCO,SAAUC,GAA2BR,GAA3BQ,QAAjE,GAA4FR,GAAlBS,SAAAA,QAA1E,OAAqF,GAArF,GACMC,GAAgBC,KAAKC,IAAID,KAAKpE,IAAIkC,GAAkC,EAAT2B,IAAaC,IACxEQ,GAAe1D,EAAAA,GAAAA,KAAYmD,IAC3BQ,GAAe,QAAUH,KAAKI,MAAMJ,KAAKC,IAAIP,GAAO,GAAK,GAAK,GACpE,GAA6CW,EAAAA,EAAAA,sBAA+BhB,GAAKtB,IAAzEuC,GAAR,GAAQA,kBAAmBC,GAA3B,GAA2BA,cACrBC,GAAkC,IAAlBD,GAChBE,GAAQ,OAAG/B,SAAH,IAAGA,QAAH,EAAGA,GAAOgC,YAAYlB,IAC9BmB,GAAQ,OAAGjC,SAAH,IAAGA,QAAH,EAAGA,GAAOkC,YAAYpB,IAC9BqB,GAAkBF,KAAY,SAAC,IAAD,CAAa3E,OAAO,UAAC,IAAD,YACtD,SAAC,EAAA8E,SAAD,CAAUC,UAAU,SAAC,IAAD,CAAUC,QAAQ,OAAOzJ,MAAO,MAApD,UAA6D,SAAC,IAAD,CAAYyJ,QAAQ,KAApB,SAA0BP,QACvF,SAAC,IAAD,UAAaE,UAETM,GAAU,OAAGvC,SAAH,IAAGA,QAAH,EAAGA,GAAOuC,WACpBC,GAAiBxC,IAASuC,KAAc,SAAC,IAAD,CAAajF,OACzD,0BACGV,OAAOC,KAAK0F,IAAY9E,KAAI,SAAAgF,GAAS,OAAI,6BACxC,SAAC,IAAD,CAAYH,QAAQ,KAApB,UAAyB,SAAC,IAAD,CAAStE,MAAM,UAAf,SAA0BxC,GAAE,wBAAyB,CAAEkH,OAAQD,SACxF,SAAC,IAAD,UAAazC,GAAM2C,cAAcF,OAFkBA,UAMzD,OAAO,UAAC,EAAAL,SAAD,CAAUC,UAAU,SAAC,IAAD,CAAUC,QAAQ,cAAcnH,GAAI,CAAEtC,MAAO,OAAQC,OAAQ,OAAQ8J,UAAW,OAApG,UACJpD,KAAU,SAAC,EAAA4C,SAAD,CAAUC,UAAU,EAApB,UACT,SAAC1D,EAAD,CACEkE,iBAAkBxC,GAAapB,EAAa,GAC5C6D,WAAYvC,GACZhB,mBAAoBA,QAGxB,UAAC,IAAD,CAAWpE,GAAI,CAAErC,OAAQ,OAAQqE,QAAS,OAAQI,cAAe,UAAjE,WACE,UAAC,IAAD,CAAoBwF,YAAa9E,EAAS+E,QAASvC,GAAawC,aAAcvC,GAA9E,WACE,UAAC,IAAD,CAAK1F,UAAS,eAAU+F,GAAV,QAAwB5F,GAAI,CAAE+H,SAAU,WAAYrK,MAAO,QAAzE,WACIoF,IAAW,SAAC,IAAD,CAAYD,MAAM,UAAUxE,UAAW4G,GAAUnC,QAAS,kBAAM2B,GAASuD,UAAU,CAAEtC,MAAOA,IAAQD,KAAKzF,GAAI,CAAE+H,SAAU,WAAYE,MAAO,EAAGC,OAAQ,EAAGC,OAAQ,GAAlK,SACVzC,IAAO,SAAC,IAAD,KAAW,SAAC,IAAD,OAErB,UAAC,IAAD,CAAK1F,GAAI,CAAEoI,GAAI,EAAGlF,GAAI,EAAG6E,SAAU,WAAYI,OAAQ,GAAvD,WAEE,UAAC,IAAD,CAAKpI,UAAU,MAAMC,GAAI,CAAEgC,QAAS,OAAQqG,WAAY,SAAUpG,IAAK,EAAGqG,GAAI,GAA9E,WACE,SAAC,IAAD,CAAMC,KAAK,QAAQC,OAAO,wCAAc3C,MAAmBhD,MAAOyD,MAChEM,KAAY,SAAC,IAAD,CAAUO,QAAQ,OAAOzJ,MAAO,MAC7CkJ,KAAY,SAAC,IAAD,CAAY6B,QAAM,EAACzI,GAAI,CAAEmD,UAAW,SAAUnG,gBAAiB,yBAA0B0L,aAAc,MAAOxF,GAAI,GAAlH,UAAuH,4BAAS0D,QAC3II,KAAmB,SAAC,IAAD,CAAUtJ,MAAO,KACrCsJ,OAEH,SAAC,IAAD,CAAYnE,MAAM,iBAAiBsE,QAAQ,QAA3C,UACE,SAAC,KAAD,CAAkBxB,QAASA,QAE7B,SAAC,IAAD,CAAYwB,QAAQ,KAAKtE,MAAK,UAAKF,EAAAA,GAAAA,WAAkBmD,IAAvB,SAA9B,UACE,4BAAO6C,EAAAA,EAAS7C,IAAhB,IAA+BnD,EAAAA,GAAAA,IAAWmD,UAE5C,SAAC,IAAD,CAAYqB,QAAQ,KAApB,UACE,6BACE,UAAC,IAAD,CAAWtE,MAAOqD,KAAkBL,GAAQ,eAAY+C,EAAxD,WAAoEC,EAAAA,EAAAA,IAAgB,UAACrC,EAAAA,EAAAA,cAAuBV,GAAaF,GAAQM,WAA7C,QAA+D,EAAGvD,EAAAA,GAAAA,KAAYmD,KAAeO,WAGrL,SAAC,IAAD,CAAOyC,MAAOlD,GAAQmD,SAAO,QAG/B,SAAC,IAAD,CAAK/I,GAAI,CAAErC,OAAQ,OAAQoK,SAAU,WAAYE,MAAO,EAAGe,IAAK,GAAhE,UACE,SAAC,IAAD,CACEjJ,UAAU,MACVkJ,IAAG,iBAAEpE,SAAF,IAAEA,QAAF,EAAEA,GAAOqE,UAAUvD,WAAnB,QAA+B,GAClCjI,MAAM,OACNC,OAAO,OACPqC,GAAI,CAAE1B,MAAO,iBAInB,UAAC,IAAD,CAAa0B,GAAI,CAAEgD,SAAU,EAAGhB,QAAS,OAAQI,cAAe,SAAUgG,GAAI,EAAGe,GAAI,EAAGzL,MAAO,QAA/F,UACGqI,GAASzD,KAAI,SAAC8G,GAAD,OAA0B,SAACC,EAAD,CAA+BD,KAAMA,EAAMlF,UAAWA,GAAW0B,OAAQA,IAApDwD,EAAK5J,SAClE,UAAC,IAAD,CAAKQ,GAAI,CAAEgC,QAAS,OAAQsH,GAAI,GAAhC,WACE,SAAC,IAAD,CAAYzG,MAAM,iBAAiB9C,UAAU,OAAOoH,QAAQ,UAAUnH,GAAI,CAAEgD,SAAU,GAAtF,SAA4F3C,GAA5F,kDACA,SAAC,IAAD,CAAclC,MAAOsI,GAAmBL,IAAK,IAAKmD,MAAO5C,QAE1DF,KAAsBC,KAAiB,UAAC,IAAD,CAAK1G,GAAI,CAAEgC,QAAS,OAAQsG,GAAI,GAAhC,WACtC,SAAC,IAAD,CAAYzF,MAAM,iBAAiB9C,UAAU,OAAOoH,QAAQ,UAAUnH,GAAI,CAAEgD,SAAU,GAAtF,SAA4F3C,GAA5F,kDACA,SAAC,IAAD,CAAclC,MAAOuI,GAAeN,IAAK,IAAKmD,MAAO5C,SAEvD,SAAC,IAAD,CAAK3D,SAAU,IACdmB,KAAqB,+CAA6D,KAAtCqF,EAAAA,EAAAA,GAAYhE,GAAKrB,KAA0BsF,QAAQ,GAA1E,QACtB,UAAC,IAAD,CAAY5G,MAAM,eAAlB,2BAAkCgC,SAAlC,IAAkCA,QAAlC,EAAkCA,GAAO6E,YAAzC,QAAiD,eAAjD,IAAkErC,aAGtE,UAAC,IAAD,CAAKrH,GAAI,CAAE2J,EAAG,EAAG3H,QAAS,OAAQC,IAAK,EAAGC,eAAgB,gBAAiBmG,WAAY,UAAvF,UACGpD,IAAYV,IACT,SAAC,IAAD,CAAuBvE,GAAI,CAAEgD,SAAU,GAAKuF,KAAK,QAAQqB,aAAW,EACpEC,aAAa,SAAC,IAAD,IAAoBC,YAAazJ,GAAE,gBAChDlC,MAAO8H,GAAU7H,SAnGP,SAAC2L,GAAD,OAAgCtF,GAASuF,eAAelG,EAAaiG,OAoG/E,SAAC,IAAD,CAAc9D,SAAUA,KAC3BhB,KAAY,UAAC,IAAD,CAAajF,GAAI,CAAErC,OAAQ,QAA3B,UACV0G,KAAU,SAAC,IAAD,CAASlC,OAAO,SAAC,IAAD,UAAa9B,GAAb,qCAA6CP,UAAU,MAAMmK,OAAK,EAAlF,UACT,SAAC,IAAD,CAAQpH,MAAM,OAAO0F,KAAK,QAAQzF,QAASuC,GAA3C,UACE,SAAC,IAAD,CAAiBnF,KAAMgK,EAAAA,IAAQrK,UAAU,cAG5CyE,KAAc,SAAC,IAAD,CAASnC,OAAO,UAAC,IAAD,YAC7B,SAAC,IAAD,UAAa9B,GAAb,oDACA,SAAC,IAAD,WAAY,SAAC,IAAD,CAAWwC,MAAOmD,GAAU,QAAU,UAAtC,SAAkD3F,GAAE,YAAD,OAAa2F,GAAU,WAAa,oBAC7FlG,UAAU,MAAMmK,OAAK,EAHd,UAIb,SAAC,IAAD,CAAQnH,QAAS,kBAAM2B,GAASuD,UAAU,CAAEhC,SAAUA,IAAWP,KAAK5C,MAAOmD,GAAU,QAAU,UAAWuC,KAAK,QAAjH,UACE,SAAC,IAAD,CAAiBrI,KAAM8F,GAAUmE,EAAAA,IAAQC,EAAAA,IAAavK,UAAU,gBAGjEmE,IAAY,SAAC,IAAD,CAAQnB,MAAM,QAAQ0F,KAAK,QAAQzF,QAAS,kBAAMkB,EAASyB,KAAKpH,SAAUqH,GAA1E,UACb,SAAC,IAAD,CAAiBxF,KAAMmD,EAAAA,IAAYxD,UAAU,YAE9C2E,eAMX,SAAS6E,EAAT,GAA4H,IAAD,MAAjGD,EAAiG,EAAjGA,KAAMlF,EAA2F,EAA3FA,UAAW0B,EAAgF,EAAhFA,OACzC,IAAKwD,EAAKjL,MAAO,OAAO,KACxB,IAAMkM,EAAQ,oBAAGjB,EAAKkB,aAAR,aAAG,EAAYC,cAAf,QAAyB,EACjCC,EAAUpB,EAAK5J,IAAMgH,EAAAA,EAAAA,iBAA0B4C,EAAK5J,KAAO,EAC3DiL,EAAWrB,EAAK5J,IAAMgH,EAAAA,EAAAA,mBAA4B4C,EAAK5J,IAAKoG,GAAU,GACtE8E,EAAa,EAAID,EAASF,OAC1BI,EAAS,eAAUC,EAAAA,EAAAA,IAAMP,EAAU,EAAG,IACtCQ,EAAU,UAAGzB,EAAKyB,kBAAR,QAAsB,EAChCC,GAAaC,EAAAA,EAAAA,IAAQ,GAAOF,EAAU,IAAgB,IACtDG,EAAWrI,EAAAA,GAAAA,OAAcyG,EAAK5J,KAC9ByL,EAAOtI,EAAAA,GAAAA,KAAYyG,EAAK5J,KACxB0L,EAAW9B,EAAK5J,KAAO0E,EAAUiH,IAAI/B,EAAK5J,KAChD,OAAQ,UAAC,IAAD,CAAKwC,QAAQ,OAAOC,IAAK,EAAGmJ,aAAa,SAAzC,WACN,UAAC,IAAD,CAAYpL,GAAI,CAAEgD,SAAU,GAAKH,MAAQwH,EAAQ,UAAMM,EAAN,SAAyB,aAAsB5K,UAAU,OAA1G,UAAkH4I,EAAAA,EAASS,EAAK5J,KAAhI,IAAuIwL,EAAvI,YAAqJnC,EAAAA,EAAAA,IAAiBO,EAAKjL,MAAOwE,EAAAA,GAAAA,KAAYyG,EAAK5J,OAAnM,OAA2MyL,MAC1MC,IAAY,SAAC,IAAD,CAAKlJ,QAAQ,OAAOC,IAAK,IAAMtE,OAAO,QAAtC,SACVyL,EAAKkB,MAAMe,OAAO/I,KAAI,SAACgJ,EAAGC,GAAJ,OAAU,SAACC,EAAD,CAA+BrN,MAAO,IAAMmN,EAAId,EAAS3H,MAAK,eAAS+H,EAAAA,EAAAA,IAAMF,EAAaD,EAASgB,QAAQH,GAAI,EAAG,GAApD,UAA9D,UAAsBC,GAAtB,OAA0BD,UAE7D,SAAC,IAAD,CAAYtL,GAAI,CAAE0L,QAASZ,EAAYa,SAAU,GAAIxI,UAAW,SAAhE,SAA4E+H,EAAQ,UAAML,EAAWpB,UAAjB,KAAgC,SAGjH,SAAS+B,EAAT,GAAsD,IAAD,IAA7B3I,MAAAA,OAA6B,MAArB,MAAqB,MAAd1E,MAAAA,OAAc,MAAN,GAAM,EAC1D,OAAO,SAAC,IAAD,CAAK6B,GAAI,CAAEtC,MAAO,EAAGC,OAAQ,OAAQiO,QAAS/I,EAAOpF,SAAU,SAAUiL,aAAc,EAAG1G,QAAS,gBAAnG,UACL,SAAC,IAAD,CAAKhC,GAAI,CAAEtC,MAAO,GAAIC,OAAO,GAAD,OAAK,KAAMiN,EAAAA,EAAAA,IAAMzM,EAAO,EAAG,KAA3B,KAAoCyN,QAAS,c,0OC/LhEC,EAAmB,CAAC,SAAU,QAAS,YAAa,aAAc,cAAe,eACjFC,EAAqB,CAAC,eAoB5B,SAASC,IACd,MAAO,CACLC,WAAY,GACZpG,QAAO,OAAKqG,EAAAA,IACZC,SAAU,EACVC,UAAW,GACXC,UAAS,OAAKC,EAAAA,IACdC,aAAc,GACdvG,SAAU,GACVE,SAAU,GACVsG,UAAW,CAAC,WAAY,YACxBC,OAAQ,CAAC,SAAU,aAGhB,IAAMC,EAA4B,iBAA2B,CAClEC,aAAcX,IACdY,WAAW,EACXC,SAAUf,EAAiB,KAGtB,SAASgB,EAAoBC,EAA+B3I,GACjE,MAAO,CACLyB,OAAQ,CACNmH,SAAU,SAAAvH,GAAG,uBAAIA,EAAII,cAAR,QAAkB,GAC/BoH,WAAY,SAEdnH,MAAO,CACLkH,SAAU,SAAAvH,GAAG,uBAAIA,EAAIK,aAAR,QAAiB,GAC9BmH,WAAY,aAEdC,UAAW,CACTF,SAAU,SAAAvH,GAAG,uBAAIA,EAAIR,cAAR,QAAkB,IAC/BgI,WAAY,SAEdnC,WAAY,CACVkC,SAAU,SAAAvH,GAAG,OAAIgB,EAAAA,EAAAA,sBAA+BhB,EAAKsH,GAAcrG,oBAErEyG,YAAa,CACXH,SAAU,SAAAvH,GAAG,OAAIgB,EAAAA,EAAAA,sBAA+BhB,EAAKsH,GAAcpG,gBAErE8C,YAAa,CACXuD,SAAU,SAAAvH,GACR,IAAK/D,OAAOC,KAAKyC,GAAmBoG,OAAQ,OAAO,EACnD,IAAM4C,EAAQ3H,EAAYgE,YAC1B,YAAaZ,IAATuE,GAA2B3D,EAAAA,EAAAA,GAAYhE,EAAKrB,GACzCgJ,KAKR,SAASC,IACd,MAAO,CACLb,UAAW,SAAC/G,EAAKhE,GACf,SAAKA,EAAO6L,SAAS,cAAgB7H,EAAIQ,aACpCxE,EAAO6L,SAAS,aAAe7H,EAAIQ,UAG1CwG,OAAQ,SAAChH,EAAKhE,GACZ,SAAKA,EAAO6L,SAAS,WAAa7H,EAAIE,UACjClE,EAAO6L,SAAS,cAAgB7H,EAAIE,OAG3CO,SAAU,SAACT,EAAKhE,GACd,OAAKA,IACU,cAAXA,IAA2BgE,EAAIS,aACpB,aAAXzE,IAAyBgE,EAAIS,WAC7BzE,IAAWgE,EAAIS,YAGrB+F,WAAY,SAACxG,EAAKhE,GAAN,OAAiBA,EAAO+I,QAAS/I,EAAO6L,SAAS7H,EAAIR,SACjEoH,SAAU,SAAC5G,EAAKhE,GAAN,OAAiBA,EAAO6L,SAAS7H,EAAIG,UAC/C2G,aAAc,SAAC9G,EAAKhE,GAAN,OAAiBA,EAAO+I,QAAS/I,EAAO6L,SAAS7H,EAAIM,cACnEoG,SAAU,SAAC1G,EAAKhE,GAAN,OAAiBA,GAAUgE,EAAIK,OACzCsG,UAAW,SAAC3G,EAAKhE,GAAN,OAAiBA,GAAUgE,EAAIK,OAC1CD,OAAQ,SAACJ,EAAKhE,GAAN,OAAiBA,EAAO6L,SAAS7H,EAAII,SAC7CG,SAAU,SAACP,EAAKhE,GAAY,IAAD,YACDA,GADC,yBACd8L,EADc,QAEvB,GAAIA,IAAc9H,EAAIO,SAASpE,MAAK,SAAA4L,GAAO,OAAIA,EAAQ/N,MAAQ8N,KAAY,MAAM,CAAN,GAAO,IADpF,2BACE,8CAFuB,8BAGzB,OAAO,M,sGCtGE,SAASE,EAAT,GAIX,IAJmCrP,EAIpC,EAJoCA,MAIpC,IAJ2CiI,IAAAA,OAI3C,MAJiD,EAIjD,EAJoDmD,EAIpD,EAJoDA,MAKrD,EAA0C,kBAAVpL,EAC9B,CAAC,OAAD,QAAQyM,EAAAA,EAAAA,IAAMzE,KAAKI,MAAOpI,EAAQiI,EAAO,IAAM,EAAG,EAAG,IAAMjI,EAAMsL,UAAY,KAAO,CAAC,YAAatL,GADpG,eAAKsP,EAAL,KAAiBC,EAAjB,KAGA,OADKnE,IAAOkE,EAAa,UAClB,SAAC,IAAD,CAAS5K,MAAO4K,EAAhB,SAA8BC,M,gJCiBjCC,EAAa,CAAC,EAAG,EAAG,GAOpBC,EAA0C,CAC9CC,GAAI,EAAGC,IAAK,EAAGC,IAAK,EACpBC,IAAK,EAAGC,KAAM,EAAGC,KAAM,EAAGC,OAAQ,EAAGC,UAAW,EAChDC,UAAW,EAAGC,SAAU,GAQpBC,EAA+F,GACrG,SAASC,EAAmBC,EAAwBtB,EAAmCuB,EAAiBC,GACtG,GAAsB,IAAlBF,EAAOlE,OAKX,cAAgBoD,EAAhB,gBAAK,IAAMpC,EAAC,KACN4B,EAAK5B,GAAK,GACZiD,EAAmB,GAAD,eAAKC,GAAL,CAAalD,KAAb,QAAC,UAAqB4B,GAAtB,cAA6B5B,EAAI4B,EAAK5B,GAAKA,IAAKmD,EAAUnD,EAAGoD,EAAUxB,EAAK5B,GAAKmD,QANrGE,EAAAA,EAAAA,IAAkBL,EAAYE,EAAeE,GAQjDH,EAAmB,CAAC,GAAI,CAAE,EAAG,EAAG,EAAG,GAAI,EAAG,IAAM,GAAI,GAEpDA,EAAmB,CAAC,GAAI,CAAE,EAAG,EAAG,EAAG,GAAI,EAAG,IAAM,GAAI,GACpDA,EAAmB,CAAC,GAAI,CAAE,EAAG,EAAG,EAAG,GAAI,EAAG,IAAM,GAAI,GACpDA,EAAmB,CAAC,GAAI,CAAE,EAAG,EAAG,EAAG,GAAI,EAAG,IAAM,GAAI,GA0BpD,IAnBA,IAAMK,EAAMC,MAAM,GAAGC,KAAK,GAAGzM,KAAI,SAAC0M,EAAGC,GAGnC,IAFA,IAAMC,EAAS,CAAC,GACZC,EAAI,EAAGhR,EAAQ,IACVgR,GAAKF,GACZ9Q,GAAS8Q,EAAIE,EAAI,EACjBhR,GAASgR,EACTD,EAAO7N,KAAKlD,GAGd,OAAO+Q,KASHE,EAAU,CAAC,CAAC,IAAlB,aAEE,IAAMC,EAAOD,EAAQA,EAAQ7E,OAAS,GAChC+E,EAAOR,MAAMO,EAAK9E,OAAS,GAAGwE,KAAK,GACzCM,EAAKE,SAAQ,SAACpR,EAAOoN,GACnB,cAAgB,CAAC,EAAG,EAAG,EAAG,GAA1B,eAA8B,CAC5B+D,EAAK/D,EADK,OACKpN,MAInBiR,EAAQ/N,KAAKiO,EAAKhN,KAAI,SAAAkN,GAAC,OAAIA,EAAI,OAT1BJ,EAAQ7E,OAAS,GAAI,IAW5B,IADC,iBACI,IAAMkF,EAAK,KACVC,EAAOD,EAAME,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACtCJ,EAAMF,SAAQ,SAACC,EAAGjE,EAAGkE,GACnBA,EAAMlE,GAAKmE,EACXA,GAAQF,MAJZ,MAAoBJ,EAApB,eAA8B,IAS9B,SAAS5F,EAAYsG,EAAqBC,GACxC,GAAID,EAASlK,QAAU,EAAG,OAAOoK,IAEjC,IAAQpK,EAA4BkK,EAA5BlK,OAAQC,EAAoBiK,EAApBjK,MAAOE,EAAa+J,EAAb/J,SAIjBzG,GAAM,UAAQyQ,GAAWE,EAAW,IAAItM,IAAIlC,OAAOC,KAAKpC,IAC1D4Q,EAAiB,EAEb1Q,EAAMsQ,EAAShK,YACrB,GAAItG,KAAOF,EAAQ,CACjB,IAAM6Q,EAAoB,EAATvK,EAEjB,GADyBwK,EAAsBxK,GAAQpG,GAAK2Q,GACrC7Q,EAAOE,GAAO,OAAO,SAErCF,EAAOE,GACdyQ,EAASI,OAAO7Q,GAjBuE,gBAoB9DuG,GApB8D,IAoB3F,2BAAuC,CAAC,IAAD,UAA1BvG,EAA0B,EAA1BA,IAAKrB,EAAqB,EAArBA,MACZqB,EACEyQ,EAAS9E,IAAI3L,KACfyQ,EAASI,OAAO7Q,GACZF,EAAOE,GAAQrB,EACjBmB,EAAOE,IAASrB,SACNmB,EAAOE,IAEhB0Q,GAAkB,GA5BgE,8BAgC3F,GAFAA,GAAkB,EAAInK,EAASwE,OAE3B0F,EAAS1H,KAAO2H,GAAkBzO,OAAOC,KAAKpC,GAAQiL,OAAS,EAAG,OAAO,EAK7E,IAHA,IAAM+F,EAAkB9J,EAAAA,EAAAA,eAAwBX,EAAOD,GAAUsK,EAGjE,MAA2BzO,OAAOY,QAAQ/C,GAA1C,gBAAK,sBAAOE,EAAP,KAAYrB,EAAZ,KACHmB,EAAOE,GAAO2G,KAAKC,IAAID,KAAKoK,KAAK,GAAKpS,EAAQqI,EAAAA,EAAAA,iBAA0BhH,EAAKoG,IAAU,GAEzF,IAAI4K,EAAmB,EACjBC,EAAgBhP,OAAOY,QAAQ/C,GAAQgD,KAAI,YAAoB,IAAD,eAAjB9C,EAAiB,KAAZF,EAAY,KAC5DoR,EAAST,EAAS9E,IAAI3L,GAAO,EAAI,EACjCmR,EAAaxK,KAAKoK,KAAKjR,EAAS,IAAMoR,EAE5C,OADAF,GAAoBG,EACb,CAAErR,OAAAA,EAAQoR,OAAAA,EAAQC,WAAAA,MACxBC,UAEH,GAAIJ,EAAmBF,EAAiB,OAAO,EA2B/C,IAAIpB,GAAM,UAAMoB,EAAkB,GAAKO,EAAyBP,EAAkBE,EAsClF,OAlCAC,EAAclB,SAAQ,WAAiCuB,GAGrD,IAHsE,IA0CvDC,EAAW9B,EAAW+B,EA1Cd1R,EAA8C,EAA9CA,OAAQoR,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,WACjCrB,EAAsB,GAEnBhF,EAAQqG,EAAYrG,GAASqG,EAAaE,EAAwBvG,IASzE,IALA,IAAM2G,EAAQ3R,EAAS,GAAKgL,EAAQoG,GAG9BQ,EAAUD,EAAQ,EAAI7B,EAAQ9E,EAAQoG,GAAQO,GAAS,EAE7D,MAAwCxP,OAAOY,QAAQ6M,GAAvD,eAAgE,CAAC,IAAD,EAA3D,kBAAOiC,EAAP,KAAmB3H,EAAnB,KACG4H,EAAYrS,SAASoS,GAC3B,KAAIC,EAAY9G,GAAhB,CAQA,IAAM+G,GAoBgBpC,EApBc3E,EAoBH0G,EApBU,EAAIF,EAqB9CjC,EADUkC,EApBcK,GAqBjBnC,GAAK9I,KAAKmL,IAAIN,EAAI,EAAGD,EAAI9B,GAAK9I,KAAKmL,IAAIN,EAAGD,IApB5CQ,EAAQH,EAAY9G,EAG1BgF,EAAKiC,IAAS,UAACjC,EAAKiC,UAAN,QAAgB,GAAK/H,EAAc0H,EAASG,GAG9DnC,EAASI,KAkBb,SAA+BkC,EAAuBzL,EAAsBkK,GAA4B,IAAD,IAM/FwB,EAAa,UAAG7D,EAAQ4D,UAAX,QAAwB,EACvCE,EAAe,EAEbC,EAAoB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GACvCC,EAAwBrD,EAAWkD,GAV8D,UAW/E1L,GAX+E,IAWrG,2BAAgC,CAAC,IAApBvG,EAAmB,QAAnBA,IACX,GAAIA,EAAK,CACP,IAAMqS,EAAQjE,EAAQpO,GACtBoS,EAAmBA,EAAiBC,GACpCF,EAAkBE,IAAU,IAfqE,8BAkBjGJ,IAAeE,EAAkBF,IAAkB,GAEvD,IApBqG,EAoB/FK,EAAgB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GApB8D,UAqBnF7B,GArBmF,IAqBrG,2BAA4B,KAAjBzQ,EAAiB,QAAAsS,EAAclE,EAAQpO,KAAS,GArB0C,8BAuBrG,IAAIuS,EAAQ,GACZC,EAAAA,EAAAA,IAAYJ,EAAkB,IAAI,SAAAK,GAAG,MAAmB,kBAARA,KAAkB,SAAC9E,EAAc+E,GAC/EH,GAAS5E,EACT,IAFkG,EAE5FgF,EAAe,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAF4D,UAGhFD,GAHgF,IAGlG,2BAAwB,CAAAC,EAAA,UAAqB,GAHqD,8BAKlG,IALkG,EAK9FC,EAAMjF,EALwF,UAMlFQ,GANkF,IAMlG,2BAA4B,CAAC,IAAlBpC,EAAiB,QACpBoD,EAAUwD,EAAa5G,GAAI0E,EAAW6B,EAAcvG,GAC1D,GAAIoD,EAAUsB,EAAU,OACxBmC,GAAOvD,EAAIF,GAASsB,IAT4E,8BAYlGyB,GAAgBU,KApCmF,gBAuCrFzE,GAvCqF,IAuCrG,2BACE,KADSpC,EACT,QAAAmG,GAAgB7C,EAAI8C,EAAkBpG,IAAIuG,EAAcvG,KAxC2C,8BAyCrG,OAAOmG,EAAeK,EAtDfM,CAAsBvC,EAAShK,YAAaC,EAAUkK,GAAYxO,OAAO6Q,OAAOpD,GAAQS,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,O,2FCzNvG,SAASjL,IAAkD,IAAtC2N,EAAqC,uDAAJ,GACnE,GAAqB/R,EAAAA,EAAAA,YAAWkE,EAAAA,GAAxBD,EAAR,EAAQA,SACR,GAAgClG,EAAAA,EAAAA,UAASkG,EAAS+N,QAAQD,IAA1D,eAAOzC,EAAP,KAAiB2C,EAAjB,KAKA,OAJAtT,EAAAA,EAAAA,YAAU,kBAAMsT,EAAYhO,EAAS+N,QAAQD,MAAc,CAAC9N,EAAU8N,KACtEpT,EAAAA,EAAAA,YAAU,kBACRoT,EAAa9N,EAASiO,UAAUH,EAAYE,QAAe7J,IAC3D,CAAC2J,EAAYE,EAAahO,IACrBqL","sources":["Components/CustomNumberInput.tsx","Components/InfoTooltip.tsx","Components/StatFilterCard.tsx","GlobalSettings.tsx","PageArtifact/ArtifactCard.tsx","PageArtifact/ArtifactSort.ts","PageArtifact/PercentBadge.tsx","PageArtifact/RollProbability.ts","ReactHooks/useArtifact.tsx"],"sourcesContent":["import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\ntype props = Omit<InputProps, \"onChange\"> & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\n\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  transition: \"all 0.5s ease\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-focused\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n}))\n\nconst Wrapper = styled(Button)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  padding: 0,\n  overflow: \"hidden\",\n  \"div\": {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}))\n\n// wrap the Input with this when using the input in a buttongroup\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\n}\n\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\n  const [number, setNumber] = useState(value)\n  const [focused, setFocus] = useState(false)\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\n  const onBlur = useCallback(\n    () => {\n      onChange(number)\n      setFocus(false)\n    },\n    [onChange, number, setFocus],\n  )\n  const onFocus = useCallback(\n    () => {\n      setFocus(true)\n    },\n    [setFocus],\n  )\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\n  return <StyledInputBase\n    value={(focused && !number) ? \"\" : number}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    inputProps={{ step: float ? 0.1 : 1 }}\n    onChange={onInputChange}\n    onBlur={onBlur}\n    onFocus={onFocus}\n    disabled={disabled}\n    onKeyDown={onKeyDOwn}\n    {...props}\n  />\n}\n","\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, TooltipProps } from \"@mui/material\";\nimport BootstrapTooltip from \"./BootstrapTooltip\";\n\ninterface ITooltipProps extends Omit<TooltipProps, \"children\"> {\n  className?: string,\n}\nconst InfoTooltip = ({ className, ...props }: ITooltipProps) =>\n  <BootstrapTooltip placement=\"top\" {...props} className={className}>\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faInfoCircle} /></Box>\n  </BootstrapTooltip>\n\nexport default InfoTooltip\n","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, ButtonGroup, CardContent, MenuItem, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React, { useCallback, useContext, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CharacterContext } from '../CharacterContext';\nimport { DataContext } from '../DataContext';\nimport { uiInput as input } from '../Formula';\nimport KeyMap, { StatColoredWithUnit, StatKey } from '../KeyMap';\nimport useBuildSetting from '../PageCharacter/CharacterDisplay/Tabs/TabOptimize/BuildSetting';\nimport { ElementKey } from '../Types/consts';\nimport CardLight from './Card/CardLight';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\nimport DropdownButton from './DropdownMenu/DropdownButton';\nimport InfoTooltip from './InfoTooltip';\nexport default function StatFilterCard({ disabled = false }: { disabled?: boolean }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const { buildSetting: { statFilters }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const setStatFilters = useCallback((statFilters: Dict<StatKey, number>) => buildSettingDispatch({ statFilters }), [buildSettingDispatch],)\n\n  const statKeys = useMemo(() => {\n    const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\n    if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\n    const charEle = data.get(input.charEle).value as ElementKey\n    statKeys.push(`${charEle}_dmg_`)\n    return statKeys\n  }, [data])\n\n  const remainingKeys = useMemo(() => statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key)), [statKeys, statFilters])\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\n  return <Box>\n    <CardLight>\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n        <Typography>{t`tabOptimize.constraintFilter.title`}</Typography>\n        <InfoTooltip title={<Typography>{t`tabOptimize.constraintFilter.tooltip`}</Typography>} />\n      </CardContent>\n    </CardLight>\n    <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\n      {Object.entries(statFilters).map(([statKey, min]) => {\n        return <StatFilterItem key={statKey} statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\n          delete statFilters[statKey]\n          setStatFilters({ ...statFilters })\n        }} />\n      })}\n      <StatFilterItem statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\n    </Box>\n  </Box>\n}\n\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\n  statKey?: StatKey, statKeys: StatKey[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\n}) {\n  const isFloat = KeyMap.unit(statKey) === \"%\"\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\n  return <ButtonGroup sx={{ width: \"100%\" }}>\n    <DropdownButton\n      title={statKey ? <StatColoredWithUnit statKey={statKey} /> : \"New Stat\"}\n      disabled={disabled}\n      color={statKey ? \"success\" : \"secondary\"}\n    >\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}><StatColoredWithUnit statKey={sKey} /></MenuItem>)}\n    </DropdownButton>\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\n      <CustomNumberInput\n        disabled={!statKey || disabled}\n        float={isFloat}\n        value={value}\n        placeholder=\"Stat Value\"\n        onChange={onChange}\n        sx={{ px: 2, }}\n        inputProps={{ sx: { textAlign: \"right\" } }}\n        endAdornment={KeyMap.unit(statKey)}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\n  </ButtonGroup>\n}\n","\nexport function initGlobalSettings() {\n  return { tcMode: false }\n}\n","import { faBan, faChartLine, faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { BusinessCenter, Lock, LockOpen } from '@mui/icons-material';\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, Chip, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\nimport React, { lazy, Suspense, useCallback, useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\nimport CardLight from '../Components/Card/CardLight';\nimport CharacterAutocomplete from '../Components/Character/CharacterAutocomplete';\nimport LocationName from '../Components/Character/LocationName';\nimport ColorText from '../Components/ColoredText';\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\nimport InfoTooltip from '../Components/InfoTooltip';\nimport SqBadge from '../Components/SqBadge';\nimport { Stars } from '../Components/StarDisplay';\nimport StatIcon from '../Components/StatIcon';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../Database/Database';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport useArtifact from '../ReactHooks/useArtifact';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstatKeys, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\nimport { CharacterKey, Rarity } from '../Types/consts';\nimport { clamp, clamp01 } from '../Util/Util';\nimport PercentBadge from './PercentBadge';\nimport { probability } from './RollProbability';\n\nconst ArtifactEditor = lazy(() => import('./ArtifactEditor'))\n\ntype Data = {\n  artifactId?: string,\n  artifactObj?: ICachedArtifact,\n  onClick?: (id: string) => void,\n  onDelete?: (id: string) => void,\n  mainStatAssumptionLevel?: number,\n  effFilter?: Set<SubstatKey>,\n  probabilityFilter?: Dict<SubstatKey, number>\n  disableEditSetSlot?: boolean\n  editor?: boolean,\n  canExclude?: boolean\n  canEquip?: boolean,\n  extraButtons?: JSX.Element\n}\nconst allSubstatFilter = new Set(allSubstatKeys)\n\nexport default function ArtifactCard({ artifactId, artifactObj, onClick, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter, disableEditSetSlot = false, editor = false, canExclude = false, canEquip = false, extraButtons }: Data): JSX.Element | null {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  const { database } = useContext(DatabaseContext)\n  const databaseArtifact = useArtifact(artifactId)\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\n  const editable = !artifactObj\n  const [showEditor, setshowEditor] = useState(false)\n  const onHideEditor = useCallback(() => setshowEditor(false), [setshowEditor])\n  const onShowEditor = useCallback(() => editable && setshowEditor(true), [editable, setshowEditor])\n\n  const wrapperFunc = useCallback(children => <CardActionArea onClick={() => artifactId && onClick?.(artifactId)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</CardActionArea>, [onClick, artifactId],)\n  const falseWrapperFunc = useCallback(children => <Box sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</Box>, [])\n\n  const art = artifactObj ?? databaseArtifact\n  if (!art) return null\n\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const mainStatUnit = KeyMap.unit(mainStatKey)\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\n  const artifactValid = maxEfficiency !== 0\n  const slotName = sheet?.getSlotName(slotKey)\n  const slotDesc = sheet?.getSlotDesc(slotKey)\n  const slotDescTooltip = slotDesc && <InfoTooltip title={<Box>\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><Typography variant='h6'>{slotName}</Typography></Suspense>\n    <Typography>{slotDesc}</Typography>\n  </Box>} />\n  const setEffects = sheet?.setEffects\n  const setDescTooltip = sheet && setEffects && <InfoTooltip title={\n    <span>\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`artifact:setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\n      </span>)}\n    </span>\n  } />\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\n    {editor && <Suspense fallback={false}>\n      <ArtifactEditor\n        artifactIdToEdit={showEditor ? artifactId : \"\"}\n        cancelEdit={onHideEditor}\n        disableEditSetSlot={disableEditSetSlot}\n      />\n    </Suspense>}\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={wrapperFunc} falseWrapper={falseWrapperFunc}>\n        <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", width: \"100%\" }}>\n          {!onClick && <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)} sx={{ position: \"absolute\", right: 0, bottom: 0, zIndex: 2 }}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>}\n          <Box sx={{ pt: 2, px: 2, position: \"relative\", zIndex: 1 }}>\n            {/* header */}\n            <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1, mb: 1 }}>\n              <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\n              {!slotName && <Skeleton variant=\"text\" width={100} />}\n              {slotName && <Typography noWrap sx={{ textAlign: \"center\", backgroundColor: \"rgba(100,100,100,0.35)\", borderRadius: \"1em\", px: 1 }}><strong>{slotName}</strong></Typography>}\n              {!slotDescTooltip && <Skeleton width={10} />}\n              {slotDescTooltip}\n            </Box>\n            <Typography color=\"text.secondary\" variant=\"body2\">\n              <SlotNameWithIcon slotKey={slotKey} />\n            </Typography>\n            <Typography variant=\"h6\" color={`${KeyMap.getVariant(mainStatKey)}.main`}>\n              <span>{StatIcon[mainStatKey]} {KeyMap.get(mainStatKey)}</span>\n            </Typography>\n            <Typography variant=\"h5\">\n              <strong>\n                <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\n              </strong>\n            </Typography>\n            <Stars stars={rarity} colored />\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\n          </Box>\n          <Box sx={{ height: \"100%\", position: \"absolute\", right: 0, top: 0 }}>\n            <Box\n              component=\"img\"\n              src={sheet?.slotIcons[slotKey] ?? \"\"}\n              width=\"auto\"\n              height=\"100%\"\n              sx={{ float: \"right\" }}\n            />\n          </Box>\n        </Box>\n        <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0, width: \"100%\" }}>\n          {substats.map((stat: ICachedSubstat) => <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\n          <Box sx={{ display: \"flex\", my: 1 }}>\n            <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`artifact:editor.curSubEff`}</Typography>\n            <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\n          </Box>\n          {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\n            <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`artifact:editor.maxSubEff`}</Typography>\n            <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\n          </Box>}\n          <Box flexGrow={1} />\n          {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\n          <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\n        </CardContent>\n      </ConditionalWrapper>\n      <Box sx={{ p: 1, display: \"flex\", gap: 1, justifyContent: \"space-between\", alignItems: \"center\" }}>\n        {editable && canEquip\n          ? <CharacterAutocomplete sx={{ flexGrow: 1 }} size=\"small\" showDefault\n            defaultIcon={<BusinessCenter />} defaultText={t(\"ui:inventory\")}\n            value={location} onChange={equipOnChar} />\n          : <LocationName location={location} />}\n        {editable && <ButtonGroup sx={{ height: \"100%\" }}>\n          {editor && <Tooltip title={<Typography>{t`artifact:edit`}</Typography>} placement=\"top\" arrow>\n            <Button color=\"info\" size=\"small\" onClick={onShowEditor} >\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n            </Button>\n          </Tooltip>}\n          {canExclude && <Tooltip title={<Box>\n            <Typography>{t`artifact:excludeArtifactTip`}</Typography>\n            <Typography><ColorText color={exclude ? \"error\" : \"success\"}>{t(`artifact:${exclude ? \"excluded\" : \"included\"}`)}</ColorText></Typography>\n          </Box>} placement=\"top\" arrow>\n            <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\" >\n              <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\n            </Button>\n          </Tooltip>}\n          {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\n            <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n          </Button>}\n          {extraButtons}\n        </ButtonGroup>}\n      </Box>\n    </CardLight >\n  </Suspense>\n}\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\n  if (!stat.value) return null\n  const numRolls = stat.rolls?.length ?? 0\n  const maxRoll = stat.key ? Artifact.maxSubstatValues(stat.key) : 0\n  const rollData = stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : []\n  const rollOffset = 7 - rollData.length\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const efficiency = stat.efficiency ?? 0\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\n  const statName = KeyMap.getStr(stat.key)\n  const unit = KeyMap.unit(stat.key)\n  const inFilter = stat.key && effFilter.has(stat.key)\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</Typography>\n    {inFilter && <Box display=\"flex\" gap={0.25} height=\"1.3em\">\n      {stat.rolls.sort().map((v, i) => <SmolProgress key={`${i}${v}`} value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\n    </Box>}\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{inFilter ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\n  </Box>)\n}\nexport function SmolProgress({ color = \"red\", value = 50 }) {\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\n  </Box>\n}\n","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\nimport Artifact from \"../Data/Artifacts/Artifact\";\nimport { probability } from \"./RollProbability\";\nimport { SubstatKey } from \"../Types/artifact\";\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\nexport const artifactSortKeysTC = [\"probability\"] as const\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\nexport type FilterOption = {\n  artSetKeys: ArtifactSetKey[],\n  rarity: ArtifactRarity[],\n  levelLow: number,\n  levelHigh: number,\n  slotKeys: SlotKey[],\n  mainStatKeys: MainStatKey[],\n  substats: SubstatKey[]\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\n  exclusion: Array<\"excluded\" | \"included\">,\n  locked: Array<\"locked\" | \"unlocked\">,\n}\n\ntype ArtifactSortFilter = {\n  filterOption: FilterOption\n  ascending: boolean\n  sortType: ArtifactSortKey\n}\nexport function initialFilterOption(): FilterOption {\n  return {\n    artSetKeys: [],\n    rarity: [...allArtifactRarities],\n    levelLow: 0,\n    levelHigh: 20,\n    slotKeys: [...allSlotKeys],\n    mainStatKeys: [],\n    substats: [],\n    location: \"\",\n    exclusion: [\"excluded\", \"included\"],\n    locked: [\"locked\", \"unlocked\"],\n  }\n}\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\n  filterOption: initialFilterOption(),\n  ascending: false,\n  sortType: artifactSortKeys[0],\n})\n\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\n  return {\n    rarity: {\n      getValue: art => art.rarity ?? 0,\n      tieBreaker: \"level\"\n    },\n    level: {\n      getValue: art => art.level ?? 0,\n      tieBreaker: \"artsetkey\"\n    },\n    artsetkey: {\n      getValue: art => art.setKey ?? \"\",\n      tieBreaker: \"level\"\n    },\n    efficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\n    },\n    mefficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\n    },\n    probability: {\n      getValue: art => {\n        if (!Object.keys(probabilityFilter).length) return 0\n        const prob = (art as any).probability\n        if (prob === undefined) return probability(art, probabilityFilter);\n        return prob\n      }\n    }\n  }\n}\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\n  return {\n    exclusion: (art, filter) => {\n      if (!filter.includes(\"included\") && !art.exclude) return false\n      if (!filter.includes(\"excluded\") && art.exclude) return false\n      return true\n    },\n    locked: (art, filter) => {\n      if (!filter.includes(\"locked\") && art.lock) return false\n      if (!filter.includes(\"unlocked\") && !art.lock) return false\n      return true\n    },\n    location: (art, filter) => {\n      if (!filter) return true\n      if (filter === \"Inventory\" && !art.location) return true\n      if (filter === \"Equipped\" && art.location) return true\n      if (filter === art.location) return true\n      return false\n    },\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\n    slotKeys: (art, filter) => filter.includes(art.slotKey),\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\n    levelLow: (art, filter) => filter <= art.level,\n    levelHigh: (art, filter) => filter >= art.level,\n    rarity: (art, filter) => filter.includes(art.rarity),\n    substats: (art, filter) => {\n      for (const filterKey of filter)\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\n      return true\n    }\n  }\n}\n","import SqBadge from '../Components/SqBadge';\nimport { clamp } from '../Util/Util';\n\nexport default function PercentBadge({ value, max = 1, valid }: {\n  valid?: boolean,\n  value: number | string,\n  max?: number\n}) {\n  let [badgeColor, text] = typeof value === 'number' ?\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed() + \"%\"] : [\"secondary\", value]\n  if (!valid) badgeColor = \"error\"\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\n}\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\nimport { crawlObject, layeredAssignment } from '../Util/Util'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\n\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\n// probability distribution and require separate consideration.\n\n// Notations for the remainder of this file.\n//\n// i, j, k := substat\n// E(i) := Extra substat that rolls into substat i\n// T(i) := Targetted (extra) substat for substat i\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\n// Nu(i) := # of upgrade rolls into substat i\n//\n// E := { E1, E2, ... }\n// T := { T1, T2, ... }\n// N(i) := Nf(i) + Nu(i)\n// Nf := Nf(1) + Nf(2) + ...\n// Nu := Nu(1) + Nu(2) + ...\n//\n// For example, if the artifact has 14 atk, and the target atk is 30,\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\n//\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\n\nconst allWeights = [3, 4, 6] as const\ntype Weight = typeof allWeights[number]\n\n/**\n * Weight used when rolling a filler roll. Each roll will choose from available\n * substats (excluding main stat and existing substats) with these weights.\n */\nconst fWeight: StrictDict<SubstatKey, Weight> = {\n  hp: 6, atk: 6, def: 6,\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\n  critRate_: 3, critDMG_: 3\n}\n\n/**\n * Probability of observing a filler sequence with particular weights\n *\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\n */\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\n  if (prefix.length === 5) {\n    layeredAssignment(pFillerSeq, prefix as any, current)\n    return\n  }\n\n  for (const i of allWeights)\n    if (prob[i] > 0)\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\n}\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\n\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\n\n/**\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\n *\n * 0 <= n <= 5; 0 <= r <= n\n */\nconst cnr = Array(6).fill(0).map((_, n) => {\n  const result = [1]\n  let r = 0, value = 1\n  while (++r <= n) {\n    value *= n - r + 1\n    value /= r\n    result.push(value)\n  }\n\n  return result\n})\n\n/**\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\n *\n * 0 <= n <= 5; 0 <= i < 3*n + 1\n */\nconst pNExtra = [[1]]\nwhile (pNExtra.length < 6) {\n  const last = pNExtra[pNExtra.length - 1]\n  const next = Array(last.length + 3).fill(0)\n  last.forEach((value, i) => {\n    for (const j of [0, 1, 2, 3]) {\n      next[i + j] += value\n    }\n  })\n\n  pNExtra.push(next.map(x => x / 4))\n}\nfor (const array of pNExtra) {\n  let accu = array.reduce((a, b) => a + b)\n  array.forEach((x, i, array) => {\n    array[i] = accu\n    accu -= x\n  })\n}\n\n/** Probability that `artifact` will have at least `target` stats at max level */\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\n\n  const { rarity, level, substats } = artifact\n\n  // `target = target - mainstat - substat` to find the extra substats we need\n  // Also count filler rolls (4 - # of substats) while we're at it\n  const target = { ..._target }, required = new Set(Object.keys(target))\n  let numFillerSlots = 0\n  {\n    const key = artifact.mainStatKey\n    if (key in target) {\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\n\n      delete target[key]\n      required.delete(key as SubstatKey)\n    }\n  }\n  for (const { key, value } of substats) {\n    if (key) {\n      if (required.has(key)) {\n        required.delete(key)\n        if (target[key]! > value)\n          target[key]! -= value\n        else delete target[key] // Requirement already met\n      }\n    } else numFillerSlots += 1\n  }\n  numFillerSlots += 4 - substats.length\n\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\n\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\n\n  // normalize `target`\n  for (const [key, value] of Object.entries(target))\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\n\n  let minTotalUpgrades = 0\n  const targetEntries = Object.entries(target).map(([key, target]) => {\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\n    minTotalUpgrades += minUpgrade\n    return { target, filler, minUpgrade }\n  }).reverse()\n\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\n\n  /**\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\n   *\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\n   *\n   * Then\n   *\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\n   *\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\n   *\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\n   *  g(0, N) = 1\n   *  g(0, n) = 0 for n != N\n   *\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\n   */\n\n  // At this point,\n  //  `target` = ceil(T / alpha)\n  //  `numUpgradeRolls` = Nu\n\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\n\n  // Keep applying `target` from first to last.\n  // At each step i in the loop, `result[n]` = g(i, n)\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\n    const next: typeof result = {}\n\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\n      // rolls = m; extra = T(i) / alpha - 7n\n\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\n      const extra = target - 7 * (rolls + filler)\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\n      //        = f(m + Nf(i), T(i))\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\n\n      for (const [_remaining, probability] of Object.entries(result)) {\n        const remaining = parseInt(_remaining)\n        if (remaining < rolls) continue\n\n        // n := remaining - m\n        // remaining = n + m\n        // probability = g(i, n + m)\n\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\n        //          = h(n + m, m, |K| - i)\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\n        const index = remaining - rolls // n\n\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\n      }\n    }\n    result = next\n  })\n\n  // At this point, `result[i]` = g(|K|, i)\n\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\n}\n\n/**\n * Pr[ N(k) = n | N = m, |K| = M ]\n *\n * 0 <= n <= N <= 5; 0 <= M <= 4\n */\nfunction pRollInto(m: number, n: number, M: number) {\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\n}\n\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\n\n  const mainStatRatio = fWeight[mainStat] ?? 0\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\n\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\n  for (const { key } of substats) {\n    if (key) {\n      const ratio = fWeight[key]\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\n      numUnusedSubstats[ratio] -= 1\n    }\n  }\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\n\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\n  for (const key of required) requiredCount[fWeight[key]] += 1\n\n  let total = 0\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\n    total += prob\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\n    for (const key of path) currentCount[key] += 1\n\n    let sum = prob\n    for (const i of allWeights) {\n      const current = currentCount[i], required = requiredCount[i]\n      if (current < required) return\n      sum *= cnr[current][required]\n    }\n\n    pFillerRolls += sum\n  })\n\n  for (const i of allWeights)\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\n  return pFillerRolls / total\n}\n\nexport { probability }\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useArtifact(artifactID: string | undefined = \"\") {\n  const { database } = useContext(DatabaseContext)\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\n  useEffect(() =>\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\n    [artifactID, setArtifact, database])\n  return artifact\n}\n"],"names":["StyledInputBase","styled","InputBase","theme","backgroundColor","palette","primary","main","transition","dark","Wrapper","Button","padding","overflow","width","height","CustomNumberInputButtonGroupWrapper","children","props","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","value","onChange","disabled","float","useState","number","setNumber","focused","setFocus","parseFunc","useMemo","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","e","target","onKeyDOwn","key","type","inputProps","step","onKeyDown","className","placement","component","sx","cursor","icon","faInfoCircle","StatFilterCard","t","useTranslation","characterKey","useContext","CharacterContext","character","data","DataContext","useBuildSetting","statFilters","buildSetting","buildSettingDispatch","setStatFilters","statKeys","get","input","push","charEle","remainingKeys","filter","Object","keys","some","k","setFilter","sKey","min","display","gap","justifyContent","title","flexDirection","entries","map","statKey","StatFilterItem","close","isFloat","KeyMap","s","color","onClick","flexBasis","flexGrow","placeholder","px","textAlign","endAdornment","faTrashAlt","initGlobalSettings","tcMode","ArtifactEditor","lazy","allSubstatFilter","Set","allSubstatKeys","ArtifactCard","artifactId","artifactObj","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","disableEditSetSlot","editor","canExclude","canEquip","extraButtons","database","DatabaseContext","databaseArtifact","useArtifact","sheet","usePromise","ArtifactSheet","setKey","editable","showEditor","setshowEditor","onHideEditor","onShowEditor","wrapperFunc","falseWrapperFunc","art","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","location","mainStatLevel","Math","max","mainStatUnit","levelVariant","floor","Artifact","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","Suspense","fallback","variant","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","minHeight","artifactIdToEdit","cancelEdit","condition","wrapper","falseWrapper","position","updateArt","right","bottom","zIndex","pt","alignItems","mb","size","label","noWrap","borderRadius","StatIcon","undefined","cacheValueString","stars","colored","top","src","slotIcons","pb","stat","SubstatDisplay","my","valid","probability","toFixed","name","p","showDefault","defaultIcon","defaultText","charKey","setArtLocation","arrow","faEdit","faBan","faChartLine","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","clamp","efficiency","effOpacity","clamp01","statName","unit","inFilter","has","alignContent","sort","v","i","SmolProgress","indexOf","opacity","minWidth","bgcolor","artifactSortKeys","artifactSortKeysTC","initialFilterOption","artSetKeys","allArtifactRarities","levelLow","levelHigh","slotKeys","allSlotKeys","mainStatKeys","exclusion","locked","initialArtifactSortFilter","filterOption","ascending","sortType","artifactSortConfigs","effFilterSet","getValue","tieBreaker","artsetkey","mefficiency","prob","artifactFilterConfigs","includes","filterKey","substat","PercentBadge","badgeColor","text","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","sumProb","current","layeredAssignment","cnr","Array","fill","_","n","result","r","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","artifact","_target","NaN","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","values","artifactID","_getArt","setArtifact","followArt"],"sourceRoot":""}