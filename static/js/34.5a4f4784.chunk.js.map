{"version":3,"file":"static/js/34.5a4f4784.chunk.js","mappings":"meAOMA,GAAoBC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,IAAWC,EAAAA,GAA6BC,EAAAA,GAAAA,KAAY,4BAClFC,GAAoBC,EAAAA,EAAAA,IAAK,GAAK,GAAGC,EAAAA,EAAAA,IAAKL,EAAAA,GAAAA,MAAAA,OAAoB,OAC1DM,GAAiBC,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KAC7BG,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAIC,EAAAA,GAAgCN,IAArC,QAA2DO,OAAO,GAASR,EAAAA,GAAAA,KAAY,4BAC9FJ,GACAI,EAAAA,GAAAA,KAAY,gBAERS,GAAcZ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,IAAWY,EAAAA,GAAwCV,EAAAA,GAAAA,KAAY,+BACvFW,GAAcT,EAAAA,EAAAA,IAAK,IAAIC,EAAAA,EAAAA,IAAKL,EAAAA,GAAAA,MAAAA,OAAoB,MAChDc,GAAK,mBACNC,EAAAA,EAAAA,GAAaC,OAAOC,KAAKC,EAAAA,KAA0B,SAAAC,GACpD,MAA0BD,EAAAA,GAAwBC,GAA1CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,OAAOd,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KACbA,EAAAA,EAAAA,KAAKkB,EAAAA,EAAAA,IAASF,EAAOlB,EAAAA,GAAAA,KAAA,UAAeiB,EAAf,YAAmCR,IACxDH,EAAAA,EAAAA,KACED,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAIC,EAAAA,GAAKI,IAAV,QAA0BH,OAAO,GAASR,EAAAA,GAAAA,KAAY,+BAC7DF,EAAAA,GAAAA,MAAA,UAAemB,EAAf,WAEFnB,EAAAA,GAAAA,MAAA,UAAeqB,EAAf,eACCnB,EAAAA,GAAAA,KAAA,UAAeiB,EAAf,SACJ,KAXQ,IAYTI,OAAOR,EAAAA,EAAAA,GAAaG,EAAAA,GAAAA,MAAAA,UAAwC,SAAAM,GAC1D,IAAMC,GAAOrB,EAAAA,EAAAA,KACXA,EAAAA,EAAAA,KAAKkB,EAAAA,EAAAA,IAASJ,EAAAA,GAAAA,MAAAA,MAAqChB,EAAAA,GAAAA,KAAY,gBAAiBS,IAChFH,EAAAA,EAAAA,KAAID,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAIC,EAAAA,GAAKI,IAAV,QAA0BH,OAAO,GAASR,EAAAA,GAAAA,KAAY,+BAAiCF,EAAAA,GAAAA,MAAAA,aAE9F0B,EAAM1B,EAAAA,GAAAA,MAAA,UAAewB,EAAf,cACZ,OAAOjB,EAAAA,EAAAA,IAML,CAAC,OAAQ,QAAS,OAAQ,WAAWoB,SAASH,GACjC,YAARA,GAECI,EAAAA,EAAAA,KAAKxB,EAAAA,EAAAA,KAAKI,EAAAA,EAAAA,IAAIiB,EAAMzB,EAAAA,GAAAA,IAAAA,SAAoB0B,GAAM,CAAEG,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAASE,OAErEI,EAAAA,EAAAA,KAAKxB,EAAAA,EAAAA,IAAKqB,EAAMC,EAAK1B,EAAAA,GAAAA,IAAAA,UAAqB,CAAE6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAASE,OACnEpB,EAAAA,EAAAA,IAAKqB,EAAMC,GACfxB,EAAAA,GAAAA,KAAA,UAAesB,EAAf,eACH,MAEGM,EAAoB,CACxBC,YAAYC,EAAAA,EAAAA,IAAMC,EAAAA,GAAc,OAAQnB,EAAMiB,WAAY7B,EAAAA,GAAAA,KAAY,mBACtEgC,gBAAgBF,EAAAA,EAAAA,IAAMC,EAAAA,GAAc,QAASnB,EAAMoB,eAAgBhC,EAAAA,GAAAA,KAAY,uBAC/EiC,cAAcH,EAAAA,EAAAA,IAAMC,EAAAA,GAAc,OAAQnB,EAAMqB,aAAcjC,EAAAA,GAAAA,KAAY,qBAC1EkC,SAASJ,EAAAA,EAAAA,IAAMC,EAAAA,GAAc,OAAQnB,EAAMsB,QAASlC,EAAAA,GAAAA,KAAY,gBAChEmC,OAAOL,EAAAA,EAAAA,IAAMC,EAAAA,GAAc,QAASnB,EAAMuB,MAAOnC,EAAAA,GAAAA,KAAY,cAC7DoC,SAASN,EAAAA,EAAAA,IAAMC,EAAAA,GAAc,OAAQnB,EAAMwB,QAASpC,EAAAA,GAAAA,KAAY,iBAErDqC,EAAY,CACvBC,MAAO,CACLC,aAAc3B,EAAMS,MAAMmB,QAC1BC,UAAW7B,EAAMS,MAAMqB,KACvBC,UAAW/B,EAAMS,MAAMuB,KACvBC,WAAYjC,EAAMS,MAAMyB,MACxBjB,WAAYjB,EAAMiB,WAClBG,eAAgBpB,EAAMoB,eACtBC,aAAcrB,EAAMqB,aACpBc,UAAWnC,EAAMmC,UACjBb,QAAStB,EAAMsB,QACfC,MAAOvB,EAAMuB,MACbC,QAASxB,EAAMwB,QACfY,WAAYpC,EAAMoC,YAEpBC,KAAI,gBACFC,YAAa9C,GACVU,OAAOqC,YAAYC,EAAAA,GAAAA,KAAkB,SAAAC,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,gBAC7ChD,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAQ,KAAMlD,GAAiBJ,EAAAA,GAAAA,KAAA,UAAeqD,EAAf,kBADH,MAFxC,IAIDN,UAAWnC,EAAMmC,UACjBlB,WAAYD,EAAkBC,WAC9BG,eAAgBJ,EAAkBI,eAClCC,aAAcL,EAAkBK,aAChCC,QAASN,EAAkBM,QAC3BC,MAAOP,EAAkBO,MACzBC,QAASR,EAAkBQ,UAE7BI,QAAS,CACPX,WAAYjB,EAAMiB,WAClBG,eAAgBpB,EAAMoB,eACtBC,aAAcrB,EAAMqB,aACpBc,UAAWnC,EAAMmC,UACjBC,WAAYpC,EAAMoC,WAClBd,QAASN,EAAkBM,QAC3BC,MAAOP,EAAkBO,MACzBC,QAASR,EAAkBQ,SAE7BU,MAAO,CACLd,eAAgBpB,EAAMoB,eACtBe,UAAWnC,EAAMmC,UACjBZ,MAAOvB,EAAMuB,MACbN,WAAYD,EAAkBC,WAC9BI,aAAcL,EAAkBK,aAChCC,QAASN,EAAkBM,QAC3BE,QAASR,EAAkBQ,SAE7BM,KAAM,CACJb,WAAYjB,EAAMiB,WAClBkB,UAAWnC,EAAMmC,UACjBb,QAAStB,EAAMsB,QACfE,QAASxB,EAAMwB,QACfJ,eAAgBJ,EAAkBI,eAClCC,aAAcL,EAAkBK,aAChCE,MAAOP,EAAkBO,OAE3BS,KAAM,CACJX,aAAcrB,EAAMqB,aACpBc,UAAWnC,EAAMmC,UACjBlB,WAAYD,EAAkBC,WAC9BG,eAAgBJ,EAAkBI,eAClCE,QAASN,EAAkBM,QAC3BC,MAAOP,EAAkBO,MACzBC,QAASR,EAAkBQ,SAE7BmB,OAAQ,CACNR,UAAWnC,EAAMmC,UACjBb,QAAStB,EAAMsB,QACfC,MAAOvB,EAAMuB,MACbN,WAAYD,EAAkBC,WAC9BG,eAAgBJ,EAAkBI,eAClCC,aAAcL,EAAkBK,aAChCG,QAASR,EAAkBQ,U,60ICpHzBoB,GAAaC,EAAAA,EAAAA,IAAUC,GAAa,SAAAC,GAAK,OAAK,GAAL,eAAW7C,OAAO8C,OAAOD,IAAzB,IAEzCE,GAAchD,EAAAA,EAAAA,GAAa,CAAC,KAAM,MAAO,MAAO,SAAU,YAAa,YAAa,WAAY,UAAU,SAAAiD,GAAG,OAAIhE,EAAAA,GAAAA,MAAYgE,EAAhB,IAE7GC,GAAiBC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,IAAOnE,EAAAA,GAAAA,IAAAA,KAAgB,CACrB,MAASA,EAAAA,GAAAA,QAAe,MAASA,EAAAA,GAAAA,cAChCoE,IACHD,EAAAA,EAAAA,IAAOnE,EAAAA,GAAAA,WAAkB,CACvBqE,MAAOpC,EAAAA,GAAcqC,SAAUrC,EAAAA,GAAcsC,QAAStC,EAAAA,GACtDuC,SAAUxE,EAAAA,GAAAA,cACToE,GACH,YAGF,SAASK,EAAcC,GACrB,OAAQA,GACN,IAAK,SAAU,IAAK,UAAW,IAAK,WAAY,MAAO,OACvD,IAAK,QAAS,MAAO,QACrB,IAAK,QAAS,MAAO,QAExB,CAGM,SAASC,EAAclD,EAAeiD,GAA4G,IAAD,EAAhCE,EAAgC,uDAAb,CAAC,EAC1I,OAAOhD,EAAAA,EAAAA,IAAK5B,EAAAA,GAAAA,IAAAA,KAAe6E,EAAAA,EAAAA,IAAU,CAAC,CACpChD,IAAK,CAAEJ,KAAAA,EAAMiD,MAAMpD,EAAAA,EAAAA,IAASoD,GAAOlD,IAAe,OAAVoD,QAAU,IAAVA,GAAA,UAAAA,EAAY/C,WAAZ,SAAiBL,SAAM4C,EAAYH,IAC1EW,IACJ,CAEM,SAASE,EAAiBrD,EAAemD,GAC9C,IAAMG,GAAa3E,EAAAA,EAAAA,IAAKqB,GAAMjB,EAAAA,EAAAA,IAAIC,EAAAA,GAAKT,EAAAA,GAAAA,MAAAA,UACvC,OAAO4E,GAAahD,EAAAA,EAAAA,IAAKmD,EAAYH,GAAcG,CACpD,CAEM,SAASC,EAAevD,EAAemD,GAC5C,IAAMK,EAAUjF,EAAAA,GAAAA,MAAAA,QACVkF,GAAW9E,EAAAA,EAAAA,KAAKI,EAAAA,EAAAA,IAAIiB,EAAMwD,IAAUzE,EAAAA,EAAAA,IAAIC,EAAAA,GAAKT,EAAAA,GAAAA,MAAAA,MAAmBA,EAAAA,GAAAA,MAAAA,WAEtE,OAAO4E,GAAahD,EAAAA,EAAAA,IAAKsD,EAAUN,GAAcM,CAClD,CAEM,SAASC,EAAQ1D,EAAgC2D,EAAyBV,GAA8F,IAAjCE,EAAgC,uDAAb,CAAC,EAC1JS,EAAaZ,EAAcC,GACjC,OAAOC,GAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAA,UAAeqF,EAAf,UAAmCD,EAAe,CAAEE,KAAM,MAAQtF,EAAAA,GAAAA,MAAYyB,IAAQiD,EAAME,EACjI,CAEM,SAASG,EAAWtD,EAAgC+B,EAA2B+B,EAAwBX,GAC5G,OAAOE,GAAiBtE,EAAAA,EAAAA,KAAIJ,EAAAA,EAAAA,IAAKoD,EAASxD,EAAAA,GAAAA,MAAYyB,IAAQ8D,GAAOX,EACtE,CAEM,SAASM,EAASzD,EAAgC+B,EAA2B+B,EAAwBX,GAC1G,OAAOI,GAAexE,EAAAA,EAAAA,KAAIJ,EAAAA,EAAAA,IAAKoD,EAASxD,EAAAA,GAAAA,MAAYyB,IAAQ8D,GAAOX,EACpE,CAEM,SAASY,EAAiB/D,EAAgCgE,EAA0BF,EAAgBb,EAA6DE,GACtK,IAAMS,EAAaZ,EAAcC,GAC3BgB,EAAc1F,EAAAA,GAAAA,MAAA,UAAeqF,EAAf,UACpB,OAAOP,GAAiBtE,EAAAA,EAAAA,KACtBJ,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAU2F,EAAaD,EAAgB,CAAEH,KAAM,MAAQtF,EAAAA,GAAAA,MAAYyB,KACxE1B,EAAAA,EAAAA,IAAU2F,EAAaH,IACtBX,EACJ,CACM,SAASe,EAAcC,EAAwDb,GACpF,OAAOxE,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAoB,QAAZoC,EAAoB,IAAM,KAAMb,GAAa,CAAEc,QAASD,GACrF,CAEM,SAASE,EAAerE,EAAgCgE,EAA0BF,EAAgBb,EAA6DE,GACpK,IAAMS,EAAaZ,EAAcC,GAC3BgB,EAAc1F,EAAAA,GAAAA,MAAA,UAAeqF,EAAf,UACpB,OAAOL,GAAexE,EAAAA,EAAAA,KACpBJ,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAU2F,EAAaD,EAAgB,CAAEH,KAAM,MAAQtF,EAAAA,GAAAA,MAAYyB,KACxE1B,EAAAA,EAAAA,IAAU2F,EAAaH,IACtBX,EACJ,CACM,SAASmB,EACd/B,EACA4B,EACAI,EACAC,EAMAC,GAEO,IADPtB,EACM,uDADa,CAAC,EAEpB,SAASuB,EAAM1E,EAAc2E,GAC3B,OAAOhG,EAAAA,EAAAA,IAAKqB,GAAM1B,EAAAA,EAAAA,IAAkBC,EAAAA,GAAAA,IAAW0D,EAAW0C,IAC3D,CACDF,EAAQG,OAAR,UAAqBtC,GACrB,IAqBIuC,EArBE1E,EAAa,CACjB2E,SAASjF,EAAAA,EAAAA,IAAS0C,GAClBvC,KAAM,CAAC,EACP+E,YAAYlF,EAAAA,EAAAA,IAAS2E,EAAIQ,eACzBC,OAAQ,CAAC,EACTR,QAAAA,GAEEN,IACFhE,EAAK+E,SAAUrF,EAAAA,EAAAA,IAASsE,GACxBhE,EAAKgF,SAAW,CAAEC,OAAM,UAAIjB,GAAUtE,EAAAA,EAAAA,IAAS,KAC/CM,EAAKsE,QAASG,MAAd,UAAuBT,EAAvB,UAAyC5F,EAAAA,GAAAA,MAAA,UAAe4F,EAAf,UACzChE,EAAKsE,QAAS/E,SAAWoB,EAAUqD,IAEjCI,IACFc,EAAAA,EAAAA,IAAkBlF,EAAM,CAAC,WAAY,QAASoE,IAAS1E,EAAAA,EAAAA,IAAS,KAClEwF,EAAAA,EAAAA,IAAkBlF,EAAM,CAAC,WAAY,QAAS,aAAc5B,EAAAA,GAAAA,OAAAA,QAClC,aAAtBiG,EAAIQ,gBACD7E,EAAKsE,QAASG,QAAOzE,EAAKsE,QAASG,MAAQ,CAAC,GACjDzE,EAAKsE,QAASG,MAAOU,cAAgB/G,EAAAA,GAAAA,MAAAA,eAIvC,IA3BM,iBA2BD,IAAMgH,EAAI,KACPC,EAAkB,GAOxB,GANIhB,EAAIiB,OAAOF,IACbC,EAAKE,KAAKhB,EAAMF,EAAIxE,KAAKuF,GAAOf,EAAIiB,OAAOF,KACjCf,EAAImB,WAAWC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAMP,EAAZ,KAE/BC,EAAKE,MAAKpH,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,IAAWiG,EAAImB,WAAWI,KAAI,SAAAF,GAAC,uBAAIA,EAAEC,MAAMP,UAAZ,QAAqBS,GAArB,OAEhDR,EAAKS,OAAQ,iBAElB,IAAMC,GAASpH,EAAAA,EAAAA,IAAwB,IAAhB0G,EAAKS,OAAeT,EAAK,GAAKzG,EAAAA,GAAAA,WAAA,EAAOyG,IAAtC,QAAC,UAAiD/G,EAAAA,GAAAA,KAAY8G,IAA9D,IAAqEY,OAAQ,OAAQC,SAAS,KAEpH,GADIb,EAAKc,SAAS,WAAUH,EAAOI,KAAMlC,QAAUmB,EAAKgB,MAAM,GAAI,IACrD,QAAThB,GAA2B,QAATA,GAA2B,OAATA,EACtCpF,EAAKH,KAAMuF,GAAQW,MAChB,CACH,GAAIrB,EAAc,MAAM,IAAI2B,MAAM,2BAClC3B,GAAe,EACf1E,EAAKsG,QAAUP,EACf/F,EAAK8E,OAAQM,GAAQhH,EAAAA,GAAAA,OACtB,CA9CG,EA2BN,wBAAuBmI,EAAAA,GAAvB,CAAwC,QAAxC,eAAyD,IAsBzD,OAAOtD,EAAAA,EAAAA,IAAU,CAACjD,GAAMwG,EAAAA,EAAAA,IAAaxD,IACtC,C,4onBC5IKyD,EAAerH,OAAOqC,YAAYrC,OAAOsH,QAAQC,GAAef,KAAI,+BAAExD,EAAF,KAAOH,EAAP,WAAkB,CAACG,EAAD,CAAO,GAAP,eAAahD,OAAO8C,OAAOD,KAA7C,KAEnE,SAAS2E,EACdxE,EACAiC,GAGO,IAFPrB,EAEM,uDAFa,CAAC,EACpB6D,EACM,uDADsB,CAAC,EAEvBd,EAAe,CACnBlG,KAAM,CAAC,EACPiF,OAAQ,CAAC,EACTgC,MAAO,CAAC,EACRC,OAAQ,CACN3E,KAAK1C,EAAAA,EAAAA,IAAS0C,GAAM4E,MAAMtH,EAAAA,EAAAA,IAAS2E,EAAIO,aAEzCN,SAAQ,2BACKlC,GAAQyE,IAIfI,EAAsB5C,EAAtB4C,SAAUC,EAAY7C,EAAZ6C,QACZC,EAAU,CAACpB,GAEjB,GAAsB,QAAlBkB,EAASD,MAAoC,QAAlBC,EAASD,MAAoC,OAAlBC,EAASD,KAAe,MAAM,IAAIX,MAAM,gCAClG,IAAMe,GAAezI,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAAIJ,EAAAA,EAAAA,IAAKyI,EAASpH,MAAM1B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkBqI,EAAaQ,EAAS1C,UAAUpG,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkBiG,EAAIgD,UAAUzB,KAAI,SAAAF,GAAC,uBAAIA,EAAE4B,SAASL,EAASD,aAAxB,QAAiC,CAAjC,MAAuC1I,EAAAA,GAAAA,KAAY2I,EAASD,OAG5N,GAFAG,EAAQ5B,KAAK,CAAE1F,MAAK,UAAIoH,EAASD,KAAO5I,EAAAA,GAAAA,OAAAA,MAAqB2I,OAAQ,CAAEQ,KAAMH,KAEzEF,EAAS,CACX,GAAqB,QAAjBA,EAAQF,MAAmC,QAAjBE,EAAQF,MAAmC,OAAjBE,EAAQF,KAAe,MAAM,IAAIX,MAAM,2CAC/F,IAAMmB,GAAc7I,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,IAAK0I,EAAQrH,MAAM1B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkBqI,EAAaS,EAAQ3C,SAAUjG,EAAAA,GAAAA,KAAY4I,EAAQF,OAC9HG,EAAQ5B,KAAK,CACXT,QAAO,UAAIoC,EAAQF,KAAO5I,EAAAA,GAAAA,OAAAA,KAC1B2I,OAAQ,CAAEU,IAAKD,IAElB,CACD,OAAOvE,EAAAA,EAAAA,IAAU,GAAD,OAAKkE,EAAL,EAAcX,EAAAA,EAAAA,IAAaxD,EAAYZ,KACxD,C,yhBClCKA,EAAiB,YACjBsF,EAAWC,EACjB,GAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,GAAhC,eAASwF,EAAT,KAEA,GAAuCC,EAAAA,EAAAA,IAAKzF,EAAK,uBAAjD,eAAO0F,EAAP,KAAwBC,EAAxB,KACMC,GAAcC,EAAAA,EAAAA,IAAM,EAAG,IAAIrC,KAAI,SAAAsC,GAAC,OAAQ,GAAJA,CAAJ,IAChCC,EAAQ,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,OACzCC,EAAM,CAAC,GAAK,GAAK,GAAK,GAAK,IAC3BC,GAAa9F,EAAAA,EAAAA,IAAOwF,EAAa3I,OAAOqC,YAAYuG,EAAYpC,KAAI,SAAAsC,GAAC,MAAI,CAACA,GAAGI,EAAAA,EAAAA,KAAI9J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+J,EAAO,CAAEzE,KAAM,MAAQwE,IAAI/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BgK,EAAK,CAAE1E,KAAM,OAAjI,KAA6I6E,EAAAA,IAClNvI,EAAO4G,EAAsBxE,EAAKsF,EAAU,CAChD5C,OAAQ,CACNuD,WAAAA,KAIEG,EAAsB,CAC1BC,KAAAA,EACAC,WAAAA,EACAC,SAAU,CAAC,CACT1G,MAAO8F,EACPa,KAAMd,EACNe,QAAQC,EAAAA,EAAAA,GAAe1G,EAAKqG,EAAMC,GAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMpB,EAAI,SACVqB,OAAQ7J,OAAOqC,YAAYuG,EAAYpC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,KAAMd,EAAEgB,WACRC,OAAQ,CAAC,CAAEC,KAAMf,KAFyB,QAMhD,MAAmBgB,EAAAA,EAAYjH,EAAKoG,EAAOd,EAAU1H,G,8gBC7B/CoC,EAAiB,oBACjBsF,EAAWC,EAEjB,GAAuCE,EAAAA,EAAAA,IAAKzF,EAAK,qBAAjD,eAAO0F,EAAP,KAAwBC,EAAxB,KACMuB,GAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,GAAO/K,EAAAA,EAAAA,KAAK+D,EAAAA,EAAAA,IAAOwF,GAAa5I,EAAAA,EAAAA,GAAamK,GAAmB,SAAApB,GAAC,OAAIxI,EAAAA,EAAAA,IAASwI,EAAb,IAAkB,IACvF/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC4B,EAAO4G,EAAsBxE,EAAKsF,EAAU,CAChD5C,OAAQ,CACNyE,KAAMA,KAGJf,EAAsB,CAC1BC,KAAAA,EACAC,WAAAA,EACAC,SAAU,CAAC,CACT1G,MAAO8F,EACPa,KAAMd,EACNe,QAAQC,EAAAA,EAAAA,GAAe1G,EAAKqG,EAAMC,GAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OACE7J,OAAOqC,YAAY6H,EAAkB1D,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CAChDR,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,GACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OAPgC,QAYhD,MAAmB2F,EAAAA,EAAYjH,EAAKoG,EAAOd,EAAU1H,G,2gBCpC/CoC,EAAiB,yBACjBsF,GAAWC,EACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,GAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,EAAK,wBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWxJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,IAAM,IAAM,IAAM,IAAM,OAGlC4B,GAAO4G,EAAsBxE,EAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAIEpB,GAAsB,CAC1BC,KAAAA,EACAC,WAAAA,EACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,EAAKqG,EAAMC,GAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,EAAKoG,GAAOd,GAAU1H,I,0hBC7B/CoC,GAAiB,aACjBsF,GAAWC,GAGXmC,IAAM/G,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADzB,CAAC,GAAK,IAAM,GAAK,KAAM,KACqC,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACzH6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,eAEjBM,GAAO4G,EAAsBxE,GAAKsF,IAClCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAIpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,uhBCtB/CoC,GAAiB,qBACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCN/CoC,GAAiB,gBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAIA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,aAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMgC,IAAe3J,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFvC,CAAC,GAAK,IAAM,GAAK,IAAM,MAGlC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNiF,aAAAA,MAIEvB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GAGNkB,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMW,IACL,CACDL,KAAM9B,GAAI,qBAMpB,OAAmByB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,uhBClC/CoC,GAAiB,gBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEMiC,IAAc5J,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADrC,CAAC,GAAI,GAAI,GAAI,IAAK,OAE9B6L,IAAS7J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,cAAqB8L,EAAAA,GAAAA,QAAgBF,IAEpDhK,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD1C,SAAU,CACRF,OAAQ,CACNmF,OAAAA,OAKAzB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQqL,GAAa1L,EAAAA,GAAAA,KAAY,YACtC,CACDoL,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,KACL,CACDgG,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ihBC5C/CoC,GAAiB,wBACjBsF,GAAWC,GAGXwC,IAAahM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADP,CAAC,IAAM,KAAO,IAAM,KAAO,MAG3C4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNqF,WAAAA,MAGE3B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMe,QAGrB,OAAmBd,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBClB/CoC,GAAiB,cACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAmCC,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMC,GAAS,CAAC,IAAM,IAAM,IAAM,GAAK,KACjCC,GAAU,CAAC,IAAM,IAAM,IAAM,IAAM,KACnChB,IAAOhH,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkM,GAAQ,CAAE5G,KAAM,MAAQwE,EAArE,IAA0EK,EAAAA,IAC9HiC,IAAYjI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmM,GAAS,CAAE7G,KAAM,MAAQwE,EAAtE,IAA2EK,EAAAA,IAC7HvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,GACAiB,UAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNvB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMpB,GAAI,YACVqB,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,SAAU,CAAEU,MAAOvB,IAC5BiB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMoB,MALkC,QAUhD,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCjC/CoC,GAAiB,mBACjBsF,GAAWC,GAIXU,IAAalK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFP,CAAC,IAAM,IAAM,IAAM,IAAM,MAG/C,IAAuCyJ,EAAAA,EAAAA,IAAKzF,GAAK,kBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM+B,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKhC,EAAAA,EAAAA,IAAM2H,GAAa,MAC1DhF,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KACZL,EAAAA,EAAAA,IACEC,EAAAA,GAAAA,OAAAA,YANU,CAAC,EAAG,KAAM,IAAK,KAAM,GAMI,CAAEsF,KAAM,MAC3CtF,EAAAA,GAAAA,MAAAA,KAEF,YACA,CAAE6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,iBAGrBM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNuD,WAAAA,KAED,CACDyB,IAAAA,KAEItB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMf,MAChB,CACDQ,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjD9G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,eACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,UAC7B,CACDW,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBC/C/CoC,GAAiB,qBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAGM0C,IAAUrK,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKhC,EAAAA,EAAAA,IAAM2H,GAAa,MAC9DvJ,EAAAA,EAAAA,KACEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHE,CAAC,IAAM,GAAK,IAAM,IAAM,KAGS,CAAEsF,KAAM,MACrDtF,EAAAA,GAAAA,OAAAA,UAGEsM,IAActK,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAK5D,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAQ,IAAM6I,KAC9DE,IAAUC,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAesM,IAEtD1K,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChDZ,MAAO,CACL+D,IAAKJ,IAEPzF,SAAU,CACR8B,MAAO,CACL+D,IAAKF,MAGR,CACDF,QAAAA,GACAC,YAAAA,KAEIlC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDH,KAAMd,GACN7F,MAAO8F,GACP/C,UAAU,EACVgE,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMqB,IACL,CACDf,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,SAIX,CACDmF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,aACjD/D,UAAU,EACV8F,SAAS1K,EAAAA,EAAAA,IAAM2H,GAAa,KAAM,GAClCoB,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ+L,IAAD,QAAC,UAAkBpM,EAAAA,GAAAA,KAAY,QAA/B,IAAuCyM,YAAY,MAC/D,CACCrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,SAKd,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6XCpE/CoC,GAAiB,cACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCL/CoC,GAAiB,mBACjBsF,GAAWC,GAGXmC,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFf,CAAC,IAAK,EAAG,IAAK,IAAK,KAE+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC9G6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEsH,IAAAA,KACzDtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAG7C,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCnB/CoC,GAAiB,cACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,sBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWxJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,GAAK,IAAM,IAAM,IAAM,OAGjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAGEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0kBC7B/CoC,GAAiB,uBACjBsF,GAAWC,GAKXqD,IAAO7M,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHP,CAAC,IAAM,IAAM,IAAM,IAAM,MAInC6M,IAAgB7K,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAC5C5D,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJM,CAAC,GAAK,GAAK,GAAK,GAAK,IAIe,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,MACrE8M,IAAiB9K,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAC7C5D,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALO,CAAC,GAAK,GAAK,GAAK,GAAK,IAKe,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,MAEtE4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNkG,KAAAA,GACAC,cAAAA,GACAC,eAAAA,KAED,CACDD,cAAAA,GACAC,eAAAA,KAEI1C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM4B,IACL,CACD5B,KAAM6B,IACL,CACD7B,KAAM8B,QAIZ,OAAmB7B,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCnC/CoC,GAAiB,kBACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMc,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChCX,IAAYjI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+M,GAAO,CAAEzH,KAAM,MAAQwE,EAApE,IAAyEK,EAAAA,IAE3HvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACN0F,UAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNpB,MAAMD,EAAAA,EAAAA,IAAG,oBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMoB,MAFyB,QAMhD,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,uhBC9B/CoC,GAAiB,wBACjBsF,GAAWC,GAEX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBCN/CoC,GAAiB,eACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGMwD,GAAY,CAAC,EAAG,IAAK,IAAK,IAAK,GAErC,IAAuCvD,EAAAA,EAAAA,IAAKzF,GAAK,gBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWzL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJT,CAAC,IAAM,IAAM,IAAM,IAAM,IAIqB,CAAEsF,KAAM,MAClE2H,IAAgB9I,EAAAA,EAAAA,IAAOwF,IAAD,WACvB5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAKoL,GAAU1B,EAAnB,KAC7BK,EAAAA,IAEGvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAUyB,MAIR7C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,mBACTE,QAAO,WACF9J,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACjCc,MAAMD,EAAAA,EAAAA,IAAG,UAAW,CAAEU,MAAW,EAAJvB,IAC7BiB,OAAQ,CAAC,CACPC,KAAMiC,IACL,CACD3B,KAAM9B,GAAI,eACV3F,MAAO,SAAAjC,GAAI,OAAIoL,GAAUpL,EAAKsL,IAAIlN,EAAAA,GAAAA,OAAAA,aAA0B6D,OAASiG,CAA1D,EACXxE,KAAM,MAPoB,QAapC,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,uhBCzC/CoC,GAAiB,qBACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMkB,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,IACpChC,IAAOhH,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmN,GAAU,CAAE7H,KAAM,MAAQwE,EAAvE,IAA4EK,EAAAA,IAEzHvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,MAGEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNpB,MAAMD,EAAAA,EAAAA,IAAG,yBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OAPkC,QAYhD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wkBChC/CoC,GAAiB,eACjBsF,GAAWC,GAIXiC,IAAWzL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFZ,CAAC,IAAM,GAAK,IAAM,IAAM,MAGjC0L,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHf,CAAC,GAAK,EAAG,IAAK,IAAK,KAG+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAC7G6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,KAED,CACDE,IAAAA,KAGItB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMQ,IACL,CACDR,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAIpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,2hBC/B/CoC,GAAiB,uBACjBsF,GAAWC,GAIX6D,IAASpL,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACrCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHZ,CAAC,GAAK,IAAM,IAAK,KAAM,KAG2B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAChH6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEnB+L,IAAcrL,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAC1CW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANX,CAAC,EAAG,IAAK,IAAK,IAAK,KAM+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACjH6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEgJ,OAAAA,GAAQC,YAAAA,KACjEjD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ6M,GAAQ,CAAExC,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,aAClD,CACDD,MAAMzK,EAAAA,EAAAA,IAAQ8M,GAAa,CAAEzC,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,0BAI9D,OAAmBA,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8kBC3B/CoC,GAAiB,oBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAKA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,oBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOpL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJP,CAAC,IAAM,GAAM,IAAM,IAAM,KAIiB,CAAEsF,KAAM,MAC5DgI,IAAWtL,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJhC,CAAC,GAAM,IAAM,GAAM,IAAM,IAI8CE,EAAAA,GAAAA,KAAY,UACjGqN,IAAUvL,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJhC,CAAC,IAAM,IAAM,IAAM,IAAM,OAMtC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,IAEFvE,SAAU,CACRF,OAAQ,CACNyE,KAAMmC,GACNC,QAAAA,OAIAnD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMG,MAChB,CACDtH,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,QACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMsC,IACL,CACDtC,KAAMuC,IACL,CACDjC,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4gBClD/CoC,GAAiB,UACjBsF,GAAWC,GAIjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,sBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6D,IAASxL,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACrChC,EAAAA,EAAAA,IAAM2H,GAAa,MAAM7E,EAAAA,GAAAA,KAAiB1E,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJzC,CAAC,GAAK,IAAM,IAAM,IAAM,KAIsD,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,OAChH,IAA6CyJ,EAAAA,EAAAA,IAAKzF,GAAK,cAAvD,iBAAOyJ,GAAP,MAA2BC,GAA3B,MACMlC,IAAWxJ,EAAAA,EAAAA,IAAM0L,GAAgB,aAAa3N,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAL5C,CAAC,IAAM,IAAM,IAAM,IAAM,KAKwD,CAAEsF,KAAM,OAErG1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,KAED,CACDgC,OAAAA,KAEIpD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,WACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQiN,GAAQ,CAAE5C,MAAMW,EAAAA,EAAAA,IAAI,oBACjC,CACDD,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,SAIX,CACDzB,MAAO6J,GACPlD,KAAMiD,GACNhD,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,qBACTE,OAAQ,CACN8C,UAAW,CACT5C,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ytBCnD/CoC,GAAiB,cACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAIA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMiE,IAAU7N,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHR,CAAC,GAAK,IAAM,GAAK,IAAM,KAIzC,IAA6CyJ,EAAAA,EAAAA,IAAKzF,GAAK,cAAvD,iBAAOyJ,GAAP,MAA2BC,GAA3B,MACMxB,IAASnM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJV,CAAC,IAAM,IAAM,IAAM,IAAM,MAKlC6N,IAAYzN,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAGwB,EAAAA,EAAAA,IAAM0L,GAAgB,YAAa,KAC1CvJ,EAAAA,EAAAA,IAAOwF,GAAa3I,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MACtD,CAACA,GAAG1J,EAAAA,EAAAA,IAAK8L,GAAQpC,GADqC,KAC9BK,EAAAA,KAGtBvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNkH,QAAAA,GACAzC,KAAM0C,MAGJzD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM4C,MAEP,CACD/J,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,QACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAM6C,IACL,CACDvC,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OARgC,MAY3C,CACDzB,MAAO6J,GACPlD,KAAMiD,GACNhD,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,GAAYd,GAAI,WAClDoB,MAAMD,EAAAA,EAAAA,IAAG,qBACTE,OAAQ,CACN8C,UAAW,CACT5C,OAAQ,CAAC,CACPO,KAAM9B,GAAI,aACV3F,MAAO,IACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8XCnE/C0H,GAAWC,GACXvF,GAAiB,mBACVpC,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBCL/CoC,GAAiB,aACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMkB,GAAW,CAAC,IAAM,KAAO,IAAM,KAAO,KACtChC,IAAOhH,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmN,GAAU,CAAE7H,KAAM,MAAQwE,EAAvE,IAA4EK,EAAAA,IAChIyC,IAAOzI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmN,GAAU,CAAE7H,KAAM,MAAQwE,EAAvE,IAA4EK,EAAAA,IAEzHvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,GACAyB,KAAAA,MAGExC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNpB,MAAMD,EAAAA,EAAAA,IAAG,yBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAM4B,IACL,CACDtB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OATkC,QAchD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCpC/CoC,GAAiB,sBACjBsF,GAAWC,GAGjB,IAA6BE,EAAAA,EAAAA,IAAKzF,GAAK,eAAvC,iBAAO8J,GAAP,MAAiBC,GAAjB,MACMC,IAAOhM,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnChC,EAAAA,EAAAA,IAAM+L,GAAU,MAAM/I,EAAAA,GAAAA,KAAe5E,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHtC,CAAC,IAAM,GAAK,IAAM,IAAM,KAGiD,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,OAE5F4B,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAE4J,KAAAA,KAChE5D,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOkK,GACPvD,KAAMsD,GACNlD,MAAMD,EAAAA,EAAAA,IAAG,oBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQyN,GAAM,CAAEpD,MAAMW,EAAAA,EAAAA,IAAI,WAAY1F,QAAS,gBAM/D,OAAmBoF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,mkBC1B/CoC,GAAiB,kBACjBsF,GAAWC,GAIjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,kBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOpL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHP,CAAC,GAAK,IAAM,GAAK,IAAM,KAIjCsN,IAAWtL,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHhC,CAAC,GAAK,GAAK,GAAK,GAAK,IAGkDE,EAAAA,GAAAA,KAAY,UAEjG0B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAMA,IAERvE,SAAU,CACRF,OAAQ,CACNyE,KAAMmC,OAINlD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMG,MAChB,CACDtH,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,qBAAsB,CAAEnH,QAAS,KAC1CqH,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMsC,IACL,CACDhC,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,IC1B/C0C,GAAmD,CACvD2J,UAAAA,EACAC,kBAAAA,EACAC,uBAAAA,GACAC,WAAAA,GACAC,mBAAAA,GACAC,cAAAA,GACAC,cAAAA,GACAC,sBAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,mBAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,qBAAAA,GACAC,gBAAAA,GACAC,sBAAAA,GACAC,aAAAA,GACAC,mBAAAA,GACAC,aAAAA,GACAC,qBAAAA,GACAC,kBAAAA,GACAC,QAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,WAAAA,GACAC,oBAAAA,GACAC,gBAAAA,IAEF,M,2gBCpDM5L,GAAiB,kBACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ukBCL/CoC,GAAiB,gBACjBsF,GAAWC,GAIjB,IAA6BE,EAAAA,EAAAA,IAAKzF,GAAK,mBAAvC,iBAAO8J,GAAP,MAAiBC,GAAjB,MACM5C,IAAOpL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsJ,GAASuG,SAASrI,KAAI,SAAAF,GAAC,uBAAIA,EAAE6D,YAAN,QAAc1D,GAAd,KAClEuG,IAAOhM,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKhC,EAAAA,EAAAA,IAAM+L,GAAU,MAAM3N,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAH/D,CAAC,EAAG,KAAM,IAAK,KAAM,KAG6E,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,OAC5H0L,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClChC,EAAAA,EAAAA,IAAM+L,GAAU,MAAMpJ,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANpC,CAAC,EAAG,IAAK,IAAK,IAAK,KAMqD,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CACrI6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,iBAGZM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,KAED,CACD6C,KAAAA,GAAMtC,IAAAA,KAEFtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMG,MAEP,CACDtH,MAAOkK,GACPvD,KAAMsD,GACNlD,MAAMD,EAAAA,EAAAA,IAAG,WACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQyN,GAAM,CAAEpD,MAAMW,EAAAA,EAAAA,IAAI,WAAY1F,QAAS,UACpD,CACDmF,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,UAC7B,CACDW,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBChD/CoC,GAAiB,sBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMuB,IAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,IAAO/K,EAAAA,EAAAA,KAAK+D,EAAAA,EAAAA,IAAOwF,IAAa5I,EAAAA,EAAAA,GAAamK,IAAmB,SAAApB,GAAC,OAAIxI,EAAAA,EAAAA,IAASwI,EAAb,IAAkB,IACvF/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAMA,MAGJf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OACE7J,OAAOqC,YAAY6H,GAAkB1D,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CAChDR,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OAPgC,QAYhD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBCpC/CoC,GAAiB,kBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMmG,IAAe9N,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAC3ChC,EAAAA,EAAAA,IAAM,KAAM2H,IAAavJ,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHrB,CAAC,GAAK,GAAK,GAAK,GAAK,IAGwC,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,OAE5F4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNoJ,aAAAA,KAED,CACDA,aAAAA,KAEI1F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,QACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM8E,UAMhB,OAAmB7E,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,2gBCjC/CoC,GAAiB,YACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWxJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAGEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8fC7B/CoC,GAAiB,oBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM2H,GAAa,MAAMnG,EAAAA,EAAAA,IAAQ,MACxCkI,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClChC,EAAAA,EAAAA,IAAM2H,GAAa,MAAMhF,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAQ,KAAMxD,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAAE6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,iBAE5GM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,KAED,CACDO,IAAAA,KAGItB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjD9G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,iCACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,UAC7B,CACDK,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,KACL,CACDgG,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,EACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,2gBC5C/CoC,GAAiB,gBACjBsF,GAAWC,GAGjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,cAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFjC,CAAC,GAAK,IAAM,GAAK,IAAM,IAE4C,CAAEsF,KAAM,OAEpF1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,MAGEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,6BACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,2XCpC/C0H,GAAWC,GACXvF,GAAiB,YACVpC,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ohBCT/CoC,GAAiB,gBACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCN/CoC,GAAiB,kBACjBsF,GAAWC,GAIXwC,IAAahM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,IAAM,GAAK,IAAM,IAAM,KAEwB,CAAEsF,KAAM,MACvEyK,IAAkBhQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFZ,CAAC,IAAM,KAAO,IAAM,KAAO,KAE0B,CAAEsF,KAAM,MAEtE1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNqF,WAAAA,GACAgE,gBAAAA,MAGE3F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAM+E,QAIZ,OAAmB9E,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,2gBCzB/CoC,GAAiB,cACjBsF,GAAWC,GAGXyG,GAAS,CAAC,GAAI,GAAI,GAAI,GAAI,IAC1BC,IAAOjO,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHf,CAAC,IAAK,IAAK,IAAK,IAAK,GAG6B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC9G6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAC3D6L,KAAAA,KAEI7F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ0P,GAAM,CAAErF,MAAMD,EAAAA,EAAAA,IAAG,UAC9B,CACDW,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,SAACjC,GAAD,OAAUoO,GAAOpO,EAAKsL,IAAIlN,EAAAA,GAAAA,OAAAA,aAA0B6D,MAApD,EACPyB,KAAM,SAIZ,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,okBC5B/CoC,GAAiB,eACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,sBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAGMsG,IAAOlQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsJ,GAASuG,SAASrI,KAAI,SAAAF,GAAC,uBAAIA,EAAE2I,YAAN,QAAcxI,GAAd,KAIlE0D,IAAOnJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALhC,CAAC,GAAK,IAAM,GAAK,IAAM,MAMjCkQ,IAAclO,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAPvC,CAAC,IAAM,GAAM,IAAM,IAAM,OAQnC2L,IAAY,UAAQuE,IACpBC,IAAa,UAAQD,IAErBtO,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAUyE,IAEZrJ,SAAU,CACRF,OAAQ,CACNyE,KAAAA,GACA+E,YAAAA,GACAvE,aAAAA,GACAwE,cAAAA,OAIA/F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMiF,MAChB,CACDpM,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,kBACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMkF,IACL,CACDlF,KAAMW,IACL,CACDX,KAAMmF,IACL,CACD7E,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6hBC1D/CoC,GAAiB,oBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEM4G,GAAgB,CAAC,IAAM,IAAM,IAAM,IAAM,KACzCC,GAAoB,CAAC,GAAK,IAAM,GAAK,IAAM,IAEjD,IAA6B5G,EAAAA,EAAAA,IAAKzF,GAAK,aAAvC,iBAAO8J,GAAP,MAAiBC,GAAjB,MACMuC,GAAetP,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MACzD,CAAC,GAAD,OAAIA,EAAJ,UACAzB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BoQ,GAAelQ,EAAAA,GAAAA,KAAA,UAAesB,EAAf,WAFM,KAIrD0O,IAAc/L,EAAAA,EAAAA,IAAO4J,IACzBhN,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAK0J,GAAG/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BqQ,IAAhD,IACzBlG,EAAAA,IAESvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,QAAO,kBACF4J,IADC,IAEJJ,YAAAA,OAGE9F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,QAAO,OACFwF,GAAAA,EAAAA,KAAgB,SAAC/O,GAClB,MAAO,CAAEwJ,KAAMsF,GAAa,GAAD,OAAI9O,EAAJ,UAC5B,MAEF,CACDqC,MAAOkK,GACPvD,KAAMsD,GACNlD,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,QAAQ9J,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMkF,KAFgB,OAMvC,OAAmBjF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBC7C/CoC,GAAiB,kBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,oBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEMyC,IAAYpK,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADhC,CAAC,IAAM,KAAO,IAAM,KAAO,OAG1C4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN0F,UAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,mBAAoB,CAAEnH,QAAS,KACxCqH,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMoB,UAMhB,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0gBC5B/CoC,GAAiB,YACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,mBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6G,IAAmB3G,EAAAA,EAAAA,IAAM,EAAG,GAE5B2B,IAAWpL,EAAAA,EAAAA,KAAK+D,EAAAA,EAAAA,IAAOwF,IAAa5I,EAAAA,EAAAA,GAAayP,IAAkB,SAAA1G,GAAC,OAAIxI,EAAAA,EAAAA,IAASwI,EAAb,IAAkBK,EAAAA,KAC1FpK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFM,CAAC,IAAM,KAAO,IAAM,KAAO,OAIvC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAGEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMpB,GAAI,YACVqB,OAAQ7J,OAAOqC,YAAYmN,GAAiBhJ,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CACvDR,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMQ,IACL,CACDF,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OAPuC,QAYrD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0jBCnC/CoC,GAAiB,iBACjBsF,GAAWC,GAEXkH,GAAY,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,OAE7CC,IAAY7G,EAAAA,EAAAA,IAAM,EAAG,GAErB8G,IAAM3O,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKjE,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADpC,CAAC,GAAK,IAAM,GAAK,IAAM,IAC+C,CAAEsF,KAAM,OAE7F,IAAyDmE,EAAAA,EAAAA,IAAKzF,GAAK,cAAnE,iBAAO4M,GAAP,MAAiCC,GAAjC,MACMC,IAAa9O,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACzCG,EAAAA,EAAAA,IAAO0M,GAAsB7P,OAAOqC,YAAYqN,GAAUlJ,KAAI,SAAAuJ,GAAK,MAAI,CACrEA,GACA3Q,EAAAA,EAAAA,IACE2Q,GACAhR,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0ByQ,GAAW,CAAEnL,KAAM,IAAK0L,MAAO,IACnEhR,EAAAA,GAAAA,MAAAA,IAL+D,KAO9DmK,EAAAA,KAED8G,IAAajP,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACzChC,EAAAA,EAAAA,IAAM6O,GAAsB,KAC1BzQ,EAAAA,EAAAA,KACEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAnBE,CAAC,KAAO,MAAQ,KAAO,MAAQ,MAmBI,CAAEsF,KAAM,IAAK0L,MAAO,IACnEhR,EAAAA,GAAAA,MAAAA,MAGA4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNiK,IAAAA,IAEFjI,MAAO,CACLmD,OAAQiF,IAEVlK,SAAU,CACR8B,MAAO,CACLmD,OAAQoF,MAGX,CACDH,WAAAA,GAAYG,WAAAA,KAGR7G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAM2F,MAChB,CACDlG,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjD/D,UAAU,EACV4D,KAAMoG,GACN/M,MAAOgN,GACPjG,MAAMD,EAAAA,EAAAA,IAAG,eACTE,OAAQ7J,OAAOqC,YAAYqN,GAAUlJ,KAAI,SAAAuJ,GAAK,MAAI,CAChDA,EACA,CACEnG,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAO0F,IAC3BhG,OAAQ,CAAC,CACPC,KAAM8F,IACL,CACDxF,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OATkC,MAa7C,CACDmF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,aACjD+B,SAAS1K,EAAAA,EAAAA,IAAM6O,GAAsB,IAAK,GAC1CjK,UAAU,EACVmE,OAAQ,CAAC,CACPC,KAAMiG,IACL,CACD3F,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,SAIZ,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0gBClF/CoC,GAAiB,YACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,wBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEM6B,IAAWxJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADrC,CAAC,GAAK,IAAM,IAAM,IAAM,OAGjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAGEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBC5B/CoC,GAAiB,uBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEM0H,GAAS,CAAC,IAAK,IAAK,KACpBd,GAAgB,CAAC,IAAM,IAAM,IAAM,IAAM,KACzCe,GAAe,CACnB,EAAK,CAAC,IAAM,GAAK,IAAM,IAAM,KAC7B,EAAK,CAAC,IAAM,GAAK,IAAM,IAAM,KAC7B,EAAK,CAAC,IAAM,IAAM,IAAM,IAAM,MAEhC,IAA6B1H,EAAAA,EAAAA,IAAKzF,GAAK,uBAAvC,iBAAO8J,GAAP,MAAiBC,GAAjB,MACMuC,GAAetP,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MACzD,CAAC,GAAD,OAAIA,EAAJ,UACAzB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BoQ,GAAelQ,EAAAA,GAAAA,KAAA,UAAesB,EAAf,WAFM,KAIrD4P,GAAcpQ,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MACxD,CAAC,GAAD,OAAIA,EAAJ,UACAQ,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,QAAewB,GACnB2C,EAAAA,EAAAA,IAAO4J,IAAUhN,EAAAA,EAAAA,GAAamQ,IAAQ,SAAAH,GAAK,OACzChR,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmR,GAAaJ,GADR,IACkB5G,EAAAA,GAAQjK,EAAAA,GAAAA,KAAA,UAAesB,EAAf,YAJf,KAOpD6P,GAAcrQ,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MACxD,CAAC,GAAD,OAAIA,EAAJ,UACAhB,EAAAA,EAAAA,IAAI8P,GAAa,GAAD,OAAI9O,EAAJ,UAAiB4P,GAAY,GAAD,OAAI5P,EAAJ,WAFY,KAK7CI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,QAAO,UACF2K,MAGDjH,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQwF,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MACzB,CAAEwJ,KAAMsF,GAAa,GAAD,OAAI9O,EAAJ,UADK,KAG1B,CACDqC,MAAOkK,GACPvD,KAAMsD,GACNlD,KAAMpB,GAAI,UACV5C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDE,OAAQ7J,OAAOqC,YACb6N,GAAO1J,KAAI,SAAAuJ,GAAK,MAAI,CAACA,EAAO,CAC1BnG,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOiG,SAASP,KACpChG,OAAQwF,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAK,CAC9BwJ,KAAMoG,GAAY,GAAD,OAAI5P,EAAJ,UADQ,KAFb,QAStB,OAAmByJ,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,gkBC3D/CoC,GAAiB,uBACjBsF,GAAWC,GAIXoH,IAAM5Q,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,GAAK,IAAM,GAAK,IAAM,KAG/ByM,IAAMzK,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClC5D,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHF,CAAC,KAAO,KAAO,KAAO,KAAO,MAGO,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,KAE7D4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNiK,IAAAA,IAEFjI,MAAO,CACL+D,IAAAA,KAED,CACDA,IAAAA,KAGIrC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAM2F,IAAO,CAAE3F,KAAMyB,QAGpC,OAAmBxB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,whBC3B/CoC,GAAiB,mBACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMkB,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,KACpChC,IAAOhH,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmN,GAAU,CAAE7H,KAAM,MAAQwE,EAAvE,IAA4EK,EAAAA,IAChIyC,IAAOzI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmN,GAAU,CAAE7H,KAAM,MAAQwE,EAAvE,IAA4EK,EAAAA,IAEzHvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,GACAyB,KAAAA,MAGExC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNvB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,SACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAM4B,IACL,CACDtB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OATkC,QAchD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0gBCpC/CoC,GAAiB,iBACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMc,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChCX,IAAYjI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+M,GAAO,CAAEzH,KAAM,MAAQwE,EAApE,IAAyEK,EAAAA,IAE3HvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACN0F,UAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNvB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMoB,MAFyB,QAMhD,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ohBC9B/CoC,GAAiB,mBACjBsF,GAAWC,GAEX3H,GAAO4G,EAAsBxE,GAAKsF,IAClCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ohBCL/CoC,GAAiB,eACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEMiC,IAAc5J,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADrC,CAAC,GAAI,GAAI,GAAI,IAAK,OAE9B6L,IAAS7J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,cAAqB8L,EAAAA,GAAAA,QAAgBF,IAEpDhK,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD1C,SAAU,CACRF,OAAQ,CACNmF,OAAAA,OAIAzB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQqL,GAAa1L,EAAAA,GAAAA,KAAY,YACtC,CACDoL,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,KACL,CACDgG,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0XC9C/C0H,GAAWC,GACXvF,GAAiB,cACVpC,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBCN/CoC,GAAiB,gBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwD,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,KACpChC,IAAOnJ,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmN,GAAU,CAAE7H,KAAM,OACtFiM,IAAWvP,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmN,GAAU,CAAE7H,KAAM,OAE1F1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,GACAoG,SAAAA,MAGEnH,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,kBACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMuG,IACL,CACDjG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,gmBCpC/CoC,GAAiB,eACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,oBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEM4H,IAAWvP,EAAAA,EAAAA,IAAM,KAAM2H,IAAanG,EAAAA,EAAAA,IAAQ,KAC5C+J,IAAUvL,EAAAA,EAAAA,IAAM,KAAM2H,IAAanG,EAAAA,EAAAA,IAAQ,KAC3CkI,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClChC,EAAAA,EAAAA,IAAM,KAAM2H,IAAahF,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJxC,CAAC,GAAK,IAAM,GAAK,IAAM,IAIoD,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CACvI6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,iBAEnB8K,IAAYrM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsJ,GAASuG,SAASrI,KAAI,SAAAF,GAAC,uBAAIA,EAAE8E,iBAAN,QAAmB3E,GAAnB,KAEvE7F,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN0F,UAAAA,GACAmF,SAAAA,GACAhE,QAAAA,KAED,CAAE7B,IAAAA,KACCtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMoB,MAChB,CACDvI,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,kBACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMuG,IACL,CACDvG,KAAMuC,IACL,CACDvC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,UAC7B,CACDW,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,stBChD/CoC,GAAiB,eACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACA,IAA6CF,EAAAA,EAAAA,IAAKzF,GAAK,cAAvD,iBAAOyJ,GAAP,MAA2BC,GAA3B,MAGME,IAAU7N,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,GAAK,IAAM,GAAK,IAAM,KAGnCkM,IAASnM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFV,CAAC,IAAM,IAAM,IAAM,IAAM,MAGlC6N,IAAYzN,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAGwB,EAAAA,EAAAA,IAAM0L,GAAgB,YAAa,KAC1CvJ,EAAAA,EAAAA,IAAOwF,GAAa3I,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MACtD,CAACA,GAAG1J,EAAAA,EAAAA,IAAK8L,GAAQpC,GADqC,KAC9BK,EAAAA,KAGtBvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNkH,QAAAA,GACAzC,KAAM0C,MAGJzD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM4C,MAEP,CACD/J,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,QACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAM6C,IACL,CACDvC,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OARgC,MAY3C,CACDzB,MAAO6J,GACPlD,KAAMiD,GACNhD,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,GAAYd,GAAI,WAClDoB,MAAMD,EAAAA,EAAAA,IAAG,qBACTE,OAAQ,CACN8C,UAAW,CACT5C,OAAQ,CAAC,CACPO,KAAM9B,GAAI,aACV3F,MAAO,IACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,igBC/D/CoC,GAAiB,oBACjBsF,GAAWC,GAEXkD,IAAMzK,EAAAA,EAAAA,IAAM,WAAYhC,EAAAA,GAAAA,QAAe,IACvCiQ,IAAOjO,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAQ,GAAIxD,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC7D6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN+F,IAAAA,KAED,CACDwD,KAAAA,KAEI7F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMyB,IACL,CACDzB,MAAMzK,EAAAA,EAAAA,IAAQ0P,GAAM,CAAErF,MAAMD,EAAAA,EAAAA,IAAG,cAIrC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC7B/CoC,GAAiB,gBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEM6B,IAAWxJ,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADnC,CAAC,IAAM,IAAM,IAAM,IAAM,KAC8C,CAAEsF,KAAM,OAE1F1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAGEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBC7B/CoC,GAAiB,gBACjBsF,GAAWC,GAEXiI,GAAU,CAAC,GAAK,IAAM,GAAK,IAAM,IAEjCtB,IAAcnQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwR,IAClD7F,IAAe5L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwR,IACnDxD,IAAOhM,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCgB,EAAAA,GAAAA,KAAe5E,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJb,CAAC,GAAK,GAAK,GAAK,GAAK,GAI8B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,OAEhF4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNwJ,YAAAA,GACAvE,aAAAA,KAED,CAAEqC,KAAAA,KACC5D,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMkF,IACL,CACDlF,KAAMW,IACL,CACDX,MAAMzK,EAAAA,EAAAA,IAAQyN,GAAM,CAAEpD,MAAMW,EAAAA,EAAAA,IAAI,WAAY1F,QAAS,cAI3D,OAAmBoF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0gBC9B/CoC,GAAiB,WACjBsF,GAAWC,GAEX0G,IAAOjO,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAQ,GAAIxD,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC7D6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAC3D6L,KAAAA,KAEI7F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,MAAMzK,EAAAA,EAAAA,IAAQ0P,GAAM,CAAErF,MAAMD,EAAAA,EAAAA,IAAG,cAG9C,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCnB/CoC,GAAiB,sBACjBsF,GAAWC,GAGXyE,IAAOhM,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCgB,EAAAA,GAAAA,KAAe5E,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFb,CAAC,IAAM,MAAQ,KAAO,MAAQ,KAEqB,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,MAChF4B,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAE4J,KAAAA,KAEzD5D,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CACN,CAAEC,MAAMzK,EAAAA,EAAAA,IAAQyN,GAAM,CAAEpD,MAAMW,EAAAA,EAAAA,IAAI,WAAY1F,QAAS,cAI7D,OAAmBoF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0gBClB/CoC,GAAiB,kBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAGM8H,IAAgBzP,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKhC,EAAAA,EAAAA,IAAM2H,GAAa,MACpEvJ,EAAAA,EAAAA,KACEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHO,CAAC,MAAS,MAAS,MAAS,MAAS,OAGJ,CAAEsF,KAAM,IAAK0L,MAAO,IACtEhR,EAAAA,GAAAA,OAAAA,UAGE0R,IAAoB1P,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAK5D,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAQ,IAAMiO,KACpEE,IAAgBnF,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe0R,IAE5D9P,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChDZ,MAAO,CACLkJ,UAAWH,IAEb7K,SAAU,CACR8B,MAAO,CACLkJ,UAAWD,MAGd,CACDF,cAAAA,GACAC,kBAAAA,KAEItH,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDH,KAAMd,GACN7F,MAAO8F,GACPiB,KAAMpB,GAAI,YACV5C,UAAU,EACViE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMyG,IACL,CACDnG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,SAIX,CACDmF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,aACjD/D,UAAU,EACV8F,SAAS1K,EAAAA,EAAAA,IAAM2H,GAAa,KAAM,GAClCoB,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmR,IAAD,QAAC,UAAwBxR,EAAAA,GAAAA,KAAY,cAArC,IAAmDyM,YAAY,MAC3E,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,SAIZ,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,ICvC/CyC,GAA6C,CACjDwN,gBAAAA,GACAC,cAAAA,GACAC,oBAAAA,GACAC,gBAAAA,GACAC,UAAAA,GACAC,kBAAAA,GACAC,cAAAA,GACAC,UAAAA,GACAC,cAAAA,GACAC,gBAAAA,GACAC,YAAAA,GACAC,aAAAA,GACAC,kBAAAA,GACAC,gBAAAA,GACAC,UAAAA,GACAC,eAAAA,GACAC,UAAAA,GACAC,qBAAAA,GACAC,qBAAAA,GACAC,iBAAAA,GACAC,eAAAA,GACAC,iBAAAA,GACAC,aAAAA,GACAC,YAAAA,GACAC,cAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAC,kBAAAA,GACAC,cAAAA,GACAC,cAAAA,GACAC,SAAAA,GACAC,oBAAAA,GACAC,gBAAAA,IAEF,M,6XC7DM7P,GAAiB,qBACjBsF,GAAWC,GAEJ3H,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ghBCR/CoC,GAAiB,iBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMuB,IAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,IAAO/K,EAAAA,EAAAA,KAAK+D,EAAAA,EAAAA,IAAOwF,IAAa5I,EAAAA,EAAAA,GAAamK,IAAmB,SAAApB,GAAC,OAAIxI,EAAAA,EAAAA,IAASwI,EAAb,IAAkB,IACvF/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAMA,MAIJf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OACE7J,OAAOqC,YAAY6H,GAAkB1D,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CAChDR,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OAPgC,QAYhD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCrC/CoC,GAAiB,cACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWxJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,GAAK,GAAK,GAAK,GAAK,MAG9B4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAIEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBC7B/CoC,GAAiB,kBACjBsF,GAAWC,GAEjB,IAAazI,EAAAA,EAAAA,IAAM,SAAUkD,IAA7B,iBAAO8P,GAAP,MAEA,IAAmCrK,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MAGMgE,GAAO,CAAC,IAAM,IAAM,IAAM,IAAM,KAGhC8D,GAAY/S,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAAhN,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,UAAcxD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiQ,IAAtD,KAChD/D,IAAS9L,EAAAA,EAAAA,KACb4T,EAAAA,EAAAA,IAAUhU,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAC7BsB,EAAAA,EAAAA,IAAS,EAAG,KACZA,EAAAA,EAAAA,IAAS,EAAG,CAAEsJ,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,mBAC3C9G,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIxI,EAAAA,EAAAA,IAASwI,EAAG,CAAEc,MAAMD,EAAAA,EAAAA,IAAG,WAA3B,IAA0C,IACvF5K,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YARC,CAAC,KAAO,IAAM,KAAO,KAAO,MAQG,CAAEsF,KAAM,OAEvC1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,QAAO,kBACFqN,IADC,IAEJ5I,KAAMe,OAGJ9B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ/J,OAAO8C,OAAOiQ,IAAWvM,KAAI,SAAAwD,GAAI,MAAK,CAAEA,KAAAA,EAAP,KACxC,CACDnH,MAAOoI,GACPzB,KAAMwB,GACNpF,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMkJ,GAAG,eACTjJ,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMkB,MAFyB,QAMhD,OAAmBjB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0hBC3C/CoC,GAAiB,eACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,kBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM9H,IAAMG,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClChC,EAAAA,EAAAA,IAAM2H,GAAa,MAAMhF,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,IAAKJ,EAAAA,GAAAA,MAAAA,KAAiBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAH1D,CAAC,GAAK,IAAM,GAAK,IAAM,IAGqE,CAAEsF,KAAM,OAAS,YAAa,CACrIzD,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,iBAEnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEvC,IAAAA,KAEzDuI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAClCM,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQsB,GAAK,CAAE+I,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,oBAM1D,OAAmBA,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC9B/CoC,GAAiB,aACjBsF,GAAWC,GAEjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAmCC,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMgI,GAAY,CAAC,IAAM,GAAK,IAAM,IAAM,KAEpC9I,IAAOhH,EAAAA,EAAAA,IAAO8H,GAAW,CAAE,WAAalM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADzC,CAAC,IAAM,GAAK,IAAM,IAAM,KACmD,CAAEsF,KAAM,MAAQ,aAAevF,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiU,GAAW,CAAE3O,KAAM,OAAU6E,EAAAA,IACpLyC,IAAO5K,EAAAA,EAAAA,IAAMiK,GAAW,eAAelM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiU,GAAW,CAAE3O,KAAM,OAEvF1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,GACAyB,KAAAA,MAGExC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNpF,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACN,UAAa,CACXD,KAAMpB,GAAI,uBACVuB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAM4B,MAEnC,YAAe,CACbhC,KAAMpB,GAAI,yBACVuB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAM4B,UAKzC,OAAmB3B,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCtC/CoC,GAAiB,cACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,uBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWxJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,GAAK,IAAM,IAAM,IAAM,OAGjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAIEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0hBC7B/CoC,GAAiB,mBACjBsF,GAAWC,GAIX6D,IAASpL,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACrCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHZ,CAAC,GAAK,IAAM,IAAK,KAAM,KAG2B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAChH6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEnB+L,IAAcrL,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAC1CW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANX,CAAC,EAAG,IAAK,IAAK,IAAK,KAM+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACjH6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEgJ,OAAAA,GAAQC,YAAAA,KAEjEjD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ6M,GAAQ,CAAExC,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,aAClD,CACDD,MAAMzK,EAAAA,EAAAA,IAAQ8M,GAAa,CAAEzC,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,0BAI9D,OAAmBA,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC5B/CoC,GAAiB,qBACjBsF,GAAWC,GAIX4B,IAAOnJ,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCkG,EAAAA,EAAAA,KAAI9J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHT,CAAC,IAAM,IAAM,IAAM,IAAM,OAGgBQ,EAAAA,EAAAA,IAAIR,EAAAA,GAAAA,OAAAA,WAAwBwD,EAAAA,EAAAA,KAAS,MAAMzD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAF3F,CAAC,GAAK,GAAK,EAAG,IAAK,QAKlC,IAAuCyJ,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMiI,IAAY5P,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFpC,CAAC,GAAK,IAAM,GAAM,IAAM,GAAK,OAIjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,GACAyG,UAAAA,KAED,CACDzG,KAAAA,KAEIf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMG,MAEP,CACDtH,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,kBACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM4G,IACL,CACDtG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,shBCjD/CoC,GAAiB,gBACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBCL/CoC,GAAiB,UACjBsF,GAAWC,GAGXmC,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFf,CAAC,IAAK,EAAG,IAAK,IAAK,KAE+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAC7G6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEsH,IAAAA,KAEzDtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAIpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4XCvB/CoC,GAAiB,YACjBsF,GAAWC,GAEJ3H,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCR/CoC,GAAiB,mBACjBsF,GAAWC,GAGXwC,IAAahM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADR,CAAC,IAAM,KAAO,IAAM,KAAO,MAE1C4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNqF,WAAAA,MAIE3B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMe,QAIZ,OAAmBd,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCpB/CoC,GAAiB,cACjBsF,GAAWC,GAEjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAmCC,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMC,GAAS,CAAC,IAAM,IAAM,IAAM,GAAK,KACjCC,GAAU,CAAC,IAAM,IAAM,IAAM,IAAM,KACnChB,IAAOhH,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkM,GAAQ,CAAE5G,KAAM,MAAQwE,EAArE,IAA0EK,EAAAA,IAC9HiC,IAAYjI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmM,GAAS,CAAE7G,KAAM,MAAQwE,EAAtE,IAA2EK,EAAAA,IAC7HvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,GACAiB,UAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNpF,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,SAAU,CAAEU,MAAOvB,IAC5BiB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMoB,MAFS,QAMhD,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4gBChC/CoC,GAAiB,mBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAGMwB,IAAOnJ,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFhC,CAAC,IAAM,IAAM,IAAM,IAAM,KAE0C,CAAEsF,KAAM,OACrFuG,IAAS7J,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFpC,CAAC,GAAI,GAAI,GAAI,GAAI,MAIzB4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,GACAU,OAAAA,MAIEzB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,iBACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMa,IACL,CACDP,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCtC/CoC,GAAiB,cACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEMuK,IAAWlS,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADpC,CAAC,IAAM,GAAK,IAAM,IAAM,KAC+C,CAAEsF,KAAM,OACzF6F,IAAOnJ,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,cAAqB8L,EAAAA,GAAAA,QAAgBoI,IAClDtS,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD1C,SAAU,CACRF,OAAQ,CACNyE,KAAAA,OAKAf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ2T,GAAUhU,EAAAA,GAAAA,KAAY,UACnC,CACDoL,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,KACL,CACDgG,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC1C/CoC,GAAiB,4BACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMC,GAAS,CAAC,KAAO,KAAO,KAAO,KAAO,KAEtCf,IAAOhH,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkM,GAAQ,CAAE5G,KAAM,MAAQwE,EAArE,IAA0EK,EAAAA,IAC9HqB,IAAWxJ,EAAAA,EAAAA,IAAMiK,GAAW,KAAKlM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAF/B,CAAC,IAAM,IAAM,IAAM,IAAM,KAE2C,CAAEsF,KAAM,OACjF1D,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNyE,KAAAA,GACAK,SAAAA,MAGEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNpF,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,cACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,OAAQ,CAAEU,MAAOvB,IAC1BiB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMQ,MAFS,QAMhD,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ghBC7B/CoC,GAAiB,uBACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMkI,GAAS,CAAC,IAAM,GAAK,IAAM,IAAM,KACjCjE,IAAc/L,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmU,GAAQ,CAAE7O,KAAM,MAAQwE,EAArE,IAA0EK,EAAAA,IACrIwB,IAAexH,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmU,GAAQ,CAAE7O,KAAM,MAAQwE,EAArE,IAA0EK,EAAAA,IAC/HvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNwJ,YAAAA,GACAvE,aAAAA,MAGEvB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNvB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,kBACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMkF,IAAe,CAAElF,KAAMW,MAFE,QAMhD,OAAmBV,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBC3B/CoC,GAAiB,aACjBsF,GAAWC,GAEjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMc,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChCX,IAAYjI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+M,GAAO,CAAEzH,KAAM,MAAQwE,EAApE,IAAyEK,EAAAA,IAC3HvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACN0F,UAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNpF,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMoB,MAFyB,QAMhD,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,gmBC1B/CoC,GAAiB,eACjBsF,GAAWC,GAIXgE,IAAU/J,EAAAA,EAAAA,IAAQ,KAClB4I,IAAYrM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHR,CAAC,IAAM,GAAK,IAAM,IAAM,MAItC0L,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJf,CAAC,GAAK,IAAM,GAAK,IAAM,GAI2B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAC7G6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEnBM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN0F,UAAAA,GACAmB,QAAAA,KAED,CACD7B,IAAAA,KAGItB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMoB,IACL,CACDpB,KAAMuC,IACL,CACDvC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAIpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ikBClC/CoC,GAAiB,cACjBsF,GAAWC,GAKXoH,IAAM5Q,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHR,CAAC,GAAK,IAAM,GAAK,IAAM,IAGkB,CAAEsF,KAAM,MAC/D,IAAuCmE,EAAAA,EAAAA,IAAKzF,GAAK,oBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMyK,IAAOhU,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJb,CAAC,KAAO,IAAM,KAAO,KAAO,MAImB,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,IACxEqU,IAAOrS,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnChC,EAAAA,EAAAA,IAAM,KAAM2H,IAAavJ,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALtB,CAAC,IAAM,KAAO,KAAO,KAAO,MAKiC,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,IAAkBE,EAAAA,GAAAA,KAAY,SACzH0B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNiK,IAAAA,IAEFjI,MAAO,CACL+D,KAAKjM,EAAAA,EAAAA,IAAI4T,GAAMC,MAEhB,CACDC,MAAOD,KAGHjK,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM2F,IACL,CACD3F,MAAMzK,EAAAA,EAAAA,IAAQ6T,GAAMlU,EAAAA,GAAAA,KAAY,WAEjC,CACD2D,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAClCM,MAAMD,EAAAA,EAAAA,IAAG,gBAAiB,CAAEnH,QAAS,KACrCqH,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ8T,GAAMnU,EAAAA,GAAAA,KAAY,eAM1C,OAAmB+K,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,mhBC9C/CoC,GAAiB,yBACjBsF,GAAWC,GAEjB,IAAqCE,EAAAA,EAAAA,IAAKzF,GAAK,UAA/C,iBAAOuQ,GAAP,MAAuBC,GAAvB,MAGMC,GAAe,CAAC,IAAM,IAAM,IAAM,IAAM,KACxC/D,IAAY7G,EAAAA,EAAAA,IAAM,EAAG,GACrB6K,IAAU1S,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAK5D,EAAAA,EAAAA,KAC3CL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJO,CAAC,IAAM,IAAM,IAAM,IAAM,MAIM,CAAEsF,KAAM,MACxDtF,EAAAA,GAAAA,OAAAA,QACCE,EAAAA,GAAAA,KAAY,QACTyU,IAAYxQ,EAAAA,EAAAA,IAAOqQ,GAAYxT,OAAOqC,YAAYqN,GAAUlJ,KAAI,SAAAuJ,GAAK,MAAI,CAC7EA,GACA3Q,EAAAA,EAAAA,IACE2Q,GACAhR,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0ByU,GAAc,CAAEnP,KAAM,MAC1DtF,EAAAA,GAAAA,OAAAA,QALuE,KAOtEmK,EAAAA,GAAQjK,EAAAA,GAAAA,KAAY,QACnBuM,IAAMzK,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKxD,EAAAA,EAAAA,IAAIkU,GAASC,KAEhD/S,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChDZ,MAAO,CACL+D,IAAAA,KAED,CACDA,IAAAA,KAGIrC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM0J,MAEP,CACD7Q,MAAO2Q,GACPhK,KAAM+J,GACN9J,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,eACTE,OAAQ7J,OAAOqC,YAAYqN,GAAUlJ,KAAI,SAAAsC,GAAC,MACxC,CAACA,EAAG,CACFc,MAAMD,EAAAA,EAAAA,IAAG,OAAQ,CAAEU,MAAOvB,IAC1BiB,OAAQ,CAAC,CACPC,KAAM2J,IACL,CACDrJ,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OAR8B,QAc9C,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ghBC3D/CoC,GAAiB,WACjBsF,GAAWC,GAIXU,IAAalK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,IAAM,GAAK,IAAM,IAAM,MAGvC4U,IAAkB7U,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFZ,CAAC,IAAM,KAAO,IAAM,KAAO,MAI3C4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNuD,WAAAA,GACA2K,gBAAAA,MAIExK,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMf,IAAc,CAAEe,KAAM4J,QAG3C,OAAmB3J,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wtBCtB/CoC,GAAiB,mBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAIA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMiE,IAAU7N,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJR,CAAC,GAAK,IAAM,GAAK,IAAM,KAMzC,IAA6CyJ,EAAAA,EAAAA,IAAKzF,GAAK,cAAvD,iBAAOyJ,GAAP,MAA2BC,GAA3B,MAEMxB,IAASnM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAPV,CAAC,IAAM,IAAM,IAAM,IAAM,MAQlC6N,IAAYzN,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAGwB,EAAAA,EAAAA,IAAM0L,GAAgB,YAAa,KAC1CvJ,EAAAA,EAAAA,IAAOwF,GAAa3I,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MACtD,CAACA,GAAG1J,EAAAA,EAAAA,IAAK8L,GAAQpC,GADqC,KAC9BK,EAAAA,KAGtBvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNkH,QAAAA,GACAzC,KAAM0C,MAIJzD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM4C,MAEP,CACD/J,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,QACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAM6C,IACL,CACDvC,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OARgC,MAY3C,CACDzB,MAAO6J,GACPlD,KAAMiD,GACNhD,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,GAAYd,GAAI,WAClDoB,MAAMD,EAAAA,EAAAA,IAAG,qBACTE,OAAQ,CACN8C,UAAW,CACT5C,OAAQ,CAAC,CACPO,KAAM9B,GAAI,aACV3F,MAAO,IACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCnE/CoC,GAAiB,kBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,uBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMC,IAAcC,EAAAA,EAAAA,IAAM,EAAG,IAAIrC,KAAI,SAAAsC,GAAC,OAAQ,GAAJA,CAAJ,IAChCC,GAAQ,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,OACzCC,GAAM,CAAC,GAAK,GAAK,GAAK,GAAK,IAC3BC,IAAa9F,EAAAA,EAAAA,IAAOwF,GAAa3I,OAAOqC,YAAYuG,GAAYpC,KAAI,SAAAsC,GAAC,MAAI,CAACA,GAAGI,EAAAA,EAAAA,KAAI9J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+J,GAAO,CAAEzE,KAAM,MAAQwE,IAAI/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BgK,GAAK,CAAE1E,KAAM,OAAjI,KAA6I6E,EAAAA,IAClNvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNuD,WAAAA,MAIEG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAClCM,KAAMpB,GAAI,SACVqB,OAAQ7J,OAAOqC,YAAYuG,GAAYpC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,KAAMd,EAAEgB,WACRC,OAAQ,CAAC,CAAEC,KAAMf,MAFyB,QAMhD,OAAmBgB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ihBC9B/CoC,GAAiB,cACjBsF,GAAWC,GAGX2G,IAAcnQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADf,CAAC,IAAM,GAAM,IAAM,IAAM,MAElC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNwJ,YAAAA,MAIE9F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMkF,QAIZ,OAAmBjF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,ICJ/C2C,GAAiD,CACrDsQ,mBAAAA,GACAC,eAAAA,GACAC,YAAAA,GACAC,gBAAAA,GACAC,aAAAA,GACAC,WAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,mBAAAA,GACAC,cAAAA,GACAC,QAAAA,GACAC,UAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,0BAAAA,GACAC,qBAAAA,GACAC,WAAAA,GACAC,aAAAA,GACAC,YAAAA,GACAC,uBAAAA,GACAC,SAAAA,GACAC,iBAAAA,GACAC,gBAAAA,GACAC,YAAAA,IAEF,M,ygBC5CMtS,GAAiB,cACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MACM2K,GAAS,CAAC,IAAK,KAAM,IAAK,KAAM,KAEtC,IAAuC1K,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWrH,EAAAA,EAAAA,IAAOwF,IAAD,WAClB5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,KAAK,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmU,IAASrK,EAAtD,KAC9BK,EAAAA,IAGGvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAIEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,IAAIrC,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CACnDR,MAAMD,EAAAA,EAAAA,IAAG,UAAW,CAAEU,MAAOD,IAC7BL,OAAQ,CAAC,CACPC,KAAMQ,MAHmC,QASjD,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0gBCjC/CoC,GAAiB,UACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MACM+M,GAAa,CAAC,IAAM,IAAM,IAAM,IAAM,KAG5C,IAAuC9M,EAAAA,EAAAA,IAAKzF,GAAK,gBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMuG,IAAcnQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BuW,GAAYrW,EAAAA,GAAAA,KAAY,gBAC1EyL,IAAe5L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BuW,GAAYrW,EAAAA,GAAAA,KAAY,iBAE3EiU,IAASpU,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANL,CAAC,IAAM,GAAM,IAAM,IAAM,MAOvCwW,IAAoBrS,EAAAA,EAAAA,IAAOwF,IAAD,WAC3B5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAK+T,GAAQrK,EAAjB,KAC7BK,EAAAA,GAAQjK,EAAAA,GAAAA,KAAY,gBACjBuW,IAAqBtS,EAAAA,EAAAA,IAAOwF,IAAD,WAC5B5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAK+T,GAAQrK,EAAjB,KAC7BK,EAAAA,GAAQjK,EAAAA,GAAAA,KAAY,iBAGjB0B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNwJ,aAAa1P,EAAAA,EAAAA,IAAI0P,GAAasG,IAC9B7K,cAAcnL,EAAAA,EAAAA,IAAImL,GAAc8K,OAI9BrM,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMkF,IACL,CACDlF,KAAMW,MAEP,CACD9H,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMpB,GAAI,YACVqB,QAAQ9J,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMD,EAAAA,EAAAA,IAAG,UAAW,CAAEU,MAAOvB,EAAI,KACjCiB,OAAQ,CAAC,CACPC,KAAMwL,IACL,CACDxL,KAAMyL,KALyB,OAUvC,OAAmBxL,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+jBCrD/CoC,GAAiB,gBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAKA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEM+M,IAAW3W,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALZ,CAAC,IAAM,GAAK,IAAM,IAAM,MAMjC2W,IAAY3U,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALrC,CAAC,GAAK,IAAM,GAAK,IAAM,MAOjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNiK,IAAK+F,GACLlL,SAAUmL,MAIRvM,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM0L,MAEP,CACD7S,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM2L,UAMhB,OAAmB1L,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCxC/CoC,GAAiB,mBACjBsF,GAAWC,GACX2C,GAAS,CAAC,IAAK,IAAK,IAAK,IAAK,KAEpC,IAAuCzC,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOhH,EAAAA,EAAAA,IAAOwF,IAAD,WACd5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkM,IAASpC,EAAtD,KAC7BK,EAAAA,IAGGvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,MAIEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CAClDR,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OAPkC,QAahD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,shBCrC/CoC,GAAiB,cACjBsF,GAAWC,GAEXqN,GAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAC7BC,GAAW,CAAC,KAAO,KAAO,KAAO,KAAO,MAC9C,IAAuCpN,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOhH,EAAAA,EAAAA,IAAOwF,IAAD,WACd5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B4W,IAAQ9M,EAArD,KAC7BK,EAAAA,IACGoD,IAAUpJ,EAAAA,EAAAA,IAAOwF,IAAD,WACjB5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6W,IAAW/M,EAAxD,KAC7BK,EAAAA,IAEGvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,GACAoC,QAAAA,MAIEnD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,yBACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,OAAQ,CAAEU,MAAOvB,IAC1BiB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMuC,MALkC,QAUhD,OAAmBtC,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ukBCtC/CoC,GAAiB,iBACvB,IAAgBlD,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MACMF,GAAWC,GAKjB,IAA6BE,EAAAA,EAAAA,IAAKzF,GAAK,qBAAvC,iBAAO8J,GAAP,MAAiBC,GAAjB,MACMlC,IAAS9L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALP,CAAC,GAAI,GAAI,GAAI,IAAK,KAK0BE,EAAAA,GAAAA,KAAY,WAIpE4W,IAAU9U,EAAAA,EAAAA,IAAM+L,GAAU,MAAMhO,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAR7B,CAAC,IAAK,IAAK,IAAK,IAAK,KAQ8CE,EAAAA,GAAAA,KAAY,YAC5FiL,IAAOnJ,EAAAA,EAAAA,IAAM+L,GAAU,MAAMhO,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAR/B,CAAC,GAAM,IAAM,GAAM,IAAM,MAU1B4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNmF,OAAAA,IAEFjF,SAAU,CACRF,OAAQ,CACNyE,KAAAA,GACAU,OAAQiL,OAIR1M,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMa,MAEP,CACDhI,MAAOkK,GACPvD,KAAMsD,GACNlH,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM8L,IACL,CACD9L,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBCxD/CoC,GAAiB,iBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAmCC,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAO+S,GAAP,MAAsBC,GAAtB,MACMC,GAAiB,CACrBC,WAAWnX,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B,CAAC,IAAM,KAAO,IAAM,KAAO,MAC1EmX,WAAWpX,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B,CAAC,GAAK,KAAO,IAAM,KAAO,KACzEoX,WAAWrX,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B,CAAC,IAAM,KAAO,IAAM,KAAO,OAEtEqX,IAAalT,EAAAA,EAAAA,IAAO6S,GAAWC,GAAgB9M,EAAAA,IAE/CvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAU6L,MAIRjN,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOmT,GACPxM,KAAMuM,GACNtM,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ7J,OAAOqC,YAAYrC,OAAOC,KAAKgW,IAAgBzP,KAAI,SAAA8P,GAAK,MAAI,CAClEA,EACA,CACE1M,KAAMpB,GAAI,UAAD,OAAW8N,IACpBvM,OAAQ,CAAC,CAAEC,KAAMqM,MAJ2C,QAQpE,OAAmBpM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBCrC/CoC,GAAiB,iBACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ygBCL/CoC,GAAiB,WACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEM+N,GAAe,CAAC,IAAK,GAAK,IAAK,IAAK,KACpCC,GAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,KAErCC,IAAa1X,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BuX,GAAcrX,EAAAA,GAAAA,KAAY,gBAC3EwX,IAAc3X,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwX,GAAetX,EAAAA,GAAAA,KAAY,iBAEnF,IAAuCuJ,EAAAA,EAAAA,IAAKzF,GAAK,YAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMgO,IAAiB3V,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BuX,GAAcrX,EAAAA,GAAAA,KAAY,iBACxG0X,IAAkB5V,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwX,GAAetX,EAAAA,GAAAA,KAAY,kBAE1G0B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNwJ,aAAa1P,EAAAA,EAAAA,IAAIiX,GAAYE,IAC7BhM,cAAcnL,EAAAA,EAAAA,IAAIkX,GAAaE,OAI7BxN,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMyM,IACL,CACDzM,KAAM0M,MAEP,CACD7T,MAAO8F,GACPa,KAAMd,GACNkB,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM2M,IACL,CACD3M,KAAM4M,UAOhB,OAAmB3M,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,yXCpD/C0H,GAAWC,GACXvF,GAAiB,aACVpC,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBCN/CoC,GAAiB,cACjBsF,GAAWC,GAEXsO,GAAiB,CAAC,IAAM,IAAM,IAAM,IAAM,KAC1CxG,GAAcrQ,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAAC,GAAD,OACzDA,EADyD,UAE5DzB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6X,GAAgB,CAAEvS,KAAM,MAFJ,KAM1D,IAAuCmE,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMmD,IAAiB9K,EAAAA,EAAAA,IAAM2H,GAAa,MACxCvJ,EAAAA,EAAAA,KACEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJY,CAAC,IAAK,EAAG,IAAK,IAAK,KAIc,CAAEsF,KAAM,MAC/DtF,EAAAA,GAAAA,MAAAA,SAGE4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,QAAO,kBACF2K,IADC,IAEJvE,eAAAA,OAIE1C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ/J,OAAO8C,OAAOuN,IAAa7J,KAAI,SAAAwD,GAAI,MAAK,CAC9CA,KAAAA,EADyC,KAG1C,CACDnH,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,iBACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM8B,IACL,CACDxB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,KACL,CACDgG,MAAMX,EAAAA,EAAAA,IAAG,WACT9G,MAAO,IACN,CACDyH,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ygBCxD/CoC,GAAiB,cACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEMkC,IAAS7J,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADhC,CAAC,GAAI,GAAI,IAAK,IAAK,OAG/B0L,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKW,EAAAA,GAAAA,KACvCvE,EAAAA,EAAAA,KACEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHE,CAAC,EAAG,IAAK,IAAK,IAAK,KAGc,CAAEsF,KAAM,MACrDtF,EAAAA,GAAAA,MAAAA,KAEF,cAGI4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNmF,OAAAA,KAED,CACDH,IAAAA,KAGItB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,YAE/B,CACD9G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,yBACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMa,IACL,CACDP,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,KACL,CACDgG,MAAMC,EAAAA,EAAAA,IAAI,MACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4gBCrD/CoC,GAAiB,YACjBsF,GAAWC,GAGXmC,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFjB,CAAC,EAAG,KAAM,IAAK,KAAM,IAE8BA,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAAE6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEjHM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEsH,IAAAA,KAEzDtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAKpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,mhBCrB/CoC,GAAiB,oBACjBsF,GAAWC,GAKjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,sBAA7C,iBAAO8T,GAAP,MAAsBC,GAAtB,MACA,IAAqCtO,EAAAA,EAAAA,IAAKzF,GAAK,uBAA/C,iBAAOgU,GAAP,MAAuBC,GAAvB,MAEMlM,IAAa/J,EAAAA,EAAAA,IAAM+V,GAAW,MAAMhY,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANhC,CAAC,GAAK,IAAK,GAAK,IAAK,MAOnCkQ,IAAclO,EAAAA,EAAAA,IAAMiW,GAAY,MAAMlY,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANjC,CAAC,GAAK,IAAK,GAAK,IAAK,MAQpC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNqF,WAAAA,GACAmE,YAAAA,MAIE9F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoU,GACPzN,KAAMwN,GACNvN,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,eACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMkF,IACL,CACD5E,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,SAIX,CACDzB,MAAOkU,GACPvN,KAAMsN,GACNrN,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,gBACTE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDT,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ygBCvD/CoC,GAAiB,aACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,uBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMC,IAAcC,EAAAA,EAAAA,IAAM,EAAG,IAAIrC,KAAI,SAAAsC,GAAC,OAAQ,GAAJA,CAAJ,IAChCC,GAAQ,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,OACzCC,GAAM,CAAC,GAAK,GAAK,GAAK,GAAK,IAC3BC,IAAa9F,EAAAA,EAAAA,IAAOwF,GAAa3I,OAAOqC,YAAYuG,GAAYpC,KAAI,SAAAsC,GAAC,MAAI,CAACA,GAAGI,EAAAA,EAAAA,KAAI9J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+J,GAAO,CAAEzE,KAAM,MAAQwE,IAAI/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BgK,GAAK,CAAE1E,KAAM,OAAjI,KAA6I6E,EAAAA,IAClNvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNuD,WAAAA,MAIEG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,SACVqB,OAAQ7J,OAAOqC,YAAYuG,GAAYpC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,KAAMd,EAAEgB,WACRC,OAAQ,CAAC,CAAEC,KAAMf,MAFyB,QAMhD,OAAmBgB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+gBC7B/CoC,GAAiB,YACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MACM0O,GAAS,CAAC,IAAM,IAAM,IAAM,IAAM,KAMxC,IAAuCzO,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEMoC,IAAahM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkY,IACjDjO,IAAalK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkY,IACjD/M,IAAOhH,EAAAA,EAAAA,IAAOwF,GAAa,CAC/B,GAAK5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAVG,CAAC,GAAK,KAAO,IAAM,KAAO,KAUW,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YATpD,CAAC,GAAK,IAAM,GAAK,IAAM,KAUzC,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YATG,CAAC,GAAK,KAAO,IAAM,KAAO,KASW,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YARpD,CAAC,IAAM,GAAK,IAAM,IAAM,OASzCmK,EAAAA,IAEGvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNqF,WAAAA,GACA9B,WAAAA,GACAkB,KAAAA,MAIEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAMf,MAEP,CACDpG,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMpB,GAAI,YACVqB,QAAQ9J,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMG,KAHyB,OAQvC,OAAmBF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4fCjD/CoC,GAAiB,WACjBsF,GAAWC,GAEX4O,IAAY3U,EAAAA,EAAAA,IAAQ,IACpB4U,IAAa5U,EAAAA,EAAAA,IAAQ,IAC3B,IAAuCiG,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMuG,IAAc/L,EAAAA,EAAAA,IAAOwF,IAAD,WACrB5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAK+X,GAAWrO,EAApB,KAC7BK,EAAAA,IACGwB,IAAexH,EAAAA,EAAAA,IAAOwF,IAAD,WACtB5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAKgY,GAAYtO,EAArB,KAC7BK,EAAAA,IACGsC,IAAMzK,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,cAAqB,OAAQ,IAGzC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNwJ,YAAAA,GACAvE,aAAAA,GACAc,IAAAA,MAIErC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,cACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CAClDR,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMkF,IACL,CACDlF,KAAMW,IACL,CACDL,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OATkC,QAehD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wgBC/C/CoC,GAAiB,oBACvB,IAAgBlD,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MACMF,GAAWC,GAGjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,eAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFlC,CAAC,IAAK,IAAK,IAAK,IAAK,OAG7BuR,IAAWvP,EAAAA,EAAAA,IAAM2H,GAAa,MAAMnG,EAAAA,EAAAA,IAAQ,KAE5C5B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,GACAoG,SAAAA,MAIEnH,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMuG,IACL,CACDjG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ygBCvC/CoC,GAAiB,WACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAIA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,uBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWxJ,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHlC,CAAC,IAAK,IAAK,IAAK,IAAK,OAKjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAIEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAOhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0gBChC/CoC,GAAiB,aACjBsF,GAAWC,GAGX8O,IAAUrW,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACtCgB,EAAAA,GAAAA,KAAe5E,EAAAA,EAAAA,IAAKJ,EAAAA,GAAAA,MAAAA,IAAgBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAF9B,CAAC,IAAK,GAAK,IAAK,IAAK,SAIjC4B,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEiU,QAAAA,KAEzDjO,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ8X,GAAS,CAAEzN,MAAMW,EAAAA,EAAAA,IAAI,WAAY1F,QAAS,cAK9D,OAAmBoF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wgBCpB/CoC,GAAiB,WACjBsF,GAAWC,GAEX+O,GAAa,CAAC,IAAK,GAAK,IAAK,IAAK,KACxC,IAAuC7O,EAAAA,EAAAA,IAAKzF,GAAK,SAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMyC,IAAYjI,EAAAA,EAAAA,IAAOwF,IAAD,WACnB5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsY,IAAaxO,EAA1D,KAC7BK,EAAAA,IAEGvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN0F,UAAAA,MAIEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMoB,MAHkC,QAQhD,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wgBChC/CoC,GAAiB,OACjBsF,GAAWC,GAIX2G,IAAcnQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFT,CAAC,GAAI,GAAI,GAAI,GAAI,KAGhC2L,IAAerK,EAAAA,EAAAA,KAAU,IAEzBM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNwJ,YAAAA,GACAvE,aAAAA,MAIEvB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMkF,IACL,CACDlF,KAAMW,QAIZ,OAAmBV,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC9B/CoC,GAAiB,iBACjBsF,GAAWC,GAEX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wXCV/C0H,GAAWC,GACXvF,GAAiB,qBACVpC,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4gBCN/CoC,GAAiB,oBACjBsF,GAAWC,GAGXgP,IAAexY,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADT,CAAC,IAAK,GAAK,IAAK,IAAK,MAGrC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN6R,aAAAA,MAIEnO,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMuN,QAIZ,OAAmBtN,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,slBCrB/CoC,GAAiB,cACjBsF,GAAWC,GAGXiP,IAAUhV,EAAAA,EAAAA,IAAQ,MAClBiV,IAAW1Y,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFX,CAAC,GAAK,IAAK,GAAK,IAAK,KAG/B0L,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,IAAKoY,GAASxY,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAAE6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAE9EM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN+R,SAAAA,KAED,CACD/M,IAAAA,KAGItB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMyN,IACL,CACDzN,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAKpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBC9B/CoC,GAAiB,YACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEMkP,GAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAErC,IAAuCjP,EAAAA,EAAAA,IAAKzF,GAAK,aAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMgP,IAAiB3W,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B0Y,IAAUxY,EAAAA,GAAAA,KAAY,gBACpG0Y,IAAkB5W,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B0Y,IAAUxY,EAAAA,GAAAA,KAAY,iBACrG2Y,IAAiB7W,EAAAA,EAAAA,IAAM2H,QAAavF,GAAWZ,EAAAA,EAAAA,KAAS,GAAKtD,EAAAA,GAAAA,KAAY,iBACzE4Y,IAAkB9W,EAAAA,EAAAA,IAAM2H,QAAavF,GAAWZ,EAAAA,EAAAA,KAAS,GAAKtD,EAAAA,GAAAA,KAAY,kBAE1E0B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNwJ,aAAa1P,EAAAA,EAAAA,IAAImY,GAAgBE,IACjClN,cAAcnL,EAAAA,EAAAA,IAAIoY,GAAiBE,OAIjC1O,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM6N,IACL,CACD7N,KAAM8N,MAEP,CACDjV,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMpB,GAAI,YACVqB,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM2N,IACL,CACD3N,KAAM4N,UAMhB,OAAmB3N,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wgBC9C/CoC,GAAiB,gBACjBsF,GAAWC,GAEXwP,GAAiB,CAAC,IAAM,GAAM,IAAM,IAAM,KAC1ChN,IAAahM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+Y,IACjD9O,IAAalK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+Y,IAE1CnX,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNqF,WAAAA,GACA9B,WAAAA,MAGEG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAMf,QAIZ,OAAmBgB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCxB/CoC,GAAiB,qBACjBsF,GAAWC,GAGXmC,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFb,CAAC,GAAI,GAAI,GAAI,GAAI,KAEkCA,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAAE6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAErHM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEsH,IAAAA,KACzDtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAKpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,kkBCnB/CoC,GAAiB,kBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAOA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOpL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANR,CAAC,GAAM,IAAM,GAAM,IAAM,KAOlCkQ,IAAc/L,EAAAA,EAAAA,IAAOwF,GAAa,CACtC,GAAK5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAPA,CAAC,IAAM,IAAM,IAAM,IAAM,MAOY,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANpD,CAAC,IAAM,GAAK,IAAM,IAAM,MAMiE,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALxG,CAAC,GAAK,GAAK,GAAK,GAAK,MAMnCmK,EAAAA,IAEGvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,GACA+E,YAAAA,MAIE9F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMG,MAEP,CACDtH,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMpB,GAAI,YACVqB,QAAQ9J,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMkF,KAHyB,OAQvC,OAAmBjF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4gBC3C/CoC,GAAiB,eACjBsF,GAAWC,GAGXmC,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKW,EAAAA,GAAAA,KACvCvE,EAAAA,EAAAA,KACEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHC,CAAC,GAAK,EAAG,IAAK,IAAK,KAGc,CAAEsF,KAAM,MACpDtF,EAAAA,GAAAA,MAAAA,KAEF,cAGI4B,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAEsH,IAAAA,KAEzDtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAIpC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,wgBCzB/CoC,GAAiB,eACjBsF,GAAWC,GAGjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM2H,GAAa,MAAM5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFlC,CAAC,IAAK,GAAK,IAAK,IAAK,OAI7B4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,MAIEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,kBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,WAOhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,ICV/CoX,GAAyC,CAC7CC,YAAAA,GACAC,QAAAA,GACAC,cAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,eAAAA,GACAC,eAAAA,GACAC,eAAAA,GACAC,SAAAA,GACAC,WAAAA,GACAC,YAAAA,GACAC,YAAAA,GACAC,UAAAA,GACAC,kBAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,SAAAA,GACAC,kBAAAA,GACAC,SAAAA,GACAC,WAAAA,GACAC,SAAAA,GACAC,KAAAA,GACAC,eAAAA,GACAC,mBAAAA,GACAC,kBAAAA,GACAC,YAAAA,GACAC,UAAAA,GACAC,cAAAA,GACAC,mBAAAA,GACAC,gBAAAA,GACAC,aAAAA,GACAC,aAAAA,IAEF,M,8XC9DM1R,GAAWC,GACXvF,GAAiB,mBACVpC,GAAO4G,EAAsBxE,GAAKsF,IACzCc,IAAmB,kBACpBd,IADoB,IAEvBe,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ihBCL/CoC,GAAiB,kBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMuB,IAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,IAAO/K,EAAAA,EAAAA,KAAK+D,EAAAA,EAAAA,IAAOwF,IAAa5I,EAAAA,EAAAA,GAAamK,IAAmB,SAAApB,GAAC,OAAIxI,EAAAA,EAAAA,IAASwI,EAAb,IAAkB,IACvF/J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAMA,MAIJf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OAAQ7J,OAAOqC,YAAY6H,GAAkB1D,KAAI,SAAA4D,GAAC,MAAI,CAACA,EAAG,CACxDR,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OAPwC,QAYtD,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCpC/CoC,GAAiB,cACjBsF,GAAWC,GAKjB,IAAqCE,EAAAA,EAAAA,IAAKzF,GAAK,qBAA/C,iBAAOgU,GAAP,MAAuBC,GAAvB,MACA,IAAuCxO,EAAAA,EAAAA,IAAKzF,GAAK,sBAAjD,iBAAOiX,GAAP,MAAwBC,GAAxB,MACMvP,IAAe3J,EAAAA,EAAAA,IAAM,KAAMiW,IAAYlY,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALjC,CAAC,IAAM,GAAK,IAAM,IAAM,OAMxCmL,IAAOnJ,EAAAA,EAAAA,IAAM,KAAMkZ,IAAanb,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALjC,CAAC,GAAK,GAAM,IAAM,IAAM,OAOjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNiF,aAAAA,GACAR,KAAAA,MAIEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoU,GACPzN,KAAMwN,GACNpN,MAAMD,EAAAA,EAAAA,IAAG,gBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMW,IACL,CACDL,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,SAIX,CACDzB,MAAOqX,GACP1Q,KAAMyQ,GACNrQ,MAAMD,EAAAA,EAAAA,IAAG,iBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCvD/CoC,GAAiB,aACjBsF,GAAWC,GAIjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,UAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHjC,CAAC,GAAK,IAAM,GAAK,IAAM,MAKhC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,MAIEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,2BACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,0kBCnC/CoC,GAAiB,sBACjBsF,GAAWC,GAGjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MACMqD,IAAgB7K,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAC5C5D,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHD,CAAC,IAAM,KAAO,IAAM,KAAO,KAGS,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,KAC9Dmb,IAAQpb,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsJ,GAASuG,SAASrI,KAAI,SAAAF,GAAC,uBAAIA,EAAE6T,aAAN,QAAe1T,GAAf,KAC5D7F,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACNmG,cAAAA,GACAsO,MAAAA,KAED,CACDtO,cAAAA,KAEIzC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAMmQ,IACL,CACD7P,KAAM9B,GAAI,QACVwB,KAAM6B,QAIZ,OAAmB5B,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBC5B/CoC,GAAiB,kBACjBsF,GAAWC,GAGXmC,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFf,CAAC,IAAK,IAAK,EAAG,IAAK,KAE+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC9G6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAC3D6L,KAAMvE,KAGFtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,cAG7C,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ihBCzB/CoC,GAAiB,gBACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCL/CoC,GAAiB,cACjBsF,GAAWC,GAIX6D,IAASpL,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACrCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHZ,CAAC,GAAK,IAAM,IAAK,KAAM,KAG2B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAChH6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEnB+L,IAAcrL,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAC1CW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANX,CAAC,EAAG,IAAK,IAAK,IAAK,KAM+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACjH6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAGnBM,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAC3DgJ,OAAAA,GACAC,YAAAA,KAEIjD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ6M,GAAQ,CAAExC,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,aAClD,CACDD,MAAMzK,EAAAA,EAAAA,IAAQ8M,GAAa,CAAEzC,KAAMK,EAAAA,EAAAA,IAAgBjH,GAAhBiH,CAAqB,0BAI9D,OAAmBA,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ihBC9B/CoC,GAAiB,qBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEM4R,GAAY,CAAC,GAAI,GAAI,GAAI,GAAI,IACnC,IAAqC3R,EAAAA,EAAAA,IAAKzF,GAAK,UAA/C,iBAAOuQ,GAAP,MAAuBC,GAAvB,MACM9D,IAAY7G,EAAAA,EAAAA,IAAM,EAAG,GACrBgC,IAAS1H,EAAAA,EAAAA,IAAOqQ,GAAYxT,OAAOqC,YAAYqN,GAAUlJ,KAAI,SAAA0J,GAAM,MAAI,CAC3EA,GACA9Q,EAAAA,EAAAA,KACEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0Bob,IACpClK,GAJqE,KAMpE/G,EAAAA,IAECgB,IAAOhH,EAAAA,EAAAA,IAAOqQ,GAAYxT,OAAOqC,YAAYqN,GAAUlJ,KAAI,SAAA0J,GAAM,MAAI,CACzEA,GACA9Q,EAAAA,EAAAA,KACEoD,EAAAA,EAAAA,KAAS,KACT0N,GAJmE,KAMlE/G,EAAAA,IAECvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNmF,OAAAA,GACAV,KAAAA,MAIEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDH,KAAM+J,GACN1Q,MAAO2Q,GACP5J,KAAMpB,GAAI,aACVqB,OAAQ7J,OAAOqC,YAAYqN,GAAUlJ,KAAI,SAAAuJ,GAAK,MAAI,CAChDA,EACA,CACEnG,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAO0F,IAC3BhG,OAAQ,CAAC,CACPC,KAAMa,IACL,CACDb,KAAMG,MAPkC,QAalD,OAAmBF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,+iBClD/CoC,GAAiB,eACjBsF,GAAWC,GAIjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,gBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM0R,IAAStb,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHK,CAAC,GAAK,KAAO,IAAM,KAAO,KAIlDsb,IAAiBtZ,EAAAA,EAAAA,IAAM,QAAS2H,GAAa0R,IAC7CE,IAAgBvZ,EAAAA,EAAAA,IAAM,OAAQ2H,GAAa0R,IAC3CG,IAAexZ,EAAAA,EAAAA,IAAM,MAAO2H,GAAa0R,IACzCI,IAAiBzZ,EAAAA,EAAAA,IAAM,QAAS2H,GAAa0R,IAC7CK,IAAgB1Z,EAAAA,EAAAA,IAAM,OAAQ2H,GAAa0R,IAC3CM,IAAkB3Z,EAAAA,EAAAA,IAAM,SAAU2H,GAAa0R,IAC/CO,IAAa5Z,EAAAA,EAAAA,IAAM,QAAS8J,EAAAA,GAAAA,QAAgBwP,IAC5CO,IAAY7Z,EAAAA,EAAAA,IAAM,OAAQ8J,EAAAA,GAAAA,QAAgByP,IAC1CO,IAAW9Z,EAAAA,EAAAA,IAAM,MAAO8J,EAAAA,GAAAA,QAAgB0P,IACxCO,IAAa/Z,EAAAA,EAAAA,IAAM,QAAS8J,EAAAA,GAAAA,QAAgB2P,IAC5CO,IAAYha,EAAAA,EAAAA,IAAM,OAAQ8J,EAAAA,GAAAA,QAAgB4P,IAC1CO,IAAcja,EAAAA,EAAAA,IAAM,SAAU8J,EAAAA,GAAAA,QAAgB6P,IAE9CO,IAAmB1P,EAAAA,EAAAA,IAAQ7C,QAAavF,EAAWiX,IACnDc,IAAena,EAAAA,EAAAA,IAAM,UAAW8J,EAAAA,GAAAA,QAAgBoQ,IAEhDta,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD1C,SAAU,CACRF,OAAQ,CACNkV,WAAAA,GACAC,UAAAA,GACAM,aAAAA,GACAL,SAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,YAAAA,OAKA7R,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,6BACT/D,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNrI,MAAO,CACLoI,MAAM,UAAC,KAAD,CAAWwR,MAAM,QAAjB,UAA0B7Q,EAAAA,EAAAA,IAAI,oBACpCR,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQ+a,IAAD,QAAC,UAAqBpb,EAAAA,GAAAA,KAAY,eAAlC,IAAiDyM,YAAY,MACzE,CACD3B,MAAMzK,EAAAA,EAAAA,IAAQ2b,IAAD,QAAC,UAAuBhc,EAAAA,GAAAA,KAAY,iBAApC,IAAqDyM,YAAY,MAC7E,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OAGVxC,KAAM,CACJ8H,MAAM,UAAC,KAAD,CAAWwR,MAAM,eAAjB,UAAiC7Q,EAAAA,EAAAA,IAAI,2BAC3CR,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQgb,IAAD,QAAC,UAAoBrb,EAAAA,GAAAA,KAAY,cAAjC,IAA+CyM,YAAY,MACvE,CACD3B,MAAMzK,EAAAA,EAAAA,IAAQ2b,IAAD,QAAC,UAAuBhc,EAAAA,GAAAA,KAAY,iBAApC,IAAqDyM,YAAY,MAC7E,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OAGVnC,IAAK,CACHyH,MAAM,UAAC,KAAD,CAAWwR,MAAM,cAAjB,UAAgC7Q,EAAAA,EAAAA,IAAI,0BAC1CR,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQib,IAAD,QAAC,UAAmBtb,EAAAA,GAAAA,KAAY,aAAhC,IAA6CyM,YAAY,MACrE,CACD3B,MAAMzK,EAAAA,EAAAA,IAAQ2b,IAAD,QAAC,UAAuBhc,EAAAA,GAAAA,KAAY,iBAApC,IAAqDyM,YAAY,MAC7E,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OAGV1C,KAAM,CACJgI,MAAM,UAAC,KAAD,CAAWwR,MAAM,aAAjB,UAA+B7Q,EAAAA,EAAAA,IAAI,yBACzCR,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQmb,IAAD,QAAC,UAAoBxb,EAAAA,GAAAA,KAAY,cAAjC,IAA+CyM,YAAY,MACvE,CACD3B,MAAMzK,EAAAA,EAAAA,IAAQ2b,IAAD,QAAC,UAAuBhc,EAAAA,GAAAA,KAAY,iBAApC,IAAqDyM,YAAY,MAC7E,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OAGVtC,MAAO,CACL4H,MAAM,UAAC,KAAD,CAAWwR,MAAM,iBAAjB,UAAmC7Q,EAAAA,EAAAA,IAAI,6BAC7CR,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQkb,IAAD,QAAC,UAAqBvb,EAAAA,GAAAA,KAAY,eAAlC,IAAiDyM,YAAY,MACzE,CACD3B,MAAMzK,EAAAA,EAAAA,IAAQ2b,IAAD,QAAC,UAAuBhc,EAAAA,GAAAA,KAAY,iBAApC,IAAqDyM,YAAY,MAC7E,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OAGV7B,OAAQ,CACNmH,MAAM,UAAC,KAAD,CAAWwR,MAAM,YAAjB,UAA8B7Q,EAAAA,EAAAA,IAAI,wBACxCR,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQob,IAAD,QAAC,UAAsBzb,EAAAA,GAAAA,KAAY,gBAAnC,IAAmDyM,YAAY,MAC3E,CACD3B,MAAMzK,EAAAA,EAAAA,IAAQ2b,IAAD,QAAC,UAAuBhc,EAAAA,GAAAA,KAAY,iBAApC,IAAqDyM,YAAY,MAC7E,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,mhBC1H/CoC,GAAiB,gBACjBsF,GAAWC,GAEjB,IAA6BE,EAAAA,EAAAA,IAAKzF,GAAK,eAAvC,iBAAO8J,GAAP,MAAiBC,GAAjB,MACMsO,IAASxS,EAAAA,EAAAA,IAAM,EAAG,GAClBoG,GAAO,CAAC,IAAM,IAAM,IAAM,IAAM,KAChCqM,GAAcD,GAAO7U,KAAI,SAAAsC,GAAC,OAAI9H,EAAAA,EAAAA,IAAM+L,GAAUjE,EAAEgB,YAAY/K,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiQ,GAAKzI,KAAI,SAAA+U,GAAC,OAAIA,EAAIzS,CAAR,KAAa5J,EAAAA,GAAAA,KAAY,cAAzG,IAC1Bsc,GAAYxb,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAACA,GAAKQ,EAAAA,EAAAA,IAAM+L,GAAU,KAAKhO,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiQ,KAAnE,KAE3CrO,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,QAAO,QACLqF,WAAYvL,EAAAA,GAAAA,WAAA,UAAO8b,MAChBtb,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgBgb,GAAUhb,GAA9B,QAGvC4I,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOkK,GACPvD,KAAMsD,GACNrD,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,kBACTE,OACE7J,OAAOqC,YAAYgZ,GAAO7U,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CACrCc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAO,CAAE,CACPC,KAAMsR,GAAYxS,EAAI,KADlB,eAGHyG,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAK,CAAEwJ,KAAMwR,GAAUhb,GAAvB,OALO,QASrC,OAAmByJ,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ohBClC/CoC,GAAiB,6BACjBsF,GAAWC,GAGjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,qBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEM4H,IAAW/N,EAAAA,EAAAA,IAAQ,IACnBiZ,IAAY1c,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALV,CAAC,IAAM,GAAM,IAAM,IAAM,KAKsB,CAAEsF,KAAM,MACnEoX,GAAe1b,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAACA,GAAK2C,EAAAA,EAAAA,IAAOwF,IAAD,WACtE5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAKqc,GAAW3S,EAApB,KAC7BK,EAAAA,IAFwD,KAI9CvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,QAAO,QACL6K,SAAAA,IACGvQ,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgBkb,GAAalb,GAAjC,QAGvC4I,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CAAEC,KAAMuG,MAChB,CACD1N,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,mBACTE,QAAQ9J,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMD,EAAAA,EAAAA,IAAG,UAAW,CAAEU,MAAW,EAAJvB,IAC7BiB,OAAQwF,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAK,CAAEwJ,KAAM0R,GAAalb,GAA1B,IAFM,OAMvC,OAAmByJ,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCpC/CoC,GAAiB,aACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAGA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,sBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM6B,IAAWxJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,IAAM,IAAM,IAAM,IAAM,OAGlC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACN8E,SAAAA,MAIEpB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMQ,UAMhB,OAAmBP,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBC7B/CoC,GAAiB,YACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,kBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAGMgT,IAAY5c,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADX,CAAC,IAAM,GAAK,IAAM,IAAM,MAEnC4c,IAAUC,EAAAA,EAAAA,IAAkBtM,GAAAA,GAAa,SAAAhN,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,UAAcY,EAAAA,EAAAA,IAAOwF,IAAD,WACnE5I,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,IAAKuc,GAAW7S,EAApB,KAC7BK,EAAAA,IAF6C,IAI1CvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQkW,KAGJxS,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,KAAMpB,GAAI,YACVqB,QAAQ9J,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAO,GAAD,eAAM/J,OAAO8C,OAAO8Y,IAASpV,KAAI,SAAAwD,GAAI,MAAK,CAAEA,KAAAA,EAAP,KAArC,CAAsD,CAC1DM,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OALyB,OAUvC,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ytBClC/CoC,GAAiB,eACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAhC,iBAASwF,GAAT,MAIA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,iBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMiE,IAAU7N,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJR,CAAC,GAAK,IAAM,GAAK,IAAM,KAMzC,IAA6CyJ,EAAAA,EAAAA,IAAKzF,GAAK,cAAvD,iBAAOyJ,GAAP,MAA2BC,GAA3B,MAEMxB,IAASnM,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAPV,CAAC,IAAM,IAAM,IAAM,IAAM,MAQlC6N,IAAYzN,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAGwB,EAAAA,EAAAA,IAAM0L,GAAgB,YAAa,KAC1CvJ,EAAAA,EAAAA,IAAOwF,GAAa3I,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MACtD,CAACA,GAAG1J,EAAAA,EAAAA,IAAK8L,GAAQpC,GADqC,KAC9BK,EAAAA,KAGtBvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNkH,QAAAA,GACAzC,KAAM0C,MAIJzD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,KAAM4C,MAEP,CACD/J,MAAO8F,GACPa,KAAMd,GACNe,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,QACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAM6C,IACL,CACDvC,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,OARgC,MAY3C,CACDzB,MAAO6J,GACPlD,KAAMiD,GACNhD,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,qBACTE,OAAQ,CACN8C,UAAW,CACT5C,OAAQ,CAAC,CACPO,KAAM9B,GAAI,aACV3F,MAAO,IACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCnE/CoC,GAAiB,eACjBsF,GAAWC,GAIjB,IAA6CE,EAAAA,EAAAA,IAAKzF,GAAK,WAAvD,iBAAO8Y,GAAP,MAA2BC,GAA3B,MACMC,IAAYjd,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHL,CAAC,IAAM,GAAM,IAAM,IAAM,MAI1C4R,IAAY5P,EAAAA,EAAAA,IAAM,aAAc+a,GAAgBC,IAEhDpb,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNkL,UAAAA,MAIExH,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOkZ,GACPvS,KAAMsS,GACNrS,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,kBACTE,OAAQ,CACNoS,WAAY,CACVlS,OAAQ,CAAC,CACPC,KAAM4G,UAMhB,OAAmB3G,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC/B/CoC,GAAiB,oBACjBsF,GAAWC,GAGXyE,IAAOhM,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCgB,EAAAA,GAAAA,KAAe5E,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFf,CAAC,IAAM,MAAQ,KAAO,MAAQ,KAEqB,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,MACvE4B,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAE4J,KAAAA,KAChE5D,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQyN,GAAM,CAAEpD,MAAMW,EAAAA,EAAAA,IAAI,WAAY1F,QAAS,cAI3D,OAAmBoF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6XCrB/CoC,GAAiB,iBACjBsF,GAAWC,GACX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,4gBCL/CoC,GAAiB,iBACjBsF,GAAWC,GAEjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAGMqE,IAAOhM,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IACnCgB,EAAAA,GAAAA,KAAe5E,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHf,CAAC,IAAM,KAAO,IAAM,KAAO,KAGwB,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,MACvE4B,GAAO4G,EAAsBxE,GAAKsF,QAAUlF,EAAW,CAAE4J,KAAAA,KAChE5D,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,kBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CAAEC,MAAMzK,EAAAA,EAAAA,IAAQyN,GAAM,CAAEpD,MAAMW,EAAAA,EAAAA,IAAI,WAAY1F,QAAS,gBAKxE,OAAmBoF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCxB/CoC,GAAiB,gBACjBsF,GAAWC,GAGjB,IAAmCE,EAAAA,EAAAA,IAAKzF,GAAK,SAA7C,iBAAOgI,GAAP,MAAsBC,GAAtB,MACMc,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChCX,IAAYjI,EAAAA,EAAAA,IAAO8H,IAAWlL,EAAAA,EAAAA,IAAa8I,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAI1J,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+M,GAAO,CAAEzH,KAAM,MAAQwE,EAApE,IAAyEK,EAAAA,IAC3HvI,GAAO4G,EAAsBxE,GAAKsF,GAAU,CACvD5C,OAAQ,CACN0F,UAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoI,GACPzB,KAAMwB,GACNvB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,WACjDC,MAAMD,EAAAA,EAAAA,IAAG,oBACTE,OAAQ7J,OAAOqC,aAAYwG,EAAAA,EAAAA,IAAM,EAAG,GAAGrC,KAAI,SAAAsC,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMD,EAAAA,EAAAA,IAAG,QAAS,CAAEU,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMoB,MAFyB,QAMhD,OAAmBnB,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBC9B/CoC,GAAiB,uBACjBsF,GAAWC,GAGX3H,GAAO4G,EAAsBxE,GAAKsF,IAElCc,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CAAEE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAaS,OAAQ,MAEtE,OAAmBE,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,8gBCP/CoC,GAAiB,eACjBsF,GAAWC,GAEX2T,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,KACpCC,GAAYnc,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAACA,GAAKzB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0Bkd,IAA9C,KAGlDxR,IAAM1J,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAClCW,EAAAA,GAAAA,KAAcvE,EAAAA,EAAAA,KAAKL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHf,CAAC,IAAK,EAAG,IAAK,IAAK,KAG+B,CAAEsF,KAAM,MAAQtF,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAC7G6B,IAAK,CAAEL,KAAKF,EAAAA,EAAAA,IAAS,gBAEnBM,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,QAAO,UACF1F,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgB2b,GAAU3b,GAA9B,OAE1C,CAAEkK,IAAAA,KAECtB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTE,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,SACjDI,OAAO,GAAD,eACDwF,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAK,CAAEwJ,KAAMmS,GAAU3b,GAAvB,KADlB,CAEJ,CACEwJ,MAAMzK,EAAAA,EAAAA,IAAQmL,GAAK,CAAEd,MAAMD,EAAAA,EAAAA,IAAG,eAItC,OAAmBM,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC9B/CoC,GAAiB,aACjBsF,GAAWC,GAIjB,IAAqCE,EAAAA,EAAAA,IAAKzF,GAAK,oBAA/C,iBAAOgU,GAAP,MAAuBC,GAAvB,MACA,IAA6CxO,EAAAA,EAAAA,IAAKzF,GAAK,wBAAvD,iBAAO8Y,GAAP,MAA2BC,GAA3B,MACMC,IAAYjd,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJL,CAAC,GAAM,IAAM,GAAM,IAAM,KAK1C+L,IAAa/J,EAAAA,EAAAA,IAAM,SAAUiW,GAAY+E,IACzC/S,IAAU,UAAQ8B,IAClBmE,IAAclO,EAAAA,EAAAA,IAAM,aAAc+a,GAAgBC,IAElDpb,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNqF,WAAAA,GACA9B,WAAAA,GACAiG,YAAAA,MAIE9F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAOoU,GACPzN,KAAMwN,GACNvN,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,gBACTE,OAAQ,CACNuS,OAAQ,CACNrS,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAMf,QAIX,CACDpG,MAAOkZ,GACPvS,KAAMsS,GACNrS,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,MAAMD,EAAAA,EAAAA,IAAG,sBACTE,OAAQ,CACNoS,WAAY,CACVlS,OAAQ,CAAC,CACPC,KAAMkF,UAMhB,OAAmBjF,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,ihBCpD/CoC,GAAiB,aACjBsF,GAAWC,GACjB,IAAkBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAlC,iBAAO8P,GAAP,MAAWtK,GAAX,MAGM6T,GAAuB,CAAC,IAAM,GAAK,IAAM,IAAM,KAGrD,IAAuC5T,EAAAA,EAAAA,IAAKzF,GAAK,SAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM,aAAc2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAL9B,CAAC,GAAK,IAAM,GAAK,KAAM,OAM3Cmd,GAAYnc,OAAOqC,YAAYkN,GAAAA,EAAAA,KACnC,SAAA/O,GAAG,MAAI,CAACA,GAAKQ,EAAAA,EAAAA,IAAM,OAAQ2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0Bqd,KAAzE,KAECxR,IAAS7J,EAAAA,EAAAA,IAAM,YAAa2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAP5B,CAAC,IAAK,IAAK,IAAK,IAAK,OAS5C4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,QAAO,gBACLyE,KAAAA,IACGnK,OAAOqC,YAAYkN,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgB2b,GAAU3b,GAA9B,MAFrC,IAGJqK,OAAAA,OAIEzB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDC,KAAMkJ,GAAG,eACTjJ,OAAQ,CACNyS,KAAM,CACJ1S,KAAMpB,GAAI,QACVuB,OAAO,GAAD,eACDwF,GAAAA,EAAAA,KAAgB,SAAA/O,GAAG,MAAK,CAAEwJ,KAAMmS,GAAU3b,GAAvB,KADlB,CAEL,CACC8J,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,QAGViY,UAAW,CACT3S,KAAMpB,GAAI,aACVuB,OAAQ,CAAC,CACPC,KAAMa,IACL,CACDP,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,OAGVkY,WAAY,CACV5S,KAAMpB,GAAI,cACVuB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBChE/CoC,GAAiB,gCACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAvBwF,IAAT,gBAIA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,YAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACM8T,IAAWzb,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHrC,CAAC,IAAM,GAAK,IAAM,IAAM,OAQjC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD1C,SAAU,CACRF,OAAQ,CACNyE,MAPOqB,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SACxCgC,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,cAAqB8L,EAAAA,GAAAA,QAAgB2R,SAWvCrT,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,KAAMpB,GAAI,YACVkD,SAASF,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,GACrD4G,UAAU,EACV6D,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQkd,GAAUvd,EAAAA,GAAAA,KAAY,UACnC,CACDoL,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,khBC5C/CoC,GAAiB,eACjBsF,GAAWC,GAEXmU,GAAY,CAAC,IAAM,IAAM,IAAM,IAAM,IAE3C,IAAuCjU,EAAAA,EAAAA,IAAKzF,GAAK,mBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B0d,KACpEnM,IAAWvP,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B0d,KAExE9b,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,GACAoG,SAAAA,MAIEnH,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,oBACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMuG,IACL,CACDjG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,WAMhB,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,6gBCtC/CoC,GAAiB,oBACjBsF,GAAWC,GACjB,IAAgBzI,EAAAA,EAAAA,IAAM,SAAUkD,IAAvBwF,IAAT,gBAEA,IAAuCC,EAAAA,EAAAA,IAAKzF,GAAK,WAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MAEMgU,IAAU3b,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAKhC,EAAAA,EAAAA,IAAM,KAAM2H,IAAavJ,EAAAA,EAAAA,KACpEL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,GAAK,IAAM,IAAM,KAEO,CAAEsF,KAAM,MACpDtF,EAAAA,GAAAA,OAAAA,UAEI4d,IAAc5b,EAAAA,EAAAA,IAAMhC,EAAAA,GAAAA,OAAAA,IAAkBgE,IAAK5D,EAAAA,EAAAA,KAAKoD,EAAAA,EAAAA,IAAQ,IAAMma,KAG9D/b,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChDZ,MAAO,CACL+D,IAAKkR,IAEP/W,SAAU,CACR8B,MAAO,CACL+D,KARUD,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe4d,OAWzD,CACDD,QAAAA,GACAC,YAAAA,KAGIxT,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACN9C,UAAU,EACVgE,KAAMpB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAM2S,IACL,CACDrS,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,SAIX,CACDmF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,aACjD/D,UAAU,EACV8F,SAAS1K,EAAAA,EAAAA,IAAM2H,GAAa,KAAM,GAClCoB,OAAQ,CAAC,CACPC,MAAMzK,EAAAA,EAAAA,IAAQqd,IAAD,QAAC,UAAkB1d,EAAAA,GAAAA,KAAY,QAA/B,IAAuCyM,YAAY,MAC/D,CACDrB,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,GACPyB,KAAM,SAIZ,OAAmB2F,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,I,uhBC7D/CoC,GAAiB,cACjBsF,GAAWC,GAIjB,IAAuCE,EAAAA,EAAAA,IAAKzF,GAAK,gBAAjD,iBAAO0F,GAAP,MAAwBC,GAAxB,MACMwB,IAAOnJ,EAAAA,EAAAA,IAAM,KAAM2H,IAAa5J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHjC,CAAC,GAAK,IAAM,GAAK,IAAM,MAKhC4B,GAAO4G,EAAsBxE,GAAKsF,GAAU,CAChD5C,OAAQ,CACNyE,KAAAA,MAIEf,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACT1G,MAAO8F,GACPa,KAAMd,GACNkB,MAAMD,EAAAA,EAAAA,IAAG,eACTF,QAAQC,EAAAA,EAAAA,GAAe1G,GAAKqG,GAAMC,IAAYK,EAAAA,EAAAA,IAAG,gBACjDE,OAAQ,CACNY,GAAI,CACFV,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMC,EAAAA,EAAAA,IAAI,YACV1H,MAAO,EACPyB,KAAM,WCoBhB,GA9ByD,CACvDuY,iBAAAA,GACAC,gBAAAA,GACAC,YAAAA,GACAC,WAAAA,GACAC,oBAAAA,GACAC,gBAAAA,GACAC,cAAAA,GACAC,YAAAA,GACAC,mBAAAA,GACAC,aAAAA,GACAC,cAAAA,GACAC,2BAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAC,kBAAAA,GACAC,eAAAA,GACAC,eAAAA,GACAC,cAAAA,GACAC,qBAAAA,GACAC,aAAAA,GACAC,WAAAA,GACAC,WAAAA,GACAC,8BAAAA,GACAC,aAAAA,GACAC,kBAAAA,GACAC,YDZF,IAAmBvU,EAAAA,EAAYjH,GAAKoG,GAAOd,GAAU1H,KE/BrD,IAPgD,0CAC3CyC,IACAC,IACAC,IACAyU,IACAxU,G","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/MakhairaAquamarine/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/KeyOfKhajNisut/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/XiphosMoonlight/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/MissiveWindspear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/StaffOfTheScarletSands/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WanderingEvenstar/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import KeyMap from \"../KeyMap\";\nimport { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../KeyMap/StatConstants\";\nimport { absorbableEle } from \"../Types/consts\";\nimport { objectKeyMap } from \"../Util/Util\";\nimport { infusionNode, input } from \"./index\";\nimport { constant, data, equal, frac, infoMut, one, percent, prod, subscript, sum } from \"./utils\";\n\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers, KeyMap.info(\"crystallize_level_multi\"))\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\nconst crystallizeHit = infoMut(prod(\n  infoMut(sum(one, /** + Crystallize bonus */ crystallizeElemas), { pivot: true, ...KeyMap.info(\"base_crystallize_multi\") }),\n  crystallizeMulti1),\n  KeyMap.info(\"crystallize\"))\n\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers, KeyMap.info(\"transformative_level_multi\"))\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\nconst trans = {\n  ...objectKeyMap(Object.keys(transformativeReactions), reaction => {\n    const { multi, resist } = transformativeReactions[reaction]\n    return infoMut(prod(\n      prod(constant(multi, KeyMap.info(`${reaction}_multi`)), transMulti1),\n      sum(\n        infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }),\n        input.total[`${reaction}_dmg_`]\n      ),\n      input.enemy[`${resist}_resMulti`]\n    ), KeyMap.info(`${reaction}_hit`))\n  }),\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => {\n    const base = prod(\n      prod(constant(transformativeReactions.swirl.multi, KeyMap.info(\"swirl_multi\")), transMulti1),\n      sum(infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }), input.total.swirl_dmg_)\n    )\n    const res = input.enemy[`${ele}_resMulti`]\n    return infoMut(\n      // CAUTION:\n      // Add amp multiplier/additive term only to swirls that have amp/additive reactions.\n      // It is wasteful to add them indiscriminately, but this means\n      // that we need to audit and add appropriate elements here\n      // should amp/additive reactions be added to more swirls.\n      [\"pyro\", \"hydro\", \"cryo\", \"electro\"].includes(ele)\n        ? (ele === \"electro\"\n          // Additive reactions apply the additive term before resistance, but after swirl bonuses\n          ? data(prod(sum(base, input.hit.addTerm), res), { hit: { ele: constant(ele) } })\n          // Amp reaction\n          : data(prod(base, res, input.hit.ampMulti), { hit: { ele: constant(ele) } }))\n        : prod(base, res),\n      KeyMap.info(`${ele}_swirl_hit`))\n  })\n}\nconst infusionReactions = {\n  overloaded: equal(infusionNode, \"pyro\", trans.overloaded, KeyMap.info(\"overloaded_hit\")),\n  electrocharged: equal(infusionNode, \"hydro\", trans.electrocharged, KeyMap.info(\"electrocharged_hit\")),\n  superconduct: equal(infusionNode, \"cryo\", trans.superconduct, KeyMap.info(\"superconduct_hit\")),\n  burning: equal(infusionNode, \"pyro\", trans.burning, KeyMap.info(\"burning_hit\")),\n  bloom: equal(infusionNode, \"hydro\", trans.bloom, KeyMap.info(\"bloom_hit\")),\n  burgeon: equal(infusionNode, \"pyro\", trans.burgeon, KeyMap.info(\"burgeon_hit\")),\n}\nexport const reactions = {\n  anemo: {\n    electroSwirl: trans.swirl.electro,\n    pyroSwirl: trans.swirl.pyro,\n    cryoSwirl: trans.swirl.cryo,\n    hydroSwirl: trans.swirl.hydro,\n    overloaded: trans.overloaded,\n    electrocharged: trans.electrocharged,\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n    burning: trans.burning,\n    bloom: trans.bloom,\n    burgeon: trans.burgeon,\n    hyperbloom: trans.hyperbloom,\n  },\n  geo: {\n    crystallize: crystallizeHit,\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\n    infoMut(prod(percent(2.5), crystallizeHit), KeyMap.info(`${e}_crystallize`))])),\n    shattered: trans.shattered,\n    overloaded: infusionReactions.overloaded,\n    electrocharged: infusionReactions.electrocharged,\n    superconduct: infusionReactions.superconduct,\n    burning: infusionReactions.burning,\n    bloom: infusionReactions.bloom,\n    burgeon: infusionReactions.burgeon,\n  },\n  electro: {\n    overloaded: trans.overloaded,\n    electrocharged: trans.electrocharged,\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n    hyperbloom: trans.hyperbloom,\n    burning: infusionReactions.burning,\n    bloom: infusionReactions.bloom,\n    burgeon: infusionReactions.burgeon,\n  },\n  hydro: {\n    electrocharged: trans.electrocharged,\n    shattered: trans.shattered,\n    bloom: trans.bloom,\n    overloaded: infusionReactions.overloaded,\n    superconduct: infusionReactions.superconduct,\n    burning: infusionReactions.burning,\n    burgeon: infusionReactions.burgeon,\n  },\n  pyro: {\n    overloaded: trans.overloaded,\n    shattered: trans.shattered,\n    burning: trans.burning,\n    burgeon: trans.burgeon,\n    electrocharged: infusionReactions.electrocharged,\n    superconduct: infusionReactions.superconduct,\n    bloom: infusionReactions.bloom,\n  },\n  cryo: {\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n    overloaded: infusionReactions.overloaded,\n    electrocharged: infusionReactions.electrocharged,\n    burning: infusionReactions.burning,\n    bloom: infusionReactions.bloom,\n    burgeon: infusionReactions.burgeon,\n  },\n  dendro: {\n    shattered: trans.shattered,\n    burning: trans.burning,\n    bloom: trans.bloom,\n    overloaded: infusionReactions.overloaded,\n    electrocharged: infusionReactions.electrocharged,\n    superconduct: infusionReactions.superconduct,\n    burgeon: infusionReactions.burgeon,\n  }\n}\n","import { SubstatKey } from \"pipeline\";\nimport { infusionNode, input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, infoMut, lookup, one, percent, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\nimport KeyMap from \"../../KeyMap\";\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\n\nconst inferredHitEle = stringPrio(\n  lookup(input.hit.move, {\n    \"skill\": input.charEle, \"burst\": input.charEle,\n  }, undefined),\n  lookup(input.weaponType, {\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\n    catalyst: input.charEle,\n  }, undefined),\n  \"physical\"\n)\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\n/** Note: `additional` applies only to this formula */\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\n  }, additional]))\n}\n/** Note: `additional` applies only to this formula */\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\n  const shieldNode = prod(base, sum(one, input.total.shield_))\n  return additional ? data(shieldNode, additional) : shieldNode\n}\n/** Note: `additional` applies only to this formula */\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\n  const healInc = input.total.healInc\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\n\n  return additional ? data(healNode, additional) : healNode\n}\n/** Note: `additional` applies only to this formula */\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  const talentType = getTalentType(move)\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { unit: \"%\" }), input.total[base]), move, additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customShieldNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\n}\n/** Note: `additional` applies only to this formula */\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customHealNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript<number>(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  layeredAssignment(data, [\"teamBuff\", \"tally\", \"maxEleMas\"], input.premod.eleMas)\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { ...KeyMap.info(stat), prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","import type { WeaponData } from \"pipeline\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { WeaponKey } from \"../../Types/consts\";\nimport _weaponCurves from \"./expCurve_gen.json\";\nimport { input } from \"../../Formula\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\nimport KeyMap from \"../../KeyMap\";\n\n// TODO: Remove this conversion after changing the file format\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\n\nexport function dataObjForWeaponSheet(\n  key: WeaponKey,\n  gen: WeaponData,\n  additional: Data = {},\n  displayWeapon: DisplaySub = {},\n): Data {\n  const result: Data = {\n    base: {},\n    premod: {},\n    total: {},\n    weapon: {\n      key: constant(key), type: constant(gen.weaponType),\n    },\n    display: {\n      [`weapon:${key}`]: displayWeapon\n    },\n  }\n\n  const { mainStat, subStat } = gen\n  const merging = [result]\n\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), KeyMap.info(mainStat.type))\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\n\n  if (subStat) {\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), KeyMap.info(subStat.type))\n    merging.push({\n      premod: { [subStat.type]: input.weapon.sub },\n      weapon: { sub: substatNode },\n    })\n  }\n  return mergeData([...merging, inferInfoMut(additional, key)])\n}\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Akuoumaru\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffSlasher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DebateClub\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FerrousShadow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_,\n        }, {\n          text: trm(\"resistance\")\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ForestRegalia\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 75, 90, 105, 120]\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      eleMas\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: skill_dmg_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicBlade\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"member\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: critRate_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LuxuriousSeaLord\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\n  customDmgNode(prod(\n    subscript(\n      input.weapon.refineIndex, dmg_Src, { unit: \"%\" }),\n      input.total.atk\n    ),\n    \"elemental\",\n    { hit: { ele: constant(\"physical\") }\n})))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  },\n}, {\n  dmg\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }],\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    value: condPassive,\n    path: condPassivePath,\n    name: st('hitOp.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          text: stg(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","\nimport { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MakhairaAquamarine\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst atk_arr = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst atkSelf = equal(input.weapon.key, key, equal(condPassive, \"on\",\n  prod(\n    subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }),\n    input.premod.eleMas\n  )\n))\nconst atkTeamDisp = equal(input.weapon.key, key, prod(percent(0.3), atkSelf))\nconst atkTeam = unequal(input.activeCharKey, input.charKey, atkTeamDisp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    atk: atkSelf\n  },\n  teamBuff: {\n    total: {\n      atk: atkTeam\n    }\n  }\n}, {\n  atkSelf,\n  atkTeamDisp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    path: condPassivePath,\n    value: condPassive,\n    teamBuff: true,\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: atkSelf\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }],\n      }\n    }\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    teamBuff: true,\n    canShow: equal(condPassive, \"on\", 1),\n    fields: [{\n      node: infoMut(atkTeamDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\n    }, {\n        text: stg(\"duration\"),\n        value: 12,\n        unit: \"s\"\n    }]\n  }],\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OldMercsPal\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeArchaic\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rainslasher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RedhornStonethresher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\nconst normal_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { unit: \"%\" }), input.premod.def))\nconst charged_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { unit: \"%\" }), input.premod.def))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    def_,\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n  }\n}, {\n  normal_dmgInc,\n  charged_dmgInc,\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: def_\n    }, {\n      node: normal_dmgInc\n    }, {\n      node: charged_dmgInc\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"opponentsDamaged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SerpentSpine\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\n\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { unit: \"%\" })\nconst all_dmg_stack = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: all_dmg_stack\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: {\n      ...objectKeyMap(range(1, 5), i => ({\n        name: st(\"seconds\", { count: i * 4 }),\n        fields: [{\n          node: all_dmg_stack\n        }, {\n          text: trm(\"takeMoreDmg\"),\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\n          unit: \"%\"\n        }]\n      })),\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardPride\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: all_dmg_,\n    }, {\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SnowTombedStarsilver\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SongOfBrokenPines\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { unit: \"%\" })\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n      atkSPD_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"name\"),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          node: atkSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customShieldNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBell\"\nconst data_gen = data_gen_json as WeaponData\n\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\nconst shield = equal(input.weapon.key, key,\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { unit: \"%\" }), input.total.hp))))\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n}, {\n  shield\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"takeDmg\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(shield, { name: stg(`dmgAbsorption`) })\n        }, {\n          text: stg(\"cd\"),\n          value: 45,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheUnforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"WasterGreatsword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Whiteblind\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteIronGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\nconst heal = equal(input.weapon.key, key,\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.total.hp))))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    name: st('afterDefeatEnemy'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WolfsGravestone\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_,\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport Akuoumaru from \"./Akuoumaru\"\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\nimport DebateClub from \"./DebateClub\"\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\nimport FerrousShadow from \"./FerrousShadow\"\nimport ForestRegalia from \"./ForestRegalia\"\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\nimport LithicBlade from \"./LithicBlade\"\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\nimport MakhairaAquamarine from \"./MakhairaAquamarine\"\nimport OldMercsPal from \"./OldMercsPal\"\nimport PrototypeArchaic from \"./PrototypeArchaic\"\nimport Rainslasher from \"./Rainslasher\"\nimport RedhornStonethresher from \"./RedhornStonethresher\"\nimport RoyalGreatsword from \"./RoyalGreatsword\"\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\nimport SerpentSpine from \"./SerpentSpine\"\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\nimport SkywardPride from \"./SkywardPride\"\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\nimport TheBell from \"./TheBell\"\nimport TheUnforged from \"./TheUnforged\"\nimport WasterGreatsword from \"./WasterGreatsword\"\nimport Whiteblind from \"./Whiteblind\"\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\nimport WolfsGravestone from \"./WolfsGravestone\"\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\n  Akuoumaru,\n  BlackcliffSlasher,\n  BloodtaintedGreatsword,\n  DebateClub,\n  FavoniusGreatsword,\n  FerrousShadow,\n  ForestRegalia,\n  KatsuragikiriNagamasa,\n  LithicBlade,\n  LuxuriousSeaLord,\n  MakhairaAquamarine,\n  OldMercsPal,\n  PrototypeArchaic,\n  Rainslasher,\n  RedhornStonethresher,\n  RoyalGreatsword,\n  SacrificialGreatsword,\n  SerpentSpine,\n  SkyriderGreatsword,\n  SkywardPride,\n  SnowTombedStarsilver,\n  SongOfBrokenPines,\n  TheBell,\n  TheUnforged,\n  WasterGreatsword,\n  Whiteblind,\n  WhiteIronGreatsword,\n  WolfsGravestone,\n} as const\nexport default claymore\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmenomaKageuchi\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquilaFavonia\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.premod.atk)))\nconst dmg = equal(input.weapon.key, key,\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n  },\n}, {\n  heal, dmg\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: st('takeDmg'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n        }, {\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          text: stg(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CinnabarSpindle\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\nconst skill_dmgInc = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { unit: \"%\" }), input.premod.def)))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: { // TODO: should be total\n    skill_dmgInc\n  }\n}, {\n  skill_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"name\"),\n    states: {\n      on: {\n        fields: [{\n          node: skill_dmgInc\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CoolSteel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagotsurubeIsshin\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\nconst dmg = equal(input.weapon.key, key,\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"hitOp.normalChargedOrPlunging\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DarkIronSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.electro\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"DullBlade\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusSword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FesteringDesire\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { unit: \"%\" })\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { unit: \"%\" })\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    skill_critRate_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_\n    }, {\n      node: skill_critRate_\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FilletBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\nconst cd_Src = [15, 14, 13, 12, 11]\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg_, { name: st(\"dmg\") })\n    }, {\n      text: stg(\"cd\"),\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\n      unit: \"s\"\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FreedomSworn\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst charged_dmg_ = { ...normal_dmg_ }\nconst plunging_dmg_ = { ...normal_dmg_ }\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: dmg_\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      normal_dmg_,\n      charged_dmg_,\n      plunging_dmg_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: dmg_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"sigilsConsumed\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: normal_dmg_\n        }, {\n          node: charged_dmg_\n        }, {\n          node: plunging_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\n))\nconst normal_dmg_ = lookup(condNode,\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\n  , naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...passive_dmg_,\n    normal_dmg_,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [ // Passive\n      ...allElements.map((ele) => {\n        return { node: passive_dmg_[`${ele}_dmg_`] }\n      })\n    ],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"consumed\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HarbingerOfDawn\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"greaterPercentHP\", { percent: 90 }),\n    states: {\n      on: {\n        fields: [{\n          node: critRate_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"IronSting\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\nconst eleDmgDealtStack = range(1, 2)\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\n  subscript(input.weapon.refineIndex, allDmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: all_dmg_,\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, stg } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KeyOfKhajNisut\"\nconst data_gen = data_gen_json as WeaponData\n\nconst selfEmSrc = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst teamEmSrc = [0.002, 0.0025, 0.003, 0.0035, 0.004]\nconst stacksArr = range(1, 3)\nconst hp_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst hp_ = equal(input.weapon.key, key, subscript(input.weapon.refineIndex, hp_arr, { unit: \"%\" }))\n\nconst [condAfterSkillStacksPath, condAfterSkillStacks] = cond(key, \"afterSkill\")\nconst selfEleMas = equal(input.weapon.key, key,\n  lookup(condAfterSkillStacks, Object.fromEntries(stacksArr.map(stack => [\n    stack,\n    prod(\n      stack,\n      subscript(input.weapon.refineIndex, selfEmSrc, { unit: \"%\", fixed: 2 }),\n      input.total.hp\n    )\n  ])), naught)\n)\nconst teamEleMas = equal(input.weapon.key, key,\n  equal(condAfterSkillStacks, \"3\",\n    prod(\n      subscript(input.weapon.refineIndex, teamEmSrc, { unit: \"%\", fixed: 2 }),\n      input.total.hp\n    )))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    eleMas: selfEleMas\n  },\n  teamBuff: {\n    total: {\n      eleMas: teamEleMas\n    }\n  }\n}, {\n  selfEleMas, teamEleMas\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: hp_ }]\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    teamBuff: true,\n    path: condAfterSkillStacksPath,\n    value: condAfterSkillStacks,\n    name: st(\"hitOp.skill\"),\n    states: Object.fromEntries(stacksArr.map(stack => [\n      stack,\n      {\n        name: st(\"stack\", { count: stack }),\n        fields: [{\n          node: selfEleMas\n        }, {\n          text: stg(\"duration\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    ]))\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    canShow: equal(condAfterSkillStacks, \"3\", 1),\n    teamBuff: true,\n    fields: [{\n      node: teamEleMas\n    }, {\n      text: stg(\"duration\"),\n      value: 20,\n      unit: \"s\"\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LionsRoar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MistsplitterReforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst stacks = [\"1\", \"2\", \"3\"] as const\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stacksRefine = {\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\n}\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\n))\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  equal(input.charEle, ele,\n    lookup(condNode, objectKeyMap(stacks, stack =>\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, KeyMap.info(`${ele}_dmg_`))\n  )]\n))\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\n))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...allEle_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: allElements.map(ele => (\n      { node: passive_dmg_[`${ele}_dmg_`] }\n    ))\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"emblem\"),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(\n      stacks.map(stack => [stack, {\n        name: st(\"stack\", { count: parseInt(stack) }),\n        fields: allElements.map(ele => ({\n          node: stacks_dmg_[`${ele}_dmg_`]\n        }))\n      }])\n    )\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeCutter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\nconst atk = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, atkSrc, { unit: \"%\" }), input.premod.hp))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk\n  }\n}, {\n  atk\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: hp_ }, { node: atk }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeRancour\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"onHit\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SapwoodBlade\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 75, 90, 105, 120]\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      eleMas\n    },\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SilverSword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst dmg = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    moveSPD_,\n    atkSPD_,\n  }\n}, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: critRate_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st('afterUse.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: moveSPD_\n        }, {\n          node: atkSPD_\n        }, {\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SummitShaper\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SwordOfDescension\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = equal(\"Traveler\", input.charKey, 66)\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk\n  }\n}, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk\n    }, {\n      node: infoMut(dmg_, { name: st(\"dmg\") })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheAlleyFlash\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBlackSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.atk)))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n}, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }, {\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheFlute\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg_, { name: st(\"dmg\") }) }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TravelersHandySword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.hp)))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      { node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }\n    ]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"XiphosMoonlight\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst enerRech_arr = [0.00036, 0.00045, 0.00054, 0.00063, 0.00072]\nconst selfEnerRech_ = equal(input.weapon.key, key, equal(condPassive, \"on\",\n  prod(\n    subscript(input.weapon.refineIndex, enerRech_arr, { unit: \"%\", fixed: 3 }),\n    input.premod.eleMas,\n  )\n))\nconst teamEnerRech_disp = equal(input.weapon.key, key, prod(percent(0.3), selfEnerRech_))\nconst teamEnerRech_ = unequal(input.activeCharKey, input.charKey, teamEnerRech_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    enerRech_: selfEnerRech_\n  },\n  teamBuff: {\n    total: {\n      enerRech_: teamEnerRech_\n    }\n  }\n}, {\n  selfEnerRech_,\n  teamEnerRech_disp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    path: condPassivePath,\n    value: condPassive,\n    name: trm(\"condName\"),\n    teamBuff: true,\n    states: {\n      on: {\n        fields: [{\n          node: selfEnerRech_,\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    teamBuff: true,\n    canShow: equal(condPassive, \"on\", 1),\n    fields: [{\n      node: infoMut(teamEnerRech_disp, { ...KeyMap.info(\"enerRech_\"), isTeamBuff: true }),\n    }, {\n      text: stg(\"duration\"),\n      value: 12,\n      unit: \"s\"\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponSwordKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\nimport AquilaFavonia from \"./AquilaFavonia\"\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\nimport CinnabarSpindle from \"./CinnabarSpindle\"\nimport CoolSteel from \"./CoolSteel\"\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\nimport DarkIronSword from \"./DarkIronSword\"\nimport DullBlade from \"./DullBlade\"\nimport FavoniusSword from \"./FavoniusSword\"\nimport FesteringDesire from \"./FesteringDesire\"\nimport FilletBlade from \"./FilletBlade\"\nimport FreedomSworn from \"./FreedomSworn\"\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\nimport IronSting from \"./IronSting\"\nimport KeyOfKhajNisut from \"./KeyOfKhajNisut\"\nimport LionsRoar from \"./LionsRoar\"\nimport MistsplitterReforged from \"./MistsplitterReforged\"\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\nimport PrototypeRancour from \"./PrototypeRancour\"\nimport RoyalLongsword from \"./RoyalLongsword\"\nimport SacrificialSword from \"./SacrificialSword\"\nimport SapwoodBlade from \"./SapwoodBlade\"\nimport SilverSword from \"./SilverSword\"\nimport SkyriderSword from \"./SkyriderSword\"\nimport SkywardBlade from \"./SkywardBlade\"\nimport SummitShaper from \"./SummitShaper\"\nimport SwordOfDescension from \"./SwordOfDescension\"\nimport TheAlleyFlash from \"./TheAlleyFlash\"\nimport TheBlackSword from \"./TheBlackSword\"\nimport TheFlute from \"./TheFlute\"\nimport TravelersHandySword from \"./TravelersHandySword\"\nimport XiphosMoonlight from \"./XiphosMoonlight\"\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\n  AmenomaKageuchi,\n  AquilaFavonia,\n  BlackcliffLongsword,\n  CinnabarSpindle,\n  CoolSteel,\n  KagotsurubeIsshin,\n  DarkIronSword,\n  DullBlade,\n  FavoniusSword,\n  FesteringDesire,\n  FilletBlade,\n  FreedomSworn,\n  HaranGeppakuFutsu,\n  HarbingerOfDawn,\n  IronSting,\n  KeyOfKhajNisut,\n  LionsRoar,\n  MistsplitterReforged,\n  PrimordialJadeCutter,\n  PrototypeRancour,\n  RoyalLongsword,\n  SacrificialSword,\n  SapwoodBlade,\n  SilverSword,\n  SkyriderSword,\n  SkywardBlade,\n  SummitShaper,\n  SwordOfDescension,\n  TheAlleyFlash,\n  TheBlackSword,\n  TheFlute,\n  TravelersHandySword,\n  XiphosMoonlight,\n} as const\nexport default sword\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"BeginnersProtector\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"BlackcliffPole\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackTassel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CalamityQueller\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [tr] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\n// const [condActivePath, condActive] = cond(key, \"active\")\n\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\n\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\nconst atkInc = prod(\n  compareEq(input.activeCharKey, input.charKey,\n    constant(1, { /* TODO: Add key for active char */ }),\n    constant(2, { name: WeaponSheet.trm(key)(\"inactiveKey\") })),\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { name: st(\"stacks\") })), 0),\n  subscript(input.weapon.refineIndex, atk_, { unit: \"%\" }),\n)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...dmg_Nodes,\n    atk_: atkInc,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\n  }, {\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: tr(\"passiveName\"),\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: atkInc }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CrescentPike\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\nconst hit = equal(input.weapon.key, key,\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" })), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(hit, { name: WeaponSheet.trm(key)(\"hitName\") })\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Deathmatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }) }, naught)\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      \"oneOrNone\": {\n        name: trm(\"opponents.oneOrNone\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n      \"moreThanOne\": {\n        name: trm(\"opponents.moreThanOne\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonsBane\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonspineSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EngulfingLightning\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\nconst atk_ = equal(input.weapon.key, key,\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\n\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    enerRech_\n  },\n}, {\n  atk_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: enerRech_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusLance\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Halberd\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"IronPoint\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KitainCrossSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"member\", { count: i }),\n      fields: [{ node: atk_ }, { node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MissiveWindspear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst emArr = [48, 60, 72, 84, 96]\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, emArr))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    eleMas,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterReaction\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_,\n        }, {\n          node: eleMas,\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Moonpiercer\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atk_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_disp)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      atk_\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk_disp, KeyMap.info(\"atk_\")),\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { unit: \"%\" }))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.none\"),\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeStarglitter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardSpine\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\nconst atkSPD_ = percent(0.12)\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    atkSPD_\n  }\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critRate_,\n    }, {\n      node: atkSPD_,\n    }, {\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"StaffOfHoma\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { unit: \"%\" })\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), input.premod.hp)\nconst atk2 = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { unit: \"%\" }), input.premod.hp), KeyMap.info(\"atk\")))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk: sum(atk1, atk2)\n  }\n}, {\n  atk2_: atk2\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: hp_\n    }, {\n      node: infoMut(atk1, KeyMap.info(\"atk\"))\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: st(\"lessPercentHP\", { percent: 50 }),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk2, KeyMap.info(\"atk\")),\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"StaffOfTheScarletSands\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\n\nconst baseAtkArr = [0.52, 0.65, 0.78, 0.91, 1.04]\nconst stacksAttArr = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst stacksArr = range(1, 3)\nconst baseAtk = equal(input.weapon.key, key, prod(\n  subscript(input.weapon.refineIndex, baseAtkArr, { unit: \"%\" }),\n  input.premod.eleMas\n), KeyMap.info(\"atk\"))\nconst stacksAtk = lookup(condStacks, Object.fromEntries(stacksArr.map(stack => [\n  stack,\n  prod(\n    stack,\n    subscript(input.weapon.refineIndex, stacksAttArr, { unit: \"%\" }),\n    input.premod.eleMas\n  )\n])), naught, KeyMap.info(\"atk\"))\nconst atk = equal(input.weapon.key, key, sum(baseAtk, stacksAtk))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    atk\n  },\n}, {\n  atk\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: baseAtk\n    }],\n  }, {\n    value: condStacks,\n    path: condStacksPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.skill\"),\n    states: Object.fromEntries(stacksArr.map(i =>\n      [i, {\n        name: st(\"hits\", { count: i }),\n        fields: [{\n          node: stacksAtk\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheCatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_,\n    burst_critRate_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"VortexVanquisher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WavebreakersFin\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteTassel\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponPoleArmKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport BeginnersProtector from './BeginnersProtector'\nimport BlackcliffPole from './BlackcliffPole'\nimport BlackTassel from './BlackTassel'\nimport CalamityQueller from './CalamityQueller'\nimport CrescentPike from './CrescentPike'\nimport Deathmatch from './Deathmatch'\nimport DragonsBane from './DragonsBane'\nimport DragonspineSpear from './DragonspineSpear'\nimport EngulfingLightning from './EngulfingLightning'\nimport FavoniusLance from './FavoniusLance'\nimport Halberd from './Halberd'\nimport IronPoint from './IronPoint'\nimport KitainCrossSpear from './KitainCrossSpear'\nimport LithicSpear from './LithicSpear'\nimport MissiveWindspear from './MissiveWindspear'\nimport Moonpiercer from './Moonpiercer'\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\nimport PrototypeStarglitter from './PrototypeStarglitter'\nimport RoyalSpear from './RoyalSpear'\nimport SkywardSpine from './SkywardSpine'\nimport StaffOfHoma from './StaffOfHoma'\nimport StaffOfTheScarletSands from './StaffOfTheScarletSands'\nimport TheCatch from './TheCatch'\nimport VortexVanquisher from './VortexVanquisher'\nimport WavebreakersFin from './WavebreakersFin'\nimport WhiteTassel from './WhiteTassel'\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\n  BeginnersProtector,\n  BlackcliffPole,\n  BlackTassel,\n  CalamityQueller,\n  CrescentPike,\n  Deathmatch,\n  DragonsBane,\n  DragonspineSpear,\n  EngulfingLightning,\n  FavoniusLance,\n  Halberd,\n  IronPoint,\n  KitainCrossSpear,\n  LithicSpear,\n  MissiveWindspear,\n  Moonpiercer,\n  PrimordialJadeWingedSpear,\n  PrototypeStarglitter,\n  RoyalSpear,\n  SkywardSpine,\n  StaffOfHoma,\n  StaffOfTheScarletSands,\n  TheCatch,\n  VortexVanquisher,\n  WavebreakersFin,\n  WhiteTassel,\n} as const\nexport default polearm\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AlleyHunter\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst dmgInc = [.02, .025, .03, .035, .04]\n\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\nconst all_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\n      name: st(\"seconds\", { count: c }),\n      fields: [{\n        node: all_dmg_\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmosBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"charged_dmg_\"))\n\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\nconst normal_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, KeyMap.info(\"charged_dmg_\"))\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 5), i => ({\n      name: st(\"seconds\", { count: i / 10 }),\n      fields: [{\n        node: normal_dmg_arrow_\n      }, {\n        node: charged_dmg_arrow_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquaSimulacra\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_: base_hp_,\n    all_dmg_: cond_dmg_,\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: base_hp_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: cond_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst atkInc = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_\n      }, {\n        text: stg(\"duration\"),\n        value: 30,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CompoundBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.04, .05, .06, .07, .08]\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\n}, naught)\nconst atkSPD_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    atkSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.normalOrCharged\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: atkSPD_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ElegyForTheEnd\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\nconst eleMasInc = [60, 75, 90, 105, 120]\nconst eleMasInc2 = [100, 125, 150, 175, 200]\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, KeyMap.info(\"eleMas\"))\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, KeyMap.info(\"eleMas\")))\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas,\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      eleMas: eleMas2\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: eleMas,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas2\n        }, {\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FadingTwilight\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStatePath, condState] = cond(key, \"state\")\nconst state_dmg_dict = {\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\n}\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: state_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condState,\n    path: condStatePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\n      state,\n      {\n        name: trm(`states.${state}`),\n        fields: [{ node: state_dmg_ }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Hamayumi\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\n\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\"))\n\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\")))\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\")))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg, normal_passive),\n    charged_dmg_: sum(charged_dmg, charged_passive)\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg\n    }, {\n      node: charged_dmg\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: normal_passive\n        }, {\n          node: charged_passive\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"HuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HuntersPath\"\nconst data_gen = data_gen_json as WeaponData\n\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\n  `${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { unit: \"%\" })\n]))\n\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst charged_dmgInc = equal(condPassive, \"on\",\n  prod(\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { unit: \"%\" }),\n    input.total.eleMas\n  ))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...allEle_dmg_,\n    charged_dmgInc,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: Object.values(allEle_dmg_).map(node => ({\n      node\n    }))\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.charged\"),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmgInc,\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }, {\n          text: st(\"charges\"),\n          value: 12\n        }, {\n          text: stg(\"cd\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KingsSquire\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 80, 100, 120, 140]\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\nconst dmg = equal(input.weapon.key, key, customDmgNode(\n  prod(\n    subscript(input.weapon.refineIndex, dmg_arr, { unit: \"%\" }),\n    input.total.atk\n  ),\n  \"elemental\",\n))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.skillOrBurst\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas,\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\",\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Messenger\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MitternachtsWaltz\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\n\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\n\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skill\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }, {\n    value: condSkill,\n    path: condSkillPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      on: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MouunsMoon\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PolarStar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\n\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst atk_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    atk_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Predator\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normalInc = percent(.1)\nconst chargedInc = percent(.1)\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst normal_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\n}, naught)\nconst charged_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\n}, naught)\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_,\n    atk\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.cryo\"),\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: normal_dmg_\n      }, {\n        node: charged_dmg_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeCrescent\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.36, .45, .54, .63, .72]\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RavenBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RecurveBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healing_s = [.08, .10, .12, .14, .16]\nconst healing = equal(input.weapon.key, key,\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(healing, { name: stg(\"healing\"), variant: \"heal\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRate_s = [.08, .10, .12, .14, .16]\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\nconst critRate_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: critRate_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rust\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\n\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\nconst charged_dmg_ = constant(-0.1)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SeasonedHuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SharpshootersOath\"\nconst data_gen = data_gen_json as WeaponData\n\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    weakspotDMG_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: weakspotDMG_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardHarp\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critd_s = [.20, .25, .30, .35, .40]\nconst dmgPerc = percent(1.25)\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critDMG_\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critDMG_\n    }, {\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Slingshot\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmg_arr = [.36, .42, .48, .54, .60]\n\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"charged_dmg_\"))\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"normal_dmg_\")))\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"charged_dmg_\")))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_dec\n    }, {\n      node: charged_dmg_dec\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_dmg_inc\n        }, {\n          node: charged_dmg_inc\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheStringless\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheViridescentHunt\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThunderingPulse\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\n\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\nconst normal_dmg_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    normal_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 3), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: normal_dmg_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EndOfTheLine\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\nconst dmg = equal(input.weapon.key, key, customDmgNode(\n  prod(\n    subscript(input.weapon.refineIndex, dmgArr, { unit: \"%\" }),\n    input.total.atk\n  ),\n  \"elemental\"\n))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WindblumeOde\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.16, .20, .24, .28, .32]\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.skill\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: 's'\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponBowKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\n\nimport AlleyHunter from './AlleyHunter'\nimport AmosBow from \"./AmosBow\"\nimport AquaSimulacra from \"./AquaSimulacra\"\nimport BlackcliffWarbow from './BlackcliffWarbow'\nimport CompoundBow from './CompoundBow'\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\nimport FadingTwilight from \"./FadingTwilight\"\nimport FavoniusWarbow from './FavoniusWarbow'\nimport Hamayumi from './Hamayumi'\nimport HuntersBow from \"./HuntersBow\"\nimport HuntersPath from './HuntersPath'\nimport KingsSquire from './KingsSquire'\nimport Messenger from './Messenger'\nimport MitternachtsWaltz from './MitternachtsWaltz'\nimport MouunsMoon from './MouunsMoon'\nimport PolarStar from './PolarStar'\nimport Predator from './Predator'\nimport PrototypeCrescent from './PrototypeCrescent'\nimport RavenBow from './RavenBow'\nimport RecurveBow from './RecurveBow'\nimport RoyalBow from './RoyalBow'\nimport Rust from './Rust'\nimport SacrificialBow from \"./SacrificialBow\"\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\nimport SharpshootersOath from './SharpshootersOath'\nimport SkywardHarp from './SkywardHarp'\nimport Slingshot from './Slingshot'\nimport TheStringless from './TheStringless'\nimport TheViridescentHunt from './TheViridescentHunt'\nimport ThunderingPulse from './ThunderingPulse'\nimport EndOfTheLine from './EndOfTheLine'\nimport WindblumeOde from './WindblumeOde'\n\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\n  AlleyHunter,\n  AmosBow,\n  AquaSimulacra,\n  BlackcliffWarbow,\n  CompoundBow,\n  ElegyForTheEnd,\n  FadingTwilight,\n  FavoniusWarbow,\n  Hamayumi,\n  HuntersBow,\n  HuntersPath,\n  KingsSquire,\n  Messenger,\n  MitternachtsWaltz,\n  MouunsMoon,\n  PolarStar,\n  Predator,\n  PrototypeCrescent,\n  RavenBow,\n  RecurveBow,\n  RoyalBow,\n  Rust,\n  SacrificialBow,\n  SeasonedHuntersBow,\n  SharpshootersOath,\n  SkywardHarp,\n  Slingshot,\n  TheStringless,\n  TheViridescentHunt,\n  ThunderingPulse,\n  EndOfTheLine,\n  WindblumeOde,\n} as const\nexport default bow\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"ApprenticesNotes\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffAgate\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_,\n      }, {\n        text: stg(\"duration\"),\n        value: 30,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DodocoTales\"\nconst data_gen = data_gen_json as WeaponData\n\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\n\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_,\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    name: st(\"hitOp.normal\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condCharged,\n    path: condChargedPath,\n    name: st(\"hitOp.charged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EmeraldOrb\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.hydro\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EverlastingMoonglow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\nconst [, trm] = trans(\"weapon\", key)\nconst normal_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, hp_conv, { unit: \"%\" }), input.premod.hp))\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    heal_\n  }\n}, {\n  normal_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: heal_\n    }, {\n      text: trm(\"name\"),\n      node: normal_dmgInc,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EyeOfPerception\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_: dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusCodex\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Frostbearer\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmgAoe,\n  dmgOnCryoOp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FruitOfFulfillment\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst eleMasArr = [24, 27, 30, 33, 36]\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\nconst stacksArr = range(1, 5)\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\n  stacks,\n  prod(\n    subscript(input.weapon.refineIndex, eleMasArr),\n    stacks\n  )\n])), naught)\n\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\n  stacks,\n  prod(\n    percent(-0.05),\n    stacks\n  )\n])), naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas,\n    atk_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    path: condStacksPath,\n    value: condStacks,\n    name: trm(\"stackName\"),\n    states: Object.fromEntries(stacksArr.map(stack => [\n      stack,\n      {\n        name: st(\"stack\", { count: stack }),\n        fields: [{\n          node: eleMas,\n        }, {\n          node: atk_\n        }]\n      }\n    ]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport ColorText from '../../../../Components/ColoredText'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HakushinRing\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\nconst anemo_dmg_disp = equal(\"anemo\", condPassive, eleDmg)\nconst cryo_dmg_disp = equal(\"cryo\", condPassive, eleDmg)\nconst geo_dmg_disp = equal(\"geo\", condPassive, eleDmg)\nconst hydro_dmg_disp = equal(\"hydro\", condPassive, eleDmg)\nconst pyro_dmg_disp = equal(\"pyro\", condPassive, eleDmg)\nconst dendro_dmg_disp = equal(\"dendro\", condPassive, eleDmg)\nconst anemo_dmg_ = equal(\"anemo\", target.charEle, anemo_dmg_disp)\nconst cryo_dmg_ = equal(\"cryo\", target.charEle, cryo_dmg_disp)\nconst geo_dmg_ = equal(\"geo\", target.charEle, geo_dmg_disp)\nconst hydro_dmg_ = equal(\"hydro\", target.charEle, hydro_dmg_disp)\nconst pyro_dmg_ = equal(\"pyro\", target.charEle, pyro_dmg_disp)\nconst dendro_dmg_ = equal(\"dendro\", target.charEle, dendro_dmg_disp)\n\nconst electro_dmg_disp = unequal(condPassive, undefined, eleDmg)\nconst electro_dmg_ = equal(\"electro\", target.charEle, electro_dmg_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      anemo_dmg_,\n      cryo_dmg_,\n      electro_dmg_,\n      geo_dmg_,\n      hydro_dmg_,\n      pyro_dmg_,\n      dendro_dmg_,\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.electro\"),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      anemo: {\n        name: <ColorText color=\"swirl\">{stg(\"reaction.swirl\")}</ColorText>,\n        fields: [{\n          node: infoMut(anemo_dmg_disp, { ...KeyMap.info(\"anemo_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      cryo: {\n        name: <ColorText color=\"superconduct\">{stg(\"reaction.superconduct\")}</ColorText>,\n        fields: [{\n          node: infoMut(cryo_dmg_disp, { ...KeyMap.info(\"cryo_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      geo: {\n        name: <ColorText color=\"crystallize\">{stg(\"reaction.crystallize\")}</ColorText>,\n        fields: [{\n          node: infoMut(geo_dmg_disp, { ...KeyMap.info(\"geo_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      pyro: {\n        name: <ColorText color=\"overloaded\">{stg(\"reaction.overloaded\")}</ColorText>,\n        fields: [{\n          node: infoMut(pyro_dmg_disp, { ...KeyMap.info(\"pyro_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      hydro: {\n        name: <ColorText color=\"electrocharged\">{stg(\"reaction.electrocharged\")}</ColorText>,\n        fields: [{\n          node: infoMut(hydro_dmg_disp, { ...KeyMap.info(\"hydro_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      dendro: {\n        name: <ColorText color=\"aggravate\">{stg(\"reaction.aggravate\")}</ColorText>,\n        fields: [{\n          node: infoMut(dendro_dmg_disp, { ...KeyMap.info(\"dendro_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagurasVerity\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\nconst totems = range(1, 3)\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), KeyMap.info(\"skill_dmg_\")))\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_: sum(...skill_dmg_s),\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states:\n      Object.fromEntries(totems.map(i => [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: skill_dmg_s[i - 1]\n        },\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\nconst data_gen = data_gen_json as WeaponData\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\n\nconst moveSPD_ = percent(0.1)\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { unit: \"%\" })\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\n}, naught)]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    moveSPD_,\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: moveSPD_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"seconds\", { count: i * 4 }),\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MagicGuide\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MappaMare\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\n\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\n}, naught)])\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: eleDmgs\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\n        text: stg(\"duration\"),\n        value: 10,\n        unit: \"s\"\n      }]\n    }))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MemoryOfDust\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OathswornEye\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\n\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    enerRech_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.skill\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: enerRech_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OtherworldlyStory\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PocketGrimoire\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeAmber\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\n\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.burst\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{ node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGrimoire\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialFragments\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardAtlas\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\n\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\n  }\n}, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\n      {\n        node: infoMut(dmg, { name: st(\"dmg\") }),\n      }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SolarPearl\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\nconst burst_dmg_ = { ...skill_dmg_ }\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    normal_dmg_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      normal: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          node: burst_dmg_\n        }]\n      }\n    }\n  }, {\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skillOrBurst\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: normal_dmg_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"TheWidsith\"\nconst data_gen = data_gen_json as WeaponData\nconst [tr, trm] = trans(\"weapon\", key)\n\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\n\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\nconst eleBonus_ = Object.fromEntries(allElements.map(\n  ele => [ele, equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))]\n))\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\n    eleMas\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: tr(\"passiveName\"),\n    states: {\n      aria: {\n        name: trm(\"aria\"),\n        fields: [\n          ...allElements.map(ele => ({ node: eleBonus_[ele] }))\n        ,{\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      interlude: {\n        name: trm(\"interlude\"),\n        fields: [{\n          node: eleMas\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      recitative: {\n        name: trm(\"recitative\"),\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\n\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      atk_\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm('condName'),\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk_Disp, KeyMap.info(\"atk_\"))\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TwinNephrite\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterDefeatEnemy\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WanderingEvenstar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atkArr = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst selfAtk = equal(input.weapon.key, key, equal(\"on\", condPassive, prod(\n  subscript(input.weapon.refineIndex, atkArr, { unit: \"%\" }),\n  input.premod.eleMas\n)))\nconst teamAtkDisp = equal(input.weapon.key, key, prod(percent(0.3), selfAtk))\nconst teamAtk = unequal(input.activeCharKey, input.charKey, teamAtkDisp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    atk: selfAtk\n  },\n  teamBuff: {\n    total: {\n      atk: teamAtk\n    }\n  }\n}, {\n  selfAtk,\n  teamAtkDisp\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: selfAtk\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    teamBuff: true,\n    canShow: equal(condPassive, \"on\", 1),\n    fields: [{\n      node: infoMut(teamAtkDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\n    }, {\n      text: stg(\"duration\"),\n      value: 12,\n      unit: \"s\"\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WineAndSong\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterSprint\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 5,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponCatalystKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport ApprenticesNotes from './ApprenticesNotes'\nimport BlackcliffAgate from './BlackcliffAgate'\nimport DodocoTales from './DodocoTales'\nimport EmeraldOrb from './EmeraldOrb'\nimport EverlastingMoonglow from './EverlastingMoonglow'\nimport EyeOfPerception from './EyeOfPerception'\nimport FavoniusCodex from './FavoniusCodex'\nimport Frostbearer from './Frostbearer'\nimport FruitOfFulfillment from './FruitOfFulfillment'\nimport HakushinRing from './HakushinRing'\nimport KagurasVerity from './KagurasVerity'\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\nimport MagicGuide from './MagicGuide'\nimport MappaMare from './MappaMare'\nimport MemoryOfDust from './MemoryOfDust'\nimport OathswornEye from './OathswornEye'\nimport OtherworldlyStory from './OtherworldlyStory'\nimport PocketGrimoire from './PocketGrimoire'\nimport PrototypeAmber from './PrototypeAmber'\nimport RoyalGrimoire from './RoyalGrimoire'\nimport SacrificialFragments from './SacrificialFragments'\nimport SkywardAtlas from './SkywardAtlas'\nimport SolarPearl from './SolarPearl'\nimport TheWidsith from './TheWidsith'\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\nimport TwinNephrite from './TwinNephrite'\nimport WanderingEvenstar from './WanderingEvenstar'\nimport WineAndSong from './WineAndSong'\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\n  ApprenticesNotes,\n  BlackcliffAgate,\n  DodocoTales,\n  EmeraldOrb,\n  EverlastingMoonglow,\n  EyeOfPerception,\n  FavoniusCodex,\n  Frostbearer,\n  FruitOfFulfillment,\n  HakushinRing,\n  KagurasVerity,\n  LostPrayerToTheSacredWinds,\n  MagicGuide,\n  MappaMare,\n  MemoryOfDust,\n  OathswornEye,\n  OtherworldlyStory,\n  PocketGrimoire,\n  PrototypeAmber,\n  RoyalGrimoire,\n  SacrificialFragments,\n  SkywardAtlas,\n  SolarPearl,\n  TheWidsith,\n  ThrillingTalesOfDragonSlayers,\n  TwinNephrite,\n  WanderingEvenstar,\n  WineAndSong,\n} as const\nexport default catalyst\n","import claymore from './Claymore'\nimport sword from './Sword'\nimport polearm from './Polearm'\nimport bow from './Bow'\nimport { WeaponKey } from '../../Types/consts'\nimport catalyst from './Catalyst'\nimport WeaponSheet from './WeaponSheet'\n\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\n  ...sword,\n  ...claymore,\n  ...polearm,\n  ...bow,\n  ...catalyst\n} as const\nexport default WeaponData\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","KeyMap","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","one","pivot","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","Object","keys","transformativeReactions","reaction","multi","resist","constant","swirl","ele","base","res","includes","data","hit","infusionReactions","overloaded","equal","infusionNode","electrocharged","superconduct","burning","bloom","burgeon","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","hyperbloom","geo","crystallize","fromEntries","absorbableEle","e","percent","dendro","charCurves","objectMap","_charCurves","value","values","commonBasic","key","inferredHitEle","stringPrio","lookup","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","additional","mergeData","customShieldNode","shieldNode","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","unit","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","min","naught","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","stg","all_dmg_","on","dmg","charged_dmg_","eleMas_disp","eleMas","target","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","atkSelf","atkTeamDisp","atkTeam","unequal","atk","canShow","isTeamBuff","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","MakhairaAquamarine","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","selfEmSrc","stacksArr","hp_","condAfterSkillStacksPath","condAfterSkillStacks","selfEleMas","stack","fixed","teamEleMas","stacks","stacksRefine","stacks_dmg_","allEle_dmg_","parseInt","moveSPD_","autoSrc","selfEnerRech_","teamEnerRech_disp","teamEnerRech_","enerRech_","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","KeyOfKhajNisut","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","XiphosMoonlight","tr","dmg_Nodes","compareEq","atkDefInc","atk_disp","dmgInc","atk1","atk2","atk2_","condStacksPath","condStacks","stacksAttArr","baseAtk","stacksAtk","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","MissiveWindspear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","StaffOfTheScarletSands","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","condChargedPath","condCharged","heal_","eleMasArr","eleDmg","anemo_dmg_disp","cryo_dmg_disp","geo_dmg_disp","hydro_dmg_disp","pyro_dmg_disp","dendro_dmg_disp","anemo_dmg_","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_disp","electro_dmg_","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","refineInc","selfAtk","teamAtkDisp","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WanderingEvenstar","WineAndSong"],"sourceRoot":""}