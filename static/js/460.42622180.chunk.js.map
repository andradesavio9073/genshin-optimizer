{"version":3,"file":"static/js/460.42622180.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts","Formula/reaction.ts"],"sourcesContent":["import { SubstatKey } from \"pipeline\";\nimport { input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, infoMut, lookup, percent, prod, stringPrio, subscript, sum, one } from \"../../Formula/utils\";\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\n\nexport const infusionNode = stringPrio(\n  input.infusion.nonOverridableSelf,\n  input.infusion.team,\n  input.infusion.overridableSelf)\nconst inferredHitEle = stringPrio(\n  lookup(input.hit.move, {\n    \"skill\": input.charEle, \"burst\": input.charEle,\n  }, undefined),\n  lookup(input.weaponType, {\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\n    catalyst: input.charEle,\n  }, undefined),\n  \"physical\"\n)\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\n/** Note: `additional` applies only to this formula */\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\n  }, additional]))\n}\n/** Note: `additional` applies only to this formula */\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\n  const shieldNode = prod(base, sum(one, input.total.shield_))\n  return additional ? data(shieldNode, additional) : shieldNode\n}\n/** Note: `additional` applies only to this formula */\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\n  const healInc = input.total.healInc\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\n\n  return additional ? data(healNode, additional) : healNode\n}\n/** Note: `additional` applies only to this formula */\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  const talentType = getTalentType(move)\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customShieldNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\n}\n/** Note: `additional` applies only to this formula */\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customHealNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","import type { WeaponData } from \"pipeline\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { WeaponKey } from \"../../Types/consts\";\nimport _weaponCurves from \"./expCurve_gen.json\";\nimport { input } from \"../../Formula\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\n\n// TODO: Remove this conversion after changing the file format\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\n\nexport function dataObjForWeaponSheet(\n  key: WeaponKey,\n  gen: WeaponData,\n  additional: Data = {},\n  displayWeapon: DisplaySub = {},\n): Data {\n  const result: Data = {\n    base: {},\n    premod: {},\n    total: {},\n    weapon: {\n      key: constant(key), type: constant(gen.weaponType),\n    },\n    display: {\n      [`weapon:${key}`]: displayWeapon\n    },\n  }\n\n  const { mainStat, subStat } = gen\n  const merging = [result]\n\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\n\n  if (subStat) {\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\n    merging.push({\n      premod: { [subStat.type]: input.weapon.sub },\n      weapon: { sub: substatNode },\n    })\n  }\n  return mergeData([...merging, inferInfoMut(additional, key)])\n}\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Akuoumaru\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffSlasher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DebateClub\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FerrousShadow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_,\n        }, {\n          text: trm(\"resistance\")\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: skill_dmg_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicBlade\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"member\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: critRate_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LuxuriousSeaLord\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\nconst dmg_ = equal(condPassive, 'on',\n  customDmgNode(prod(\n    subscript(\n      input.weapon.refineIndex, dmg_Src, { key: \"_\" }),\n      input.total.atk\n    ),\n    \"elemental\",\n    { hit: { ele: constant(\"physical\") }\n}))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }],\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    value: condPassive,\n    path: condPassivePath,\n    name: st('hitOp.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(dmg_, { key: \"sheet:dmg\" })\n        }, {\n          text: sgt(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OldMercsPal\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeArchaic\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rainslasher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RedhornStonethresher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def)\nconst charged_dmgInc = prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    def_,\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n  }\n}, {\n  normal_dmgInc,\n  charged_dmgInc,\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: def_\n    }, {\n      node: normal_dmgInc\n    }, {\n      node: charged_dmgInc\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"opponentsDamaged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SerpentSpine\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\n\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\nconst all_dmg_stack = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: all_dmg_stack\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: {\n      ...objectKeyMap(range(1, 5), i => ({\n        name: st(\"seconds\", { count: i * 4 }),\n        fields: [{\n          node: all_dmg_stack\n        }, {\n          text: trm(\"takeMoreDmg\"),\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\n          unit: \"%\"\n        }]\n      })),\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardPride\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: all_dmg_,\n    }, {\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SnowTombedStarsilver\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SongOfBrokenPines\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n      atkSPD_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"name\"),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          node: atkSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customShieldNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBell\"\nconst data_gen = data_gen_json as WeaponData\n\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\nconst shield = customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst all_dmg_ = subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" })\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n}, {\n  shield\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"takeDmg\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\n        }, {\n          text: sgt(\"cd\"),\n          value: 45,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheUnforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"WasterGreatsword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Whiteblind\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteIronGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\nconst heal = equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp)))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    name: st('afterDefeatEnemy'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WolfsGravestone\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_,\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport Akuoumaru from \"./Akuoumaru\"\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\nimport DebateClub from \"./DebateClub\"\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\nimport FerrousShadow from \"./FerrousShadow\"\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\nimport LithicBlade from \"./LithicBlade\"\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\nimport OldMercsPal from \"./OldMercsPal\"\nimport PrototypeArchaic from \"./PrototypeArchaic\"\nimport Rainslasher from \"./Rainslasher\"\nimport RedhornStonethresher from \"./RedhornStonethresher\"\nimport RoyalGreatsword from \"./RoyalGreatsword\"\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\nimport SerpentSpine from \"./SerpentSpine\"\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\nimport SkywardPride from \"./SkywardPride\"\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\nimport TheBell from \"./TheBell\"\nimport TheUnforged from \"./TheUnforged\"\nimport WasterGreatsword from \"./WasterGreatsword\"\nimport Whiteblind from \"./Whiteblind\"\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\nimport WolfsGravestone from \"./WolfsGravestone\"\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\n  Akuoumaru,\n  BlackcliffSlasher,\n  BloodtaintedGreatsword,\n  DebateClub,\n  FavoniusGreatsword,\n  FerrousShadow,\n  KatsuragikiriNagamasa,\n  LithicBlade,\n  LuxuriousSeaLord,\n  OldMercsPal,\n  PrototypeArchaic,\n  Rainslasher,\n  RedhornStonethresher,\n  RoyalGreatsword,\n  SacrificialGreatsword,\n  SerpentSpine,\n  SkyriderGreatsword,\n  SkywardPride,\n  SnowTombedStarsilver,\n  SongOfBrokenPines,\n  TheBell,\n  TheUnforged,\n  WasterGreatsword,\n  Whiteblind,\n  WhiteIronGreatsword,\n  WolfsGravestone,\n} as const\nexport default claymore\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmenomaKageuchi\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquilaFavonia\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\nconst heal = equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk))\nconst dmg = equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n}))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n  },\n}, {\n  heal, dmg\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: st('takeDmg'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\n        }, {\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\n        }, {\n          text: sgt(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CinnabarSpindle\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\nconst skill_dmgInc = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: { // TODO: should be total\n    skill_dmgInc\n  }\n}, {\n  skill_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n      path: condPassivePath,\n      header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n      name: trm(\"name\"),\n      states: {\n        on: {\n          fields: [{\n            node: skill_dmgInc\n          }]\n        }\n      }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CoolSteel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DarkIronSword\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"DullBlade\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusSword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FesteringDesire\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    skill_critRate_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_\n    }, {\n      node: skill_critRate_\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FilletBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\nconst cd_Src = [15, 14, 13, 12, 11]\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\n    }, {\n      text: sgt(\"cd\"),\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\n      unit: \"s\"\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FreedomSworn\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst charged_dmg_ = { ...normal_dmg_ }\nconst plunging_dmg_ = { ...normal_dmg_ }\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: dmg_\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      normal_dmg_,\n      charged_dmg_,\n      plunging_dmg_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: dmg_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"sigilsConsumed\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: normal_dmg_\n        }, {\n          node: charged_dmg_\n        }, {\n          node: plunging_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\n))\nconst normal_dmg_ = lookup(condNode,\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\n  , naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...passive_dmg_,\n    normal_dmg_,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [ // Passive\n      ...allElements.map((ele) => {\n        return { node: passive_dmg_[`${ele}_dmg_`] }\n      })\n    ],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"consumed\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HarbingerOfDawn\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"greaterPercentHP\", { percent: 90 }),\n    states: {\n      on: {\n        fields: [{\n          node: critRate_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"IronSting\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\nconst eleDmgDealtStack = range(1, 2)\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\n  subscript(input.weapon.refineIndex, allDmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: all_dmg_,\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LionsRoar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MistsplitterReforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst stacks = [\"1\", \"2\", \"3\"] as const\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stacksRefine = {\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\n}\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\n))\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  equal(input.charEle, ele,\n    lookup(condNode, objectKeyMap(stacks, stack =>\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\n  )]\n))\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\n))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...allEle_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: allElements.map(ele => (\n      { node: passive_dmg_[`${ele}_dmg_`] }\n    ))\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"emblem\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(\n      stacks.map(stack => [stack, {\n        name: st(\"stack\", { count: parseInt(stack) }),\n        fields: allElements.map(ele => ({\n          node: stacks_dmg_[`${ele}_dmg_`]\n        }))\n      }])\n    )\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeCutter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\nconst atk = prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: hp_ }, { node: atk }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeRancour\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"onHit\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SilverSword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst dmg = equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n}))\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    moveSPD_,\n    atkSPD_,\n  }\n}, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: critRate_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st('afterUse.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: moveSPD_\n        }, {\n          node: atkSPD_\n        }, {\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SummitShaper\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SwordOfDescension\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = equal(\"Traveler\", input.charKey, constant(66))\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk\n  }\n}, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk\n    }, {\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheAlleyFlash\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBlackSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n}, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }, {\n      node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheFlute\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TravelersHandySword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\n    ]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponSwordKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\nimport AquilaFavonia from \"./AquilaFavonia\"\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\nimport CinnabarSpindle from \"./CinnabarSpindle\"\nimport CoolSteel from \"./CoolSteel\"\nimport DarkIronSword from \"./DarkIronSword\"\nimport DullBlade from \"./DullBlade\"\nimport FavoniusSword from \"./FavoniusSword\"\nimport FesteringDesire from \"./FesteringDesire\"\nimport FilletBlade from \"./FilletBlade\"\nimport FreedomSworn from \"./FreedomSworn\"\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\nimport IronSting from \"./IronSting\"\nimport LionsRoar from \"./LionsRoar\"\nimport MistsplitterReforged from \"./MistsplitterReforged\"\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\nimport PrototypeRancour from \"./PrototypeRancour\"\nimport RoyalLongsword from \"./RoyalLongsword\"\nimport SacrificialSword from \"./SacrificialSword\"\nimport SilverSword from \"./SilverSword\"\nimport SkyriderSword from \"./SkyriderSword\"\nimport SkywardBlade from \"./SkywardBlade\"\nimport SummitShaper from \"./SummitShaper\"\nimport SwordOfDescension from \"./SwordOfDescension\"\nimport TheAlleyFlash from \"./TheAlleyFlash\"\nimport TheBlackSword from \"./TheBlackSword\"\nimport TheFlute from \"./TheFlute\"\nimport TravelersHandySword from \"./TravelersHandySword\"\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\n  AmenomaKageuchi,\n  AquilaFavonia,\n  BlackcliffLongsword,\n  CinnabarSpindle,\n  CoolSteel,\n  DarkIronSword,\n  DullBlade,\n  FavoniusSword,\n  FesteringDesire,\n  FilletBlade,\n  FreedomSworn,\n  HaranGeppakuFutsu,\n  HarbingerOfDawn,\n  IronSting,\n  LionsRoar,\n  MistsplitterReforged,\n  PrimordialJadeCutter,\n  PrototypeRancour,\n  RoyalLongsword,\n  SacrificialSword,\n  SilverSword,\n  SkyriderSword,\n  SkywardBlade,\n  SummitShaper,\n  SwordOfDescension,\n  TheAlleyFlash,\n  TheBlackSword,\n  TheFlute,\n  TravelersHandySword,\n} as const\nexport default sword\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"BeginnersProtector\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"BlackcliffPole\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackTassel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CalamityQueller\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [tr] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\n// const [condActivePath, condActive] = cond(key, \"active\")\n\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\n\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\nconst atkInc = prod(\n  matchFull(input.activeCharKey, input.charKey,\n    constant(1, { /* TODO: Add key for active char */ }),\n    constant(2, { /* TODO: Add key for inactive char */ })),\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\n)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...dmg_Nodes,\n    atk_: atkInc,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\n  }, {\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: tr(\"passiveName\"),\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: atkInc }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CrescentPike\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\nconst hit = equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n}))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  hit\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(hit, { key: `weapon_${key}:hitName` })\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Deathmatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      \"oneOrNone\": {\n        name: trm(\"opponents.oneOrNone\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n      \"moreThanOne\": {\n        name: trm(\"opponents.moreThanOne\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonsBane\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonspineSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EngulfingLightning\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\n\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    enerRech_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: enerRech_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusLance\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Halberd\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"IronPoint\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KitainCrossSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"member\", { count: i }),\n      fields: [{ node: atk_ }, { node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.none\"),\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeStarglitter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardSpine\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\nconst atkSPD_ = percent(0.12)\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    atkSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critRate_,\n    }, {\n      node: atkSPD_,\n    }, {\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"StaffOfHoma\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\nconst atk1_ = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\nconst atk2_ = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" })\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk: sum(atk1_, atk2_)\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: hp_\n    }, {\n      node: infoMut(atk1_, { key: \"atk\" })\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: st(\"lessPercentHP\", { percent: 50 }),\n    states: {\n      on: {\n        fields: [{\n          node: atk2_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheCatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_,\n    burst_critRate_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"VortexVanquisher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WavebreakersFin\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteTassel\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponPoleArmKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport BeginnersProtector from './BeginnersProtector'\nimport BlackcliffPole from './BlackcliffPole'\nimport BlackTassel from './BlackTassel'\nimport CalamityQueller from './CalamityQueller'\nimport CrescentPike from './CrescentPike'\nimport Deathmatch from './Deathmatch'\nimport DragonsBane from './DragonsBane'\nimport DragonspineSpear from './DragonspineSpear'\nimport EngulfingLightning from './EngulfingLightning'\nimport FavoniusLance from './FavoniusLance'\nimport Halberd from './Halberd'\nimport IronPoint from './IronPoint'\nimport KitainCrossSpear from './KitainCrossSpear'\nimport LithicSpear from './LithicSpear'\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\nimport PrototypeStarglitter from './PrototypeStarglitter'\nimport RoyalSpear from './RoyalSpear'\nimport SkywardSpine from './SkywardSpine'\nimport StaffOfHoma from './StaffOfHoma'\nimport TheCatch from './TheCatch'\nimport VortexVanquisher from './VortexVanquisher'\nimport WavebreakersFin from './WavebreakersFin'\nimport WhiteTassel from './WhiteTassel'\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\n  BeginnersProtector,\n  BlackcliffPole,\n  BlackTassel,\n  CalamityQueller,\n  CrescentPike,\n  Deathmatch,\n  DragonsBane,\n  DragonspineSpear,\n  EngulfingLightning,\n  FavoniusLance,\n  Halberd,\n  IronPoint,\n  KitainCrossSpear,\n  LithicSpear,\n  PrimordialJadeWingedSpear,\n  PrototypeStarglitter,\n  RoyalSpear,\n  SkywardSpine,\n  StaffOfHoma,\n  TheCatch,\n  VortexVanquisher,\n  WavebreakersFin,\n  WhiteTassel,\n} as const\nexport default polearm\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AlleyHunter\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst dmgInc = [.02, .025, .03, .035, .04]\n\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\nconst all_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\n      name: st(\"seconds\", { count: c }),\n      fields: [{\n        node: all_dmg_\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmosBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\n\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\nconst normal_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, { key: \"normal_dmg_\" })\nconst charged_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, { key: \"charged_dmg_\" })\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 5), i => ({\n      name: st(\"seconds\", { count: i / 10 }),\n      fields: [{\n        node: normal_dmg_arrow_\n      }, {\n        node: charged_dmg_arrow_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquaSimulacra\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_: base_hp_,\n    all_dmg_: cond_dmg_,\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: base_hp_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: cond_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst atkInc = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_\n      }, {\n        text: sgt(\"duration\"),\n        value: 30,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CompoundBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.04, .05, .06, .07, .08]\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\n}, naught)\nconst atkSPD_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    atkSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.normalOrCharged\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: atkSPD_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ElegyForTheEnd\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\nconst eleMasInc = [60, 75, 90, 105, 120]\nconst eleMasInc2 = [100, 125, 150, 175, 200]\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas,\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      eleMas: eleMas2\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: eleMas,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas2\n        }, {\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FadingTwilight\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStatePath, condState] = cond(key, \"state\")\nconst state_dmg_dict = {\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\n}\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: state_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condState,\n    path: condStatePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\n      state,\n      {\n        name: trm(`states.${state}`),\n        fields: [{ node: state_dmg_ }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Hamayumi\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\n\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\n\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg, normal_passive),\n    charged_dmg_: sum(charged_dmg, charged_passive)\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg\n    }, {\n      node: charged_dmg\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: normal_passive\n        }, {\n          node: charged_passive\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"HuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Messenger\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MitternachtsWaltz\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\n\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\n\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skill\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }, {\n    value: condSkill,\n    path: condSkillPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      on: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MouunsMoon\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PolarStar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\n\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst atk_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    atk_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Predator\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normalInc = percent(.1)\nconst chargedInc = percent(.1)\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst normal_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\n}, naught)\nconst charged_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\n}, naught)\nconst atk = equal(input.activeCharKey, \"Aloy\", constant(66))\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_,\n    atk\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.cryo\"),\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: normal_dmg_\n      }, {\n        node: charged_dmg_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeCrescent\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.36, .45, .54, .63, .72]\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RavenBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RecurveBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healing_s = [.08, .10, .12, .14, .16]\nconst healing = customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s)))\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(healing, { key: \"sheet_gen:healing\", variant: \"success\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRate_s = [.08, .10, .12, .14, .16]\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\nconst critRate_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: critRate_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rust\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\n\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\nconst charged_dmg_ = constant(-0.1)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SeasonedHuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SharpshootersOath\"\nconst data_gen = data_gen_json as WeaponData\n\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    weakspotDMG_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: weakspotDMG_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardHarp\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critd_s = [.20, .25, .30, .35, .40]\nconst dmgPerc = percent(1.25)\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\nconst dmg = customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critDMG_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critDMG_\n    }, {\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Slingshot\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst normal_atk_increase_s = [.46, .52, .58, .64, .70] // Increased by 10% to counteract the decrease\nconst charged_atk_increase_s = [.46, .52, .58, .64, .70]\n\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\nconst normal_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_atk_increase_s), { key: \"normal_dmg_\" })\nconst charged_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_atk_increase_s), { key: \"charged_dmg_\" })\nconst normal_atk_decrease = percent(-0.1, { key: \"normal_dmg_\" })\nconst charged_atk_decrease = percent(-0.1, { key: \"charged_dmg_\" })\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_atk_increase, normal_atk_decrease),\n    charged_dmg_: sum(charged_atk_increase, normal_atk_decrease)\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_atk_decrease\n    }, {\n      node: charged_atk_decrease\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_atk_increase\n        }, {\n          node: charged_atk_increase\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheStringless\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheViridescentHunt\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\n\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThunderingPulse\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\n\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\nconst normal_dmg_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    normal_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 3), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: normal_dmg_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WindblumeOde\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.16, .20, .24, .28, .32]\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.skill\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: 's'\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponBowKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\n\nimport AlleyHunter from './AlleyHunter'\nimport AmosBow from \"./AmosBow\"\nimport AquaSimulacra from \"./AquaSimulacra\"\nimport BlackcliffWarbow from './BlackcliffWarbow'\nimport CompoundBow from './CompoundBow'\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\nimport FadingTwilight from \"./FadingTwilight\"\nimport FavoniusWarbow from './FavoniusWarbow'\nimport Hamayumi from './Hamayumi'\nimport HuntersBow from \"./HuntersBow\"\nimport Messenger from './Messenger'\nimport MitternachtsWaltz from './MitternachtsWaltz'\nimport MouunsMoon from './MouunsMoon'\nimport PolarStar from './PolarStar'\nimport Predator from './Predator'\nimport PrototypeCrescent from './PrototypeCrescent'\nimport RavenBow from './RavenBow'\nimport RecurveBow from './RecurveBow'\nimport RoyalBow from './RoyalBow'\nimport Rust from './Rust'\nimport SacrificialBow from \"./SacrificialBow\"\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\nimport SharpshootersOath from './SharpshootersOath'\nimport SkywardHarp from './SkywardHarp'\nimport Slingshot from './Slingshot'\nimport TheStringless from './TheStringless'\nimport TheViridescentHunt from './TheViridescentHunt'\nimport ThunderingPulse from './ThunderingPulse'\nimport WindblumeOde from './WindblumeOde'\n\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\n  AlleyHunter,\n  AmosBow,\n  AquaSimulacra,\n  BlackcliffWarbow,\n  CompoundBow,\n  ElegyForTheEnd,\n  FadingTwilight,\n  FavoniusWarbow,\n  Hamayumi,\n  HuntersBow,\n  Messenger,\n  MitternachtsWaltz,\n  MouunsMoon,\n  PolarStar,\n  Predator,\n  PrototypeCrescent,\n  RavenBow,\n  RecurveBow,\n  RoyalBow,\n  Rust,\n  SacrificialBow,\n  SeasonedHuntersBow,\n  SharpshootersOath,\n  SkywardHarp,\n  Slingshot,\n  TheStringless,\n  TheViridescentHunt,\n  ThunderingPulse,\n  WindblumeOde,\n} as const\nexport default bow\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"ApprenticesNotes\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffAgate\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_,\n      }, {\n        text: sgt(\"duration\"),\n        value: 30,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DodocoTales\"\nconst data_gen = data_gen_json as WeaponData\n\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\n\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_,\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    name: st(\"hitOp.normal\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condCharged,\n    path: condChargedPath,\n    name: st(\"hitOp.charged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EmeraldOrb\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EverlastingMoonglow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\nconst [, trm] = trans(\"weapon\", key)\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    heal_\n  }\n}, {\n  normal_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: heal_\n    }, {\n      text: trm(\"name\"),\n      node: normal_dmgInc,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EyeOfPerception\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusCodex\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Frostbearer\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmgAoe,\n  dmgOnCryoOp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport ColorText from '../../../../Components/ColoredText'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript, unequal } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HakushinRing\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\nconst anemo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"anemo\", condPassive, eleDmg))\nconst cryo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"cryo\", condPassive, eleDmg))\nconst geo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"geo\", condPassive, eleDmg))\nconst hydro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"hydro\", condPassive, eleDmg))\nconst pyro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"pyro\", condPassive, eleDmg))\n\nconst electro_dmg_ = unequal(input.activeCharKey, input.charKey, lookup(condPassive, { \"anemo\": eleDmg, \"cryo\": eleDmg, \"geo\": eleDmg, \"hydro\": eleDmg, \"pyro\": eleDmg }, naught))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      anemo_dmg_,\n      cryo_dmg_,\n      electro_dmg_,\n      geo_dmg_,\n      hydro_dmg_,\n      pyro_dmg_,\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n      path: condPassivePath,\n      name: trm(\"afterElectroReaction\"),\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\n      teamBuff: true,\n      header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n      states: {\n        anemo: {\n          name: <ColorText color=\"swirl\">{sgt(\"reaction.swirl\")}</ColorText>,\n          fields: [{\n            node: anemo_dmg_\n          }, {\n            node: electro_dmg_\n          }, {\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\n            text: sgt(\"duration\"),\n            value: 6,\n            unit: \"s\"\n          }]\n        },\n        cryo: {\n          name: <ColorText color=\"superconduct\">{sgt(\"reaction.Superconduct\")}</ColorText>,\n          fields: [{\n            node: cryo_dmg_\n          }, {\n            node: electro_dmg_\n          }, {\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\n            text: sgt(\"duration\"),\n            value: 6,\n            unit: \"s\"\n          }]\n        },\n        geo: {\n          name: <ColorText color=\"crystallize\">{sgt(\"reaction.crystallize\")}</ColorText>,\n          fields: [{\n            node: geo_dmg_\n          }, {\n            node: electro_dmg_\n          }, {\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\n            text: sgt(\"duration\"),\n            value: 6,\n            unit: \"s\"\n          }]\n        },\n        pyro: {\n          name: <ColorText color=\"overload\">{sgt(\"reaction.overloaded\")}</ColorText>,\n          fields: [{\n            node: pyro_dmg_\n          }, {\n            node: electro_dmg_\n          }, {\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\n            text: sgt(\"duration\"),\n            value: 6,\n            unit: \"s\"\n          }]\n        },\n        hydro: {\n          name: <ColorText color=\"electrocharged\">{sgt(\"reaction.electrocharged\")}</ColorText>,\n          fields: [{\n            node: hydro_dmg_\n          }, {\n            node: electro_dmg_\n          }, {\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\n            text: sgt(\"duration\"),\n            value: 6,\n            unit: \"s\"\n          }]\n        }\n      }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagurasVerity\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\nconst totems = range(1, 3)\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_: sum(...skill_dmg_s),\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states:\n      Object.fromEntries(totems.map(i => [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: skill_dmg_s[i - 1]\n        },\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\nconst data_gen = data_gen_json as WeaponData\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\n\nconst moveSPD_ = percent(0.1)\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { key: \"_\" })\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\n}, naught)]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    moveSPD_,\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: moveSPD_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"seconds\", { count: i * 4 }),\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MagicGuide\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MappaMare\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\n\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\n}, naught)])\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: eleDmgs\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\n        text: sgt(\"duration\"),\n        value: 10,\n        unit: \"s\"\n      }]\n    }))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MemoryOfDust\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OathswornEye\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\n\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    enerRech_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.skill\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: enerRech_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OtherworldlyStory\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PocketGrimoire\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeAmber\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\n\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.burst\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGrimoire\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialFragments\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardAtlas\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\n\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\n  }\n}, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\n      {\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\n      }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SolarPearl\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\nconst burst_dmg_ = { ...skill_dmg_ }\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    normal_dmg_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      normal: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          node: burst_dmg_\n        }]\n      }\n    }\n  }, {\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skillOrBurst\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: normal_dmg_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"TheWidsith\"\nconst data_gen = data_gen_json as WeaponData\nconst [tr, trm] = trans(\"weapon\", key)\n\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\n\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    anemo_dmg_,\n    cryo_dmg_,\n    electro_dmg_,\n    geo_dmg_,\n    hydro_dmg_,\n    pyro_dmg_,\n    eleMas\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: tr(\"passiveName\"),\n    states: {\n      aria: {\n        name: trm(\"aria\"),\n        fields: [{\n          node: anemo_dmg_\n        }, {\n          node: cryo_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          node: geo_dmg_\n        }, {\n          node: hydro_dmg_\n        }, {\n          node: pyro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      interlude: {\n        name: trm(\"interlude\"),\n        fields: [{\n          node: eleMas\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      recitative: {\n        name: trm(\"recitative\"),\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\n\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_Disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      atk_\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm('condName'),\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk_Disp, { key: \"atk_\" })\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TwinNephrite\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterDefeatEnemy\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WineAndSong\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterSprint\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 5,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponCatalystKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport ApprenticesNotes from './ApprenticesNotes'\nimport BlackcliffAgate from './BlackcliffAgate'\nimport DodocoTales from './DodocoTales'\nimport EmeraldOrb from './EmeraldOrb'\nimport EverlastingMoonglow from './EverlastingMoonglow'\nimport EyeOfPerception from './EyeOfPerception'\nimport FavoniusCodex from './FavoniusCodex'\nimport Frostbearer from './Frostbearer'\nimport HakushinRing from './HakushinRing'\nimport KagurasVerity from './KagurasVerity'\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\nimport MagicGuide from './MagicGuide'\nimport MappaMare from './MappaMare'\nimport MemoryOfDust from './MemoryOfDust'\nimport OathswornEye from './OathswornEye'\nimport OtherworldlyStory from './OtherworldlyStory'\nimport PocketGrimoire from './PocketGrimoire'\nimport PrototypeAmber from './PrototypeAmber'\nimport RoyalGrimoire from './RoyalGrimoire'\nimport SacrificialFragments from './SacrificialFragments'\nimport SkywardAtlas from './SkywardAtlas'\nimport SolarPearl from './SolarPearl'\nimport TheWidsith from './TheWidsith'\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\nimport TwinNephrite from './TwinNephrite'\nimport WineAndSong from './WineAndSong'\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\n  ApprenticesNotes,\n  BlackcliffAgate,\n  DodocoTales,\n  EmeraldOrb,\n  EverlastingMoonglow,\n  EyeOfPerception,\n  FavoniusCodex,\n  Frostbearer,\n  HakushinRing,\n  KagurasVerity,\n  LostPrayerToTheSacredWinds,\n  MagicGuide,\n  MappaMare,\n  MemoryOfDust,\n  OathswornEye,\n  OtherworldlyStory,\n  PocketGrimoire,\n  PrototypeAmber,\n  RoyalGrimoire,\n  SacrificialFragments,\n  SkywardAtlas,\n  SolarPearl,\n  TheWidsith,\n  ThrillingTalesOfDragonSlayers,\n  TwinNephrite,\n  WineAndSong,\n} as const\nexport default catalyst\n","import claymore from './Claymore'\nimport sword from './Sword'\nimport polearm from './Polearm'\nimport bow from './Bow'\nimport { WeaponKey } from '../../Types/consts'\nimport catalyst from './Catalyst'\nimport WeaponSheet from './WeaponSheet'\n\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\n  ...sword,\n  ...claymore,\n  ...polearm,\n  ...bow,\n  ...catalyst\n} as const\nexport default WeaponData\n","import { transformativeReactions } from \"../KeyMap/StatConstants\";\nimport { absorbableEle } from \"../Types/consts\";\nimport { objectKeyMap } from \"../Util/Util\";\nimport { input } from \"./index\";\nimport { frac, infoMut, percent, prod, subscript, sum, one } from \"./utils\";\n\n// https://github.com/Dimbreath/GenshinData/blob/72c9112a7c5e8e5014f61009a1a2764e266aeab7/ExcelBinOutput/ElementCoeffExcelConfigData.json\n//   or if the permalink is dead,\n// https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/ElementCoeffExcelConfigData.json\n//\n// PlayerElementLevelCo\nexport const transformativeReactionLevelMultipliers = [-1.0, // lvl 0\n  17.165606, 18.535048, 19.904854, 21.274902, 22.6454, 24.649612, 26.640642, 28.868587, 31.36768, 34.143345, 37.201, 40.66, 44.446667, 48.56352, 53.74848, 59.081898, 64.420044, 69.72446, 75.12314, 80.58478, 86.11203, 91.70374, 97.24463, 102.812645, 108.40956, 113.20169, 118.102905, 122.97932, 129.72733, 136.29291, 142.67085, 149.02902, 155.41699, 161.8255, 169.10631, 176.51808, 184.07274, 191.70952, 199.55692, 207.38205, 215.3989, 224.16566, 233.50217, 243.35057, 256.06308, 268.5435, 281.52606, 295.01364, 309.0672, 323.6016, 336.75754, 350.5303, 364.4827, 378.61917, 398.6004, 416.39825, 434.387, 452.95105, 472.60623, 492.8849, 513.56854, 539.1032, 565.51056, 592.53876, 624.4434, 651.47015, 679.4968, 707.79407, 736.67145, 765.64026, 794.7734, 824.67737, 851.1578, 877.74207, 914.2291, 946.74677, 979.4114, 1011.223, 1044.7917, 1077.4437, 1109.9976, 1142.9766, 1176.3695, 1210.1844, 1253.8357, 1288.9528, 1325.4841, 1363.4569, 1405.0974, 1446.8535]\n// PlayerShieldLevelCo\nexport const crystallizeLevelMultipliers = [-1.0, // lvl 0\n  91.1791, 98.707664, 106.23622, 113.76477, 121.29332, 128.82188, 136.35042, 143.87898, 151.40752, 158.93608, 169.99149, 181.07625, 192.19037, 204.0482, 215.939, 227.86275, 247.68594, 267.5421, 287.4312, 303.82642, 320.22522, 336.62762, 352.31927, 368.01093, 383.70255, 394.43237, 405.18146, 415.94992, 426.73764, 437.5447, 450.6, 463.7003, 476.84558, 491.1275, 502.55457, 514.0121, 531.4096, 549.9796, 568.5849, 584.9965, 605.67035, 626.3862, 646.0523, 665.7556, 685.4961, 700.8394, 723.3331, 745.8653, 768.4357, 786.79193, 809.5388, 832.32904, 855.16266, 878.0396, 899.4848, 919.362, 946.0396, 974.7642, 1003.5786, 1030.077, 1056.635, 1085.2463, 1113.9244, 1149.2587, 1178.0648, 1200.2238, 1227.6603, 1257.243, 1284.9174, 1314.7529, 1342.6652, 1372.7524, 1396.321, 1427.3124, 1458.3745, 1482.3358, 1511.9109, 1541.5493, 1569.1537, 1596.8143, 1622.4197, 1648.074, 1666.3761, 1684.6782, 1702.9803, 1726.1047, 1754.6715, 1785.8666, 1817.1375, 1851.0603]\n\n\nconst asConst = true as const\n\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\nconst crystallizeHit = infoMut(prod(sum(one, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\n\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\nconst trans = {\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\n    return infoMut(prod(\n      infoMut(prod(multi, transMulti1), { asConst }),\n      sum(one, transMulti2, input.total[`${reaction}_dmg_`]),\n      input.enemy[`${ele}_resMulti`]),\n      { key: `${reaction}_hit`, variant: reaction })\n  }),\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\n    prod(\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\n      sum(one, transMulti2, input.total.swirl_dmg_),\n      input.enemy[`${ele}_resMulti`]),\n    { key: `${ele}_swirl_hit`, variant: ele }))\n}\nexport const reactions = {\n  anemo: {\n    electroSwirl: trans.swirl.electro,\n    pyroSwirl: trans.swirl.pyro,\n    cryoSwirl: trans.swirl.cryo,\n    hydroSwirl: trans.swirl.hydro,\n    shattered: trans.shattered,\n  },\n  geo: {\n    crystallize: crystallizeHit,\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\n    shattered: trans.shattered,\n  },\n  electro: {\n    overloaded: trans.overloaded,\n    electrocharged: trans.electrocharged,\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n  },\n  hydro: {\n    electrocharged: trans.electrocharged,\n    shattered: trans.shattered,\n  },\n  pyro: {\n    overloaded: trans.overloaded,\n    shattered: trans.shattered,\n  },\n  cryo: {\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n  },\n}\n"],"names":["charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","key","input","infusionNode","stringPrio","inferredHitEle","lookup","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","customShieldNode","shieldNode","prod","sum","one","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","infoMut","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","fromEntries","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trans","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","min","naught","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","sgt","unit","all_dmg_","equal","on","dmg","charged_dmg_","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","dmg_","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","stacks","stacksRefine","stacks_dmg_","stack","allEle_dmg_","parseInt","hp_","atk","moveSPD_","autoSrc","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","tr","dmg_Nodes","e","matchFull","atkDefInc","enerRech_","dmgInc","atk1_","atk2_","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","keys","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","normal_atk_increase","charged_atk_increase","normal_atk_decrease","charged_atk_decrease","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","WindblumeOde","condChargedPath","condCharged","heal_","eleDmg","anemo_dmg_","unequal","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","electro_dmg_","canShow","anemo","color","cryo","geo","pyro","hydro","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","target","refineInc","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong","crystallizeMulti1","crystallizeElemas","frac","crystallizeHit","transMulti1","transMulti2","transformativeReactions","multi","variants","swirl","electroSwirl","electro","pyroSwirl","cryoSwirl","hydroSwirl","shattered","crystallize","absorbableEle","overloaded","electrocharged","superconduct"],"sourceRoot":""}