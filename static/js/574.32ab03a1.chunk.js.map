{"version":3,"file":"static/js/574.32ab03a1.chunk.js","mappings":"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","sources":["Components/Artifact/SetEffectDisplay.tsx","Components/Conditional/ConditionalSelector.tsx","Components/Conditional/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Components/HitModeEditor.tsx","Data/Characters/dataUtil.tsx","Formula/DisplayUtil.tsx","Formula/reaction.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetConditional.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/OptimizationTargetSelector.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/foreground.ts"],"sourcesContent":["import { Box } from \"@mui/material\"\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\nimport DocumentDisplay from \"../DocumentDisplay\"\n\ntype Data = {\n  setKey: ArtifactSetKey,\n  setNumKey: SetNum,\n  hideHeader?: boolean,\n  conditionalsOnly?: boolean\n}\n\nexport default function SetEffectDisplay({ setKey, setNumKey, hideHeader = false, conditionalsOnly = false }: Data) {\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\n  if (!sheet) return null\n\n  const document = conditionalsOnly ? sheet.setEffectDocument(setNumKey)?.filter(section => \"states\" in section) : sheet.setEffectDocument(setNumKey)\n  return <Box display=\"flex\" flexDirection=\"column\">\n    {document ? <DocumentDisplay sections={document} hideHeader={hideHeader} /> : null}\n  </Box>\n}\n","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material';\nimport { Button, ButtonGroup, Divider, MenuItem } from '@mui/material';\nimport React, { useCallback, useContext } from 'react';\nimport { DataContext } from '../../DataContext';\nimport { DocumentConditional, IDocumentConditionalExclusive, IDocumentConditionalMultiple } from '../../Types/sheet';\nimport { deepClone, deletePropPath, layeredAssignment } from '../../Util/Util';\nimport DropdownButton from '../DropdownMenu/DropdownButton';\nimport SqBadge from '../SqBadge';\nimport { Translate } from '../Translate';\n\ninterface ConditionalSelectorProps {\n  conditional: DocumentConditional,\n  disabled?: boolean,\n}\nexport default function ConditionalSelector({ conditional, disabled = false, }: ConditionalSelectorProps) {\n  if (Object.keys(conditional.states).length === 1 && \"path\" in conditional) {\n    return <SimpleConditionalSelector conditional={conditional} disabled={disabled} />\n  } else if (\"path\" in conditional) {\n    return <ExclusiveConditionalSelector conditional={conditional} disabled={disabled} />\n  } else /*if (\"path\" in Object.entries(conditional.states)[0]) */ {\n    return <MultipleConditionalSelector conditional={conditional} disabled={disabled} />\n  }\n}\n\ninterface SimpleConditionalSelectorProps extends ConditionalSelectorProps {\n  conditional: IDocumentConditionalExclusive\n}\nfunction SimpleConditionalSelector({ conditional, disabled }: SimpleConditionalSelectorProps) {\n  const { character, characterDispatch, data } = useContext(DataContext)\n  const setConditional = useCallback((v?: string) => {\n    const conditionalValues = deepClone(character.conditional)\n    if (v) {\n      layeredAssignment(conditionalValues, conditional.path, v)\n    } else {\n      deletePropPath(conditionalValues, conditional.path)\n    }\n    characterDispatch({ conditional: conditionalValues })\n  }, [conditional, character, characterDispatch])\n\n  const conditionalValue = data.get(conditional.value).value\n  const [stateKey, st] = Object.entries(conditional.states)[0]\n  const badge = getStateBadge(st.name)\n  const condName = getCondName(conditional.name)\n\n  return <Button fullWidth size=\"small\" sx={{ borderRadius: 0 }} color={conditionalValue ? \"success\" : \"primary\"} onClick={() => setConditional(conditionalValue ? undefined : stateKey)} disabled={disabled} startIcon={conditionalValue ? <CheckBox /> : <CheckBoxOutlineBlank />}>\n    {condName} {badge}\n  </Button>\n}\n\ninterface ExclusiveConditionalSelectorProps extends ConditionalSelectorProps {\n  conditional: IDocumentConditionalExclusive\n}\nfunction ExclusiveConditionalSelector({ conditional, disabled }: ExclusiveConditionalSelectorProps) {\n  const { character, characterDispatch, data } = useContext(DataContext)\n  const setConditional = useCallback((v?: string) => {\n    const conditionalValues = deepClone(character.conditional)\n    if (v) {\n      layeredAssignment(conditionalValues, conditional.path, v)\n    } else {\n      deletePropPath(conditionalValues, conditional.path)\n    }\n    characterDispatch({ conditional: conditionalValues })\n  }, [conditional, character, characterDispatch])\n\n  const conditionalValue = data.get(conditional.value).value\n  const state = conditionalValue ? conditional.states[conditionalValue] : undefined\n  const badge = state ? getStateBadge(state.name) : <SqBadge color=\"secondary\">Not Active</SqBadge>\n  const condName = getCondName(conditional.name)\n\n  return <DropdownButton fullWidth size=\"small\" sx={{ borderRadius: 0 }} color={conditionalValue ? \"success\" : \"primary\"} title={<span>{condName} {badge}</span>} disabled={disabled}>\n    <MenuItem onClick={() => setConditional()} selected={!state} disabled={!state}>\n      <span>Not Active</span>\n    </MenuItem>\n    <Divider />\n    {Object.entries(conditional.states).map(([stateKey, st]) =>\n      <MenuItem key={stateKey} onClick={() => setConditional(stateKey)} selected={conditionalValue === stateKey} disabled={conditionalValue === stateKey} >{st.name}</MenuItem>)}\n  </DropdownButton>\n}\n\ninterface MultipleConditionalSelectorProps extends ConditionalSelectorProps {\n  conditional: IDocumentConditionalMultiple\n}\nfunction MultipleConditionalSelector({ conditional, disabled }: MultipleConditionalSelectorProps) {\n  const { character, characterDispatch, data } = useContext(DataContext)\n  const setConditional = useCallback((path: readonly string[], v?: string) => {\n    const conditionalValues = deepClone(character.conditional)\n    if (v) {\n      layeredAssignment(conditionalValues, path, v)\n    } else {\n      deletePropPath(conditionalValues, path)\n    }\n    characterDispatch({ conditional: conditionalValues })\n  }, [character, characterDispatch])\n\n  return <ButtonGroup fullWidth orientation=\"vertical\" disableElevation color=\"secondary\" >\n    {Object.entries(conditional.states).map(([stateKey, st]) => {\n      const conditionalValue = data.get(st.value).value\n      const isSelected = conditionalValue === stateKey\n      return <Button\n        color={isSelected ? \"success\" : \"primary\"}\n        disabled={disabled}\n        fullWidth\n        key={stateKey}\n        onClick={() => setConditional(st.path, conditionalValue ? undefined : stateKey)}\n        size=\"small\"\n        startIcon={isSelected ? <CheckBox /> : <CheckBoxOutlineBlank />}\n        sx={{ borderRadius: 0 }}\n      >\n        {getCondName(st.name)}\n      </Button>\n    })}\n  </ButtonGroup>\n}\n\nfunction isElement(disp: Displayable): disp is JSX.Element {\n  return (typeof disp !== \"string\")\n}\n\n// Use colored badges instead of colored text inside these buttons\nfunction getStateBadge(stateName: Displayable | undefined): Displayable {\n  if (!stateName) return \"\"\n\n  let badgeColor = \"primary\"\n  let badgeText = stateName\n  if (stateName && isElement(stateName)) {\n    if (stateName.props.color) {\n      badgeColor = stateName.props.color\n      badgeText = <span>{stateName.props.children}</span>\n    }\n  }\n  return <SqBadge sx={{ ml: 0.5 }} color={badgeColor}>{badgeText}</SqBadge>\n}\n\n// Use colored badges instead of colored text inside these buttons\nfunction getCondName(condName: Displayable): Displayable {\n  if (isElement(condName)) {\n    const key = condName.props.key18\n    const ns = condName.props.ns\n    const values = condName.props.values\n    return <Translate ns={ns} key18={key} values={values} useBadge />\n  }\n  return condName\n}\n","import { CardContent } from \"@mui/material\"\nimport { useContext } from \"react\"\nimport { DataContext } from \"../../DataContext\"\nimport { DocumentConditional, DocumentSection } from \"../../Types/sheet\"\nimport { evalIfFunc } from \"../../Util/Util\"\nimport CardDark from \"../Card/CardDark\"\nimport { HeaderDisplay } from \"../DocumentDisplay\"\nimport FieldsDisplay from \"../FieldDisplay\"\nimport ConditionalSelector from \"./ConditionalSelector\"\n\ntype ConditionalDisplayProps = {\n  conditional: DocumentConditional,\n  hideHeader?: boolean | ((section: DocumentSection) => boolean),\n  hideDesc?: boolean,\n}\n\nexport default function ConditionalDisplay({ conditional, hideHeader = false, hideDesc = false }: ConditionalDisplayProps) {\n  const { data } = useContext(DataContext)\n  let fields\n  if (\"path\" in conditional) {\n    const condVal = data.get(conditional.value).value\n    fields = condVal && conditional.states[condVal]?.fields\n  } else /* if (\"path\" in Object.entries(conditional.states)[0]) */ {\n    fields = Object.values(conditional.states).flatMap(state => {\n      const stateVal = data.get(state.value).value\n      return stateVal ? state.fields : []\n    })\n  }\n  return <CardDark>\n    {!evalIfFunc(hideHeader, conditional) && <HeaderDisplay header={conditional.header} hideDesc={hideDesc} />}\n    <CardContent sx={{ p: 0, \"&:last-child\": { pb: 0 } }}>\n      <ConditionalSelector conditional={conditional} />\n    </CardContent>\n    {fields && <FieldsDisplay fields={fields} />}\n  </CardDark>\n}\n","import { Box, CardHeader, Divider, Typography } from \"@mui/material\"\nimport { useContext } from \"react\"\nimport { DataContext } from \"../DataContext\"\nimport { DocumentSection, IDocumentFields, IDocumentHeader, IDocumentText } from \"../Types/sheet\"\nimport { evalIfFunc } from \"../Util/Util\"\nimport CardDark from \"./Card/CardDark\"\nimport ConditionalDisplay from \"./Conditional/ConditionalDisplay\"\nimport FieldsDisplay from \"./FieldDisplay\"\nimport InfoTooltip from \"./InfoTooltip\"\n\ntype DocumentDisplayProps = {\n  sections: DocumentSection[],\n  teamBuffOnly?: boolean,\n  hideDesc?: boolean,\n  hideHeader?: boolean | ((section: DocumentSection) => boolean),\n}\n\nexport default function DocumentDisplay({ sections, teamBuffOnly, hideDesc = false, hideHeader = false }: DocumentDisplayProps) {\n  const { data } = useContext(DataContext)\n  if (!sections.length) return null\n  const sectionDisplays = sections.map((s, i) => {\n    // If we can't show this section, return null\n    if (s.canShow && !data.get(s.canShow).value ) return null\n    // If we are showing only teambuffs, and this section is not a teambuff, return null\n    if (teamBuffOnly && !s.teamBuff) return null\n    return <SectionDisplay section={s} key={i} hideDesc={hideDesc} hideHeader={hideHeader} />\n  }).filter(s => s)\n  if (!sectionDisplays.length) return null\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>{sectionDisplays}</Box>\n}\n\nfunction SectionDisplay({ section, hideDesc = false, hideHeader = false }: { section: DocumentSection, hideDesc?: boolean, hideHeader?: boolean | ((section: DocumentSection) => boolean) }) {\n  if (\"fields\" in section) {\n    return <FieldsSectionDisplay section={section} hideDesc={hideDesc} hideHeader={hideHeader} />\n  } else if (\"states\" in section) {\n    return <ConditionalDisplay conditional={section} hideDesc={hideDesc} hideHeader={hideHeader} />\n  } else /* if (\"text\" in section) */ {\n    return <TextSectionDisplay section={section} />\n  }\n}\n\nfunction FieldsSectionDisplay({ section, hideDesc, hideHeader }: { section: IDocumentFields, hideDesc?: boolean, hideHeader?: boolean | ((section: DocumentSection) => boolean) }) {\n  return <CardDark>\n    {!evalIfFunc(hideHeader, section) && section.header &&\n      <HeaderDisplay header={section.header} hideDesc={hideDesc} hideDivider={section.fields.length === 0} />\n    }\n    <FieldsDisplay fields={section.fields} />\n  </CardDark>\n}\n\nfunction TextSectionDisplay({ section }: { section: IDocumentText }) {\n  const { data } = useContext(DataContext)\n  return <div>\n    {evalIfFunc(section.text, data)}\n  </div>\n}\n\nexport function HeaderDisplay({ header, hideDesc, hideDivider }: { header: IDocumentHeader, hideDesc?: boolean, hideDivider?: boolean | ((section: DocumentSection) => boolean) }) {\n  const { data } = useContext(DataContext)\n  let { icon, title, action } = header\n  icon = evalIfFunc(icon, data)\n  const description = !hideDesc && evalIfFunc(header.description, data)\n  const displayTitle = hideDesc ? title : <span>{title} <InfoTooltip title={<Typography>{description}</Typography>} /></span>\n  return <>\n    <CardHeader avatar={icon} title={displayTitle} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />\n    {!hideDivider && <Divider />}\n  </>\n}\n","import { Box, MenuItem, ToggleButton, ToggleButtonGroupProps } from \"@mui/material\";\nimport { useContext } from 'react';\nimport { infusionNode } from \"../Data/Characters/dataUtil\";\nimport { DataContext } from \"../DataContext\";\nimport { uiInput as input } from \"../Formula\";\nimport { ElementKey } from \"../Types/consts\";\nimport ColorText from \"./ColoredText\";\nimport DropdownButton, { DropdownButtonProps } from \"./DropdownMenu/DropdownButton\";\nimport SolidToggleButtonGroup from \"./SolidToggleButtonGroup\";\nimport SqBadge from \"./SqBadge\";\nimport { uncoloredEleIcons } from \"./StatIcon\";\nconst infusionVals = {\n  \"\": <span>No Team Melee Infusion</span>,\n  \"pyro\": <span >{uncoloredEleIcons.pyro} <SqBadge>Bennett C6</SqBadge> Fire Ventures with Me</span>,\n  \"cryo\": <span >{uncoloredEleIcons.cryo} <SqBadge>Chongyun Skill</SqBadge> Spirit Blade: Chonghua's Layered Frost</span>,\n}\ntype InfusionAuraDropdownProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\">\nexport function InfusionAuraDropdown(props: InfusionAuraDropdownProps) {\n  const { characterSheet, character: { infusionAura }, characterDispatch } = useContext(DataContext)\n  if (!characterSheet?.isMelee()) return null\n  return <DropdownButton title={infusionVals[infusionAura]} color={infusionAura || \"secondary\"} disableElevation {...props}>\n    {Object.entries(infusionVals).map(([key, text]) =>\n      <MenuItem key={key} sx={key ? { color: `${key}.main` } : undefined}\n        selected={key === infusionAura} disabled={key === infusionAura}\n        onClick={() => characterDispatch({ infusionAura: key })}>{text}</MenuItem>)}\n  </DropdownButton>\n}\n\ntype ReactionToggleProps = Omit<ToggleButtonGroupProps, \"color\">\nconst sqBadgeStyle = { mx: 0.25, px: 0.25, fontSize: \"1em\" }\nexport function ReactionToggle(props: ReactionToggleProps) {\n  const { data, character: { reactionMode }, characterDispatch } = useContext(DataContext)\n  const charEleKey = data.get(input.charEle).value as ElementKey\n  const infusion = data.get(infusionNode).value as ElementKey\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusion)) return null\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\n    value={reactionMode} onChange={(_, reactionMode) => characterDispatch({ reactionMode })} {...props}>\n    <ToggleButton value=\"\" disabled={reactionMode === \"\"} >No Reactions</ToggleButton >\n    {(charEleKey === \"pyro\" || infusion === \"pyro\") && <ToggleButton value=\"pyro_vaporize\" disabled={reactionMode === \"pyro_vaporize\"}>\n      <ColorText color=\"vaporize\">\n        Vaporize(Pyro)\n      </ColorText>\n      <Box display=\"flex\" alignItems=\"center\">\n        <SqBadge sx={sqBadgeStyle} color=\"hydro\">{uncoloredEleIcons.hydro}</SqBadge>\n        +\n        <SqBadge sx={sqBadgeStyle} color=\"pyro\">{uncoloredEleIcons.pyro}</SqBadge>\n      </Box>\n    </ToggleButton >}\n    {(charEleKey === \"pyro\" || infusion === \"pyro\") && <ToggleButton value={\"pyro_melt\"} disabled={reactionMode === \"pyro_melt\"}>\n      <ColorText color=\"melt\">\n        Melt(Pyro)\n      </ColorText>\n      <Box display=\"flex\" alignItems=\"center\">\n        <SqBadge sx={sqBadgeStyle} color=\"cryo\">{uncoloredEleIcons.cryo}</SqBadge>\n        +\n        <SqBadge sx={sqBadgeStyle} color=\"pyro\">{uncoloredEleIcons.pyro}</SqBadge>\n      </Box>\n    </ToggleButton >}\n    {(charEleKey === \"hydro\" || infusion === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} disabled={reactionMode === \"hydro_vaporize\"}>\n      <ColorText color=\"vaporize\">\n        Vaporize(Hydro)\n      </ColorText>\n      <Box display=\"flex\" alignItems=\"center\">\n        <SqBadge sx={sqBadgeStyle} color=\"pyro\">{uncoloredEleIcons.pyro}</SqBadge>\n        +\n        <SqBadge sx={sqBadgeStyle} color=\"hydro\">{uncoloredEleIcons.hydro}</SqBadge>\n      </Box>\n    </ToggleButton >}\n    {(charEleKey === \"cryo\" || infusion === \"cryo\") && <ToggleButton value={\"cryo_melt\"} disabled={reactionMode === \"cryo_melt\"}>\n      <ColorText color=\"melt\">\n        Melt(Cryo)\n      </ColorText>\n      <Box display=\"flex\" alignItems=\"center\">\n        <SqBadge sx={sqBadgeStyle} color=\"pyro\">{uncoloredEleIcons.pyro}</SqBadge>\n        +\n        <SqBadge sx={sqBadgeStyle} color=\"cryo\">{uncoloredEleIcons.cryo}</SqBadge>\n      </Box>\n    </ToggleButton >}\n  </SolidToggleButtonGroup>\n}\ntype HitModeToggleProps = Omit<ToggleButtonGroupProps, \"color\">\nexport function HitModeToggle(props: HitModeToggleProps) {\n  const { character: { hitMode }, characterDispatch } = useContext(DataContext)\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\n    value={hitMode} onChange={(_, hitMode) => characterDispatch({ hitMode })} {...props} >\n    <ToggleButton value=\"avgHit\" disabled={hitMode === \"avgHit\"}>Avg. DMG</ToggleButton>\n    <ToggleButton value=\"hit\" disabled={hitMode === \"hit\"}>Non Crit DMG</ToggleButton>\n    <ToggleButton value=\"critHit\" disabled={hitMode === \"critHit\"}>Crit Hit DMG</ToggleButton>\n  </SolidToggleButtonGroup>\n}\n","import { SubstatKey } from \"pipeline\";\nimport { input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, infoMut, lookup, percent, prod, stringPrio, subscript, sum, one } from \"../../Formula/utils\";\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\n\nexport const infusionNode = stringPrio(\n  input.infusion.nonOverridableSelf,\n  input.infusion.team,\n  input.infusion.overridableSelf)\nconst inferredHitEle = stringPrio(\n  lookup(input.hit.move, {\n    \"skill\": input.charEle, \"burst\": input.charEle,\n  }, undefined),\n  lookup(input.weaponType, {\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\n    catalyst: input.charEle,\n  }, undefined),\n  \"physical\"\n)\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\n/** Note: `additional` applies only to this formula */\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\n  }, additional]))\n}\n/** Note: `additional` applies only to this formula */\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\n  const shieldNode = prod(base, sum(one, input.total.shield_))\n  return additional ? data(shieldNode, additional) : shieldNode\n}\n/** Note: `additional` applies only to this formula */\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\n  const healInc = input.total.healInc\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\n\n  return additional ? data(healNode, additional) : healNode\n}\n/** Note: `additional` applies only to this formula */\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  const talentType = getTalentType(move)\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customShieldNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\n}\n/** Note: `additional` applies only to this formula */\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customHealNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","import { Typography } from \"@mui/material\";\nimport { input } from \".\";\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\nimport ColorText from \"../Components/ColoredText\";\nimport SqBadge from \"../Components/SqBadge\";\nimport { ArtifactSetKey, CharacterKey, ElementKey, WeaponKey } from \"../Types/consts\";\nimport { range } from \"../Util/Util\";\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\nimport { DisplaySub } from \"./type\";\nimport { NodeDisplay, UIData } from \"./uiData\";\n\nconst errHeader = {\n  title: <ColorText color=\"warning\">ERROR</ColorText>\n}\n\nconst talentMap = {\n  normal: \"Normal Atk.\",\n  charged: \"Charged Atk.\",\n  plunging: \"Plunging Atk.\",\n  skill: \"Ele. Skill\",\n  burst: \"Ele. Burst\",\n  passive: \"Passive\",\n  passive1: \"1st Asc. Pass.\",\n  passive2: \"4th Asc. Pass.\",\n  passive3: \"Util. Pass.\",\n  ...Object.fromEntries(range(1, 6).map(i => [`constellation${i}`, `Const. ${i}`]))\n}\nexport async function getDisplayHeader(data: UIData, sectionKey: string): Promise<{\n  title: Displayable,\n  icon?: string,\n  action?: Displayable\n}> {\n  if (!sectionKey) return errHeader\n  if (sectionKey === \"basic\") return { title: \"Basic Stats\" }\n  else if (sectionKey === \"reaction\") return { title: \"Transformative Reactions\" }\n  else if (sectionKey.includes(\":\")) {\n    const [namespace, key] = sectionKey.split(\":\")\n    if (namespace === \"artifact\") {\n      const sheet = await ArtifactSheet.get(key as ArtifactSetKey)\n      if (!sheet) return errHeader\n      return {\n        title: sheet.name,\n        icon: sheet.defIconSrc\n      }\n    } else if (namespace === \"weapon\") {\n      const sheet = await WeaponSheet.get(key as WeaponKey)\n      if (!sheet) return errHeader\n      const asc = data.get(input.weapon.asc).value\n      return {\n        title: sheet.name,\n        icon: asc < 2 ? sheet.img : sheet.imgAwaken\n      }\n    }\n  } else {\n    const cKey = data.get(input.charKey).value\n    const cEle = data.get(input.charEle).value\n    if (!cKey || !cEle) return errHeader\n    const sheet = await CharacterSheet.get(cKey as CharacterKey)\n    const talentKey = [\"normal\", \"charged\", \"plunging\"].includes(sectionKey) ? \"auto\" : sectionKey\n    const talent = sheet?.getTalentOfKey(talentKey as any, cEle as ElementKey)\n    if (!talent) return errHeader\n    const actionText = talentMap[sectionKey]\n    return {\n      icon: talent.img,\n      title: talent.name,\n      action: actionText ? <SqBadge ><Typography variant=\"subtitle2\">{actionText}</Typography></SqBadge> : undefined\n    }\n  }\n  return errHeader\n}\n/**\n * Use this function to reorganize the sections to have basic stats at the beginning, and reation at the end.\n * @param data\n * @returns\n */\nexport function getDisplaySections(data: UIData,): [string, DisplaySub<NodeDisplay>][] {\n  const display = data.getDisplay()\n  const sections = Object.entries(display).filter(([key, nodes]) => !Object.values(nodes).every(x => x.isEmpty))\n  const basic = sections.filter(([k]) => k === \"basic\")\n  const reaction = sections.filter(([k]) => k === \"reaction\")\n  const weapon = sections.filter(([k]) => k.startsWith(\"weapon\"))\n  const artifact = sections.filter(([k]) => k.startsWith(\"artifact\"))\n  const rest = sections.filter(([k]) => k !== \"basic\" && k !== \"reaction\" && !k.startsWith(\"weapon\") && !k.startsWith(\"artifact\"))\n\n  return [\n    ...basic,\n    ...rest,\n    ...weapon,\n    ...artifact,\n    ...reaction\n  ]\n}\n","import { transformativeReactions } from \"../KeyMap/StatConstants\";\nimport { absorbableEle } from \"../Types/consts\";\nimport { objectKeyMap } from \"../Util/Util\";\nimport { input } from \"./index\";\nimport { frac, infoMut, percent, prod, subscript, sum, one } from \"./utils\";\n\n// https://github.com/Dimbreath/GenshinData/blob/72c9112a7c5e8e5014f61009a1a2764e266aeab7/ExcelBinOutput/ElementCoeffExcelConfigData.json\n//   or if the permalink is dead,\n// https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/ElementCoeffExcelConfigData.json\n//\n// PlayerElementLevelCo\nexport const transformativeReactionLevelMultipliers = [-1.0, // lvl 0\n  17.165606, 18.535048, 19.904854, 21.274902, 22.6454, 24.649612, 26.640642, 28.868587, 31.36768, 34.143345, 37.201, 40.66, 44.446667, 48.56352, 53.74848, 59.081898, 64.420044, 69.72446, 75.12314, 80.58478, 86.11203, 91.70374, 97.24463, 102.812645, 108.40956, 113.20169, 118.102905, 122.97932, 129.72733, 136.29291, 142.67085, 149.02902, 155.41699, 161.8255, 169.10631, 176.51808, 184.07274, 191.70952, 199.55692, 207.38205, 215.3989, 224.16566, 233.50217, 243.35057, 256.06308, 268.5435, 281.52606, 295.01364, 309.0672, 323.6016, 336.75754, 350.5303, 364.4827, 378.61917, 398.6004, 416.39825, 434.387, 452.95105, 472.60623, 492.8849, 513.56854, 539.1032, 565.51056, 592.53876, 624.4434, 651.47015, 679.4968, 707.79407, 736.67145, 765.64026, 794.7734, 824.67737, 851.1578, 877.74207, 914.2291, 946.74677, 979.4114, 1011.223, 1044.7917, 1077.4437, 1109.9976, 1142.9766, 1176.3695, 1210.1844, 1253.8357, 1288.9528, 1325.4841, 1363.4569, 1405.0974, 1446.8535]\n// PlayerShieldLevelCo\nexport const crystallizeLevelMultipliers = [-1.0, // lvl 0\n  91.1791, 98.707664, 106.23622, 113.76477, 121.29332, 128.82188, 136.35042, 143.87898, 151.40752, 158.93608, 169.99149, 181.07625, 192.19037, 204.0482, 215.939, 227.86275, 247.68594, 267.5421, 287.4312, 303.82642, 320.22522, 336.62762, 352.31927, 368.01093, 383.70255, 394.43237, 405.18146, 415.94992, 426.73764, 437.5447, 450.6, 463.7003, 476.84558, 491.1275, 502.55457, 514.0121, 531.4096, 549.9796, 568.5849, 584.9965, 605.67035, 626.3862, 646.0523, 665.7556, 685.4961, 700.8394, 723.3331, 745.8653, 768.4357, 786.79193, 809.5388, 832.32904, 855.16266, 878.0396, 899.4848, 919.362, 946.0396, 974.7642, 1003.5786, 1030.077, 1056.635, 1085.2463, 1113.9244, 1149.2587, 1178.0648, 1200.2238, 1227.6603, 1257.243, 1284.9174, 1314.7529, 1342.6652, 1372.7524, 1396.321, 1427.3124, 1458.3745, 1482.3358, 1511.9109, 1541.5493, 1569.1537, 1596.8143, 1622.4197, 1648.074, 1666.3761, 1684.6782, 1702.9803, 1726.1047, 1754.6715, 1785.8666, 1817.1375, 1851.0603]\n\n\nconst asConst = true as const\n\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\nconst crystallizeHit = infoMut(prod(sum(one, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\n\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\nconst trans = {\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\n    return infoMut(prod(\n      infoMut(prod(multi, transMulti1), { asConst }),\n      sum(one, transMulti2, input.total[`${reaction}_dmg_`]),\n      input.enemy[`${ele}_resMulti`]),\n      { key: `${reaction}_hit`, variant: reaction })\n  }),\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\n    prod(\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\n      sum(one, transMulti2, input.total.swirl_dmg_),\n      input.enemy[`${ele}_resMulti`]),\n    { key: `${ele}_swirl_hit`, variant: ele }))\n}\nexport const reactions = {\n  anemo: {\n    electroSwirl: trans.swirl.electro,\n    pyroSwirl: trans.swirl.pyro,\n    cryoSwirl: trans.swirl.cryo,\n    hydroSwirl: trans.swirl.hydro,\n    shattered: trans.shattered,\n  },\n  geo: {\n    crystallize: crystallizeHit,\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\n    shattered: trans.shattered,\n  },\n  electro: {\n    overloaded: trans.overloaded,\n    electrocharged: trans.electrocharged,\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n  },\n  hydro: {\n    electrocharged: trans.electrocharged,\n    shattered: trans.shattered,\n  },\n  pyro: {\n    overloaded: trans.overloaded,\n    shattered: trans.shattered,\n  },\n  cryo: {\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n  },\n}\n","import { Replay } from '@mui/icons-material';\nimport { Box, Button, CardContent, Divider, Grid, Typography } from '@mui/material';\nimport React, { useCallback, useContext, useMemo, useState } from 'react';\nimport SetEffectDisplay from '../../../../../Components/Artifact/SetEffectDisplay';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport CloseButton from '../../../../../Components/CloseButton';\nimport InfoTooltip from '../../../../../Components/InfoTooltip';\nimport ModalWrapper from '../../../../../Components/ModalWrapper';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport { Stars } from '../../../../../Components/StarDisplay';\nimport { Translate } from '../../../../../Components/Translate';\nimport { ArtifactSheet } from '../../../../../Data/Artifacts/ArtifactSheet';\nimport { DataContext, dataContextObj } from '../../../../../DataContext';\nimport { UIData } from '../../../../../Formula/uiData';\nimport { constant } from '../../../../../Formula/utils';\nimport usePromise from '../../../../../ReactHooks/usePromise';\nimport { allArtifactSets, SetNum } from '../../../../../Types/consts';\nimport { objectKeyMap } from '../../../../../Util/Util';\n\nexport default function ArtifactSetConditional({ disabled }: { disabled?: boolean }) {\n  const { character } = useContext(DataContext)\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => setOpen(true), [setOpen])\n  const onClose = useCallback(() => setOpen(false), [setOpen])\n  const artifactCondCount = useMemo(() =>\n    (Object.keys(character.conditional) as any).filter(k =>\n      allArtifactSets.includes(k) && Object.keys(character.conditional[k]).length !== 0).length\n    , [character])\n  return <>\n    <Button fullWidth onClick={onOpen} disabled={disabled} color=\"info\">\n      <span>Default Artifact Set Effects Conditionals {!!artifactCondCount && <SqBadge color=\"success\">{artifactCondCount} Selected</SqBadge>}</span>\n    </Button>\n    <ArtConditionalModal open={open} onClose={onClose} artifactCondCount={artifactCondCount} />\n  </>\n}\n\nfunction ArtConditionalModal({ open, onClose, artifactCondCount }: {\n  open: boolean, onClose: () => void, artifactCondCount: number\n}) {\n  const dataContext = useContext(DataContext)\n  const { character, characterDispatch } = dataContext\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const resetArtConds = useCallback(() => {\n    const conditional = Object.fromEntries(Object.entries(character.conditional).filter(([k, v]) => !allArtifactSets.includes(k as any)))\n    characterDispatch({ conditional })\n  }, [character, characterDispatch]);\n\n  if (!artifactSheets) return null\n  const artSetKeyList = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets)).reverse().flatMap(([, sets]) => sets)\n  return <ModalWrapper open={open} onClose={onClose} ><CardDark>\n    <CardContent>\n      <Grid container spacing={1}>\n        <Grid item flexGrow={1}>\n          <Typography variant=\"h6\">Default Artifact Set Effects {!!artifactCondCount && <SqBadge color=\"success\">{artifactCondCount} Selected</SqBadge>}</Typography>\n        </Grid>\n        <Grid item>\n          <Button onClick={resetArtConds} color=\"error\" startIcon={<Replay />}>Reset All</Button>\n        </Grid>\n        <Grid item>\n          <CloseButton onClick={onClose} />\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <CardLight sx={{ mb: 1 }}>\n        <CardContent>\n          <Typography>Some artifacts provide conditional stats. This windows allows you to select those stats, so they can take effect during build calculation, when artifact sets are not specified.</Typography>\n        </CardContent>\n      </CardLight>\n      <Grid container spacing={1}>\n        {artSetKeyList.map(setKey => {\n          const sheet: ArtifactSheet = artifactSheets[setKey]\n          // Don't display if no conditional in artifact\n          if (!Object.values(sheet.setEffects).some(entry => entry.document && entry.document.some(d => \"states\" in d))) return null\n          return <Grid item key={setKey} xs={6} lg={4}>\n            <CardLight sx={{ height: \"100%\" }}>\n              <Box className={`grad-${sheet.rarity[0]}star`} width=\"100%\" sx={{ display: \"flex\" }} >\n                <Box component=\"img\" src={sheet.defIconSrc} sx={{ height: 100, width: \"auto\" }} />\n                <Box sx={{ flexGrow: 1, px: 1, display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n                  <Typography variant=\"h6\">{sheet.name ?? \"\"}</Typography>\n                  <Box display=\"flex\" gap={1}>\n                    <Typography variant=\"subtitle1\">{sheet.rarity.map((ns, i) => <span key={ns}>{ns} <Stars stars={1} /> {i < (sheet.rarity.length - 1) ? \"/ \" : null}</span>)}</Typography>\n                    {/* If there is ever a 2-set conditional, we will need to change this */}\n                    <InfoTooltip title={<Typography><Translate ns={`artifact_${setKey}_gen`} key18={\"setEffects.4\"} /></Typography>} />\n                  </Box>\n                </Box>\n              </Box>\n              <DataContext.Provider value={fakeData(dataContext) /* TODO: Do we need to Memo this? */}>\n                <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n                  {Object.keys(sheet.setEffects)\n                    .filter(setNumKey => sheet.setEffects[setNumKey]?.document\n                      .some(doc => \"states\" in doc)\n                    )\n                    .map(setNumKey =>\n                      <SetEffectDisplay key={setNumKey} setKey={setKey} setNumKey={parseInt(setNumKey) as SetNum} hideHeader conditionalsOnly />\n                    )\n                  }\n                </CardContent>\n              </DataContext.Provider>\n            </CardLight>\n          </Grid>\n        })}\n      </Grid>\n    </CardContent>\n    <Divider />\n    <CardContent sx={{ py: 1 }}>\n      <CloseButton large onClick={onClose} />\n    </CardContent>\n  </CardDark></ModalWrapper>\n}\n\nfunction fakeData(currentContext: dataContextObj): dataContextObj {\n  return {\n    ...currentContext,\n    data: new UIData({ ...currentContext.data.data[0], artSet: objectKeyMap(allArtifactSets, _ => constant(4)) }, undefined)\n  }\n}\n","import { Masonry } from '@mui/lab';\nimport { Button, CardContent, CardHeader, Divider, MenuItem, MenuList, styled } from '@mui/material';\nimport React, { useCallback, useContext, useState } from 'react';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport ColorText from '../../../../../Components/ColoredText';\nimport ImgIcon from '../../../../../Components/Image/ImgIcon';\nimport ModalWrapper from '../../../../../Components/ModalWrapper';\nimport { DataContext } from '../../../../../DataContext';\nimport { getDisplayHeader, getDisplaySections } from '../../../../../Formula/DisplayUtil';\nimport { DisplaySub } from '../../../../../Formula/type';\nimport { NodeDisplay } from '../../../../../Formula/uiData';\nimport KeyMap from '../../../../../KeyMap';\nimport usePromise from '../../../../../ReactHooks/usePromise';\nimport { objPathValue } from '../../../../../Util/Util';\n\nconst WhiteButton = styled(Button)({\n  color: \"black\",\n  backgroundColor: \"white\",\n  \"&:hover\": {\n    backgroundColor: \"#e1e1e1\",\n  }\n})\nexport default function OptimizationTargetSelector({ optimizationTarget, setTarget, disabled = false }: {\n  optimizationTarget?: string[], setTarget: (target: string[]) => void, disabled\n}) {\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => !disabled && setOpen(true), [setOpen, disabled])\n  const onClose = useCallback(() => setOpen(false), [setOpen])\n\n  const setTargetHandler = useCallback(\n    (target: string[]) => {\n      onClose()\n      setTarget(target)\n    },\n    [onClose, setTarget],\n  )\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <>\n    <WhiteButton onClick={onOpen} disabled={disabled} >\n      <TargetDisplayText optimizationTarget={optimizationTarget} />\n    </WhiteButton>\n    <ModalWrapper open={open} onClose={onClose}>\n      <CardDark >\n        <CardContent>\n          <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={1}>\n            {sections.map(([key, Nodes]) =>\n              <SelectorSection key={key} displayNs={Nodes} sectionKey={key} setTarget={setTargetHandler} />)}\n          </Masonry >\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  </>\n}\nfunction SelectorSection({ displayNs, sectionKey, setTarget }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string, setTarget: (target: string[]) => void }) {\n  const { data } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  return <CardLight key={sectionKey as string}>\n    {header && <CardHeader avatar={header.icon && <ImgIcon size={2} sx={{ m: -1 }} src={header.icon} />} title={header.title} action={header.action} titleTypographyProps={{ variant: \"subtitle1\" }} />}\n    <Divider />\n    <MenuList>\n      {Object.entries(displayNs).map(([key, n]) =>\n        <TargetSelectorMenuItem key={key} node={n} onClick={() => setTarget([sectionKey, key])} />)}\n    </MenuList>\n  </CardLight>\n}\nfunction NoTarget() {\n  return <b>Select an Optimization Target</b>\n}\nfunction TargetDisplayText({ optimizationTarget }: { optimizationTarget?: string[] }) {\n  const { data } = useContext(DataContext)\n  const displayHeader = usePromise(optimizationTarget && getDisplayHeader(data, optimizationTarget[0]), [data, optimizationTarget])\n\n  if (!optimizationTarget || !displayHeader) return <NoTarget />\n  const node: NodeDisplay | undefined = objPathValue(data.getDisplay(), optimizationTarget) as any\n  if (!node) return <NoTarget />\n\n  return <b>{displayHeader.title} : {<ColorText color={node.info.variant}>{KeyMap.get(node.info.key)}</ColorText>}</b>\n}\nfunction TargetSelectorMenuItem({ node, onClick }: { node: NodeDisplay, onClick: () => void }) {\n  if (node.isEmpty) return null\n  return <MenuItem onClick={onClick} style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\n    <ColorText color={node.info.variant} >{KeyMap.get(node.info.key)}</ColorText>\n  </MenuItem>\n}\n","import { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\nimport { allOperations, constantFold } from \"../../../../Formula/optimization\";\nimport { ConstantNode, NumNode } from \"../../../../Formula/type\";\nimport { constant, customRead, max, min } from \"../../../../Formula/utils\";\nimport { allSlotKeys, ArtifactSetKey } from \"../../../../Types/consts\";\nimport { assertUnreachable, objectKeyMap, objectMap } from \"../../../../Util/Util\";\nimport type { ArtifactBuildData, ArtifactsBySlot, Build, DynStat, PlotData, RequestFilter } from \"./background\";\n\ntype DynMinMax = { [key in string]: MinMax }\ntype MinMax = { min: number, max: number }\n\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\nexport function pruneAll(nodes: NumNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, keepArtifacts: Set<ArtifactSetKey>, forced: Dict<MicropassOperation, boolean>): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\n  }\n  let count = 0\n  while (Object.values(should).some(x => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, keepArtifacts)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nfunction reaffine(nodes: NumNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  const affineNodes = new Set<NumNode>(), topLevelAffine = new Set<NumNode>()\n\n  function visit(node: NumNode, isAffine: boolean) {\n    if (isAffine) affineNodes.add(node)\n    else node.operands.forEach(_op => {\n      const op = _op as NumNode\n      affineNodes.has(op) && topLevelAffine.add(op)\n    })\n  }\n\n  const dynKeys = new Set<string>()\n\n  forEachNodes(nodes, _ => { }, f => {\n    const operation = f.operation\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || f.path[0] !== \"dyn\" || f.accu !== \"add\")\n          throw new Error(`Found unsupported ${operation} node at path ${f.path} when computing affine nodes`)\n        dynKeys.add(f.path[1])\n        visit(f, true)\n        break\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\n      case \"mul\": {\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\n        break\n      }\n      case \"const\":\n        if (typeof f.value === \"string\" || f.value === undefined)\n          throw new Error(`Found constant ${f.value} while compacting`)\n        visit(f as NumNode, true); break\n      case \"res\": case \"threshold\": case \"sum_frac\":\n      case \"max\": case \"min\": visit(f, false); break\n      case \"data\": case \"subscript\": case \"lookup\": case \"match\": case \"prio\": case \"small\":\n        throw new Error(`Found unsupported ${operation} node when computing affine nodes`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\n    Object.keys(arts.base).length === dynKeys.size)\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\n  const affineMap = new Map(affine.map(node => [node,\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\n      ? node\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\n  nodes = mapFormulas(nodes, f => affineMap.get(f as NumNode) ?? f, f => f)\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold([...affineMap.keys()], {\n      dyn: objectMap(stat, (value) => constant(value))\n    } as any, _ => true)\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\n  }\n  const result = {\n    nodes, arts: {\n      base: reaffineArt(arts.base),\n      values: objectKeyMap(allSlotKeys, slot =>\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\n    }\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets)\n        values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nexport function pruneOrder(arts: ArtifactsBySlot, numTop: number, keepArtifacts: Set<ArtifactSetKey>): ArtifactsBySlot {\n  let progress = false\n  const values = objectKeyMap(allSlotKeys, slot => {\n    const list = arts.values[slot]\n    const newList = list.filter(art => {\n      let count = 0\n      return list.every(other => {\n        const greaterEqual = Object.entries(other.values).every(([k, o]) => o >= art.values[k])\n        const greater = Object.entries(other.values).some(([k, o]) => o > art.values[k])\n        if (greaterEqual && (greater || other.id > art.id) &&\n          (!keepArtifacts.has(art.set!) || art.set === other.set))\n          count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(nodes: NumNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\n\n    let progress = false\n    const values = objectKeyMap(allSlotKeys, slot => {\n      const result = wrap.arts.values[slot].filter(art => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\n      })\n      if (result.length !== wrap.arts.values[slot].length)\n        progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: NumNode[], arts: ArtifactsBySlot): NumNode[] {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(nodes, f => {\n    const { operation } = f\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\n    switch (operation) {\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandRanges\n        if (value.min >= threshold.max) return f.operands[2]\n        else if (value.max < threshold.min) return constant(0)\n        if (pass.max === pass.min &&\n          fail.max === fail.min &&\n          pass.min === fail.min && isFinite(pass.min))\n          return constant(pass.max)\n        break\n      }\n      case \"min\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\n        })\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\n        break\n      }\n      case \"max\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every(op2 => op1.max >= op2.min)\n        })\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\n        break\n      }\n    }\n    return f\n  }, f => f)\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach(range => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}\n  if (arts.length) {\n    Object.keys(arts[0].values)\n      .filter(key => arts.every(art => art.values[key]))\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\n    arts.forEach(({ values }) => {\n      for (const [key, value] of Object.entries(values)) {\n        if (!result[key]) result[key] = { min: 0, max: value }\n        else {\n          if (result[key].max < value) result[key].max = value\n          if (result[key].min > value) result[key].min = value\n        }\n      }\n    })\n  }\n  return result\n}\nfunction computeNodeRange(nodes: NumNode[], reads: DynMinMax): Map<NumNode, MinMax> {\n  const range = new Map<NumNode, MinMax>()\n\n  forEachNodes(nodes, _ => { }, _f => {\n    const f = _f as NumNode\n    const { operation } = f\n    const operands = f.operands.map(op => range.get(op)!)\n    let current: MinMax\n    switch (operation) {\n      case \"read\":\n        if (f.path[0] !== \"dyn\")\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\n        break\n      case \"const\": current = computeMinMax([f.value]); break\n      case \"subscript\": current = computeMinMax(f.list); break\n      case \"add\": case \"min\": case \"max\":\n        current = {\n          min: allOperations[operation](operands.map(x => x.min)),\n          max: allOperations[operation](operands.map(x => x.max)),\n        }; break\n      case \"res\": current = {\n        min: allOperations[operation]([operands[0].max]),\n        max: allOperations[operation]([operands[0].min]),\n      }; break\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\n        accu.min * current.min, accu.min * current.max,\n        accu.max * current.min, accu.max * current.max,\n      ])); break\n      case \"threshold\":\n        if (operands[0].min >= operands[1].max) current = operands[2]\n        else if (operands[0].max < operands[1].min) current = computeMinMax([0])\n        else current = computeMinMax([0], [operands[2]])\n        break\n      case \"sum_frac\": {\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\n        if (sum.min <= 0 && sum.max >= 0)\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\n        else\n          // TODO: Check this\n          current = computeMinMax([\n            x.min / sum.min, x.min / sum.max,\n            x.max / sum.min, x.max / sum.max\n          ])\n        break\n      }\n      case \"data\": case \"lookup\": case \"match\":\n        throw new Error(`Unsupported ${operation} node`)\n      default: assertUnreachable(operation)\n    }\n    range.set(f, current)\n  })\n  return range\n}\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\n  return { min, max }\n}\n\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objectKeyMap(allSlotKeys, slot => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\n      }\n    })\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value)\n        result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\n}\n","import Artifact from \"../../../../Data/Artifacts/Artifact\";\nimport { input } from \"../../../../Formula\";\nimport { computeUIData } from \"../../../../Formula/api\";\nimport { formulaString } from \"../../../../Formula/debug\";\nimport { Data, NumNode } from \"../../../../Formula/type\";\nimport { constant, setReadNodeKeys } from \"../../../../Formula/utils\";\nimport { allMainStatKeys, allSubstatKeys, ICachedArtifact } from \"../../../../Types/artifact\";\nimport { allSlotKeys, ArtifactSetKey } from \"../../../../Types/consts\";\nimport { deepClone, objectKeyMap, objectMap } from \"../../../../Util/Util\";\nimport type { ArtifactBuildData, ArtifactsBySlot, DynStat, RequestFilter } from \"./background\";\nimport { countBuilds, filterArts } from \"./common\";\n\nconst dynamic = setReadNodeKeys(deepClone({ dyn: { ...input.art, ...input.artSet } }))\nexport const dynamicData = {\n  art: objectKeyMap([...allMainStatKeys, ...allSubstatKeys], key => dynamic.dyn[key]),\n  artSet: objectMap(input.artSet, (_, key) => dynamic.dyn[key]),\n}\n\nexport function compactArtifacts(arts: ICachedArtifact[], mainStatAssumptionLevel: number): ArtifactsBySlot {\n  const result: ArtifactsBySlot = {\n    base: {},\n    values: { flower: [], plume: [], goblet: [], circlet: [], sands: [] }\n  }\n  const keys = new Set<string>()\n\n  for (const art of arts) {\n    const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\n\n    const data: ArtifactBuildData = {\n      id: art.id, set: art.setKey,\n      values: {\n        [art.setKey]: 1,\n        [art.mainStatKey]: art.mainStatKey.endsWith('_') ? mainStatVal / 100 : mainStatVal,\n        ...Object.fromEntries(art.substats.map(substat =>\n          [substat.key, substat.key.endsWith('_') ? substat.accurateValue / 100 : substat.accurateValue]))\n      },\n    }\n    delete data.values[\"\"]\n    result.values[art.slotKey].push(data)\n    Object.keys(data.values).forEach(x => keys.add(x))\n  }\n  result.base = objectKeyMap([...keys], _ => 0)\n  for (const value of Object.values(result.values))\n    value.push({ id: \"\", values: {} })\n  return result\n}\n// TODO: Use this as the new set filter\ntype _SetFilter = { key: ArtifactSetKey | \"\", min?: number, max?: number }[]\n/**\n * Computes a (disjoint) list of all request filters that satisfy `filter`.\n * `filters` is expressed as a disjunctive normal form, e.g., a request filter\n * satisfies `filter` of\n *\n * ```\n * [\n *   [ condition1, condition2 ],\n *   [ condition3, condition4 ],\n * ]\n * ```\n *\n * if\n * - Both `condition1` AND `condition2` are met, or\n * - Both `condition3` and `condition4` are met.\n */\nexport function* artSetPerm(_filters: _SetFilter[]): Iterable<RequestFilter> {\n  type Filters = Dict<ArtifactSetKey, { min: number, max: number }>\n\n  const allFilters: Filters[] = _filters.map(fs => {\n    const result: Dict<ArtifactSetKey, { min: number, max: number }> = {}\n    fs.forEach(({ key, min, max }) => {\n      if (!key) return\n      if (!result[key]) result[key] = { min: 0, max: 5 }\n      const obj = result[key]!\n      obj.min = Math.max(obj.min, min ?? 0)\n      obj.max = Math.min(obj.max, max ?? 5)\n    })\n    return result\n  }).filter(fs => Object.values(fs).every(f => f.min <= f.max))\n\n  // Remove unnecessary or impossible filters\n  function cleanFilters(result: Filters[], remainingSlots: number): Filters[] {\n    return result.map(result => {\n      result = { ...result }\n      for (const [key, value] of Object.entries(result)) {\n        if (value.min === 0 && value.max >= remainingSlots)\n          // Unnecessary filter\n          delete result[key]\n      }\n      return result\n    }).filter(fs =>\n      // Keep only possible filters\n      Object.values(fs).reduce((a, b) => a + b.min, 0) <= remainingSlots\n    )\n  }\n\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\n  function* check(_filters: Filters[], remainingSlots: number) {\n    const filters = cleanFilters(_filters, remainingSlots)\n    if (!filters.length) return\n    if (filters.some(fs => !Object.keys(fs).length)) {\n      yield { ...result }\n      return\n    }\n\n    const slot = allSlotKeys[remainingSlots - 1]\n    const relevantSets = new Set(filters.flatMap(fs => Object.keys(fs)))\n    for (const set of relevantSets) {\n      result[slot] = { kind: \"required\", sets: new Set([set]) }\n      const newFilters = filters.map(fs => {\n        const obj = fs[set]\n        if (obj)\n          return { ...fs, [set]: { min: obj.min ? obj.min - 1 : 0, max: obj.max - 1 } }\n        return fs\n      })\n      yield* check(newFilters, remainingSlots - 1)\n    }\n    result[slot] = { kind: \"exclude\", sets: relevantSets }\n    yield* check(filters, remainingSlots - 1)\n    result[slot] = noFilter\n  }\n  yield* check(allFilters, 5)\n}\nexport function* splitFiltersBySet(_arts: ArtifactsBySlot, filters: Iterable<RequestFilter>, limit: number): Iterable<RequestFilter> {\n  if (limit < 10000) limit = 10000\n\n  for (const filter of filters) {\n    const filters = [filter]\n\n    while (filters.length) {\n      const filter = filters.pop()!\n      const arts = filterArts(_arts, filter)\n      const count = countBuilds(arts)\n      if (count <= limit) {\n        if (count) yield filter\n        continue\n      }\n\n      const candidates = allSlotKeys\n        // TODO: Cache this loop\n        .map(slot => ({ slot, sets: new Set(arts.values[slot].map(x => x.set)) }))\n        .filter(({ sets }) => sets.size > 1)\n      if (!candidates.length) {\n        yield* splitFilterByIds(arts, filter, limit)\n        continue\n      }\n      const { sets, slot } = candidates.reduce((a, b) => a.sets.size < b.sets.size ? a : b)\n      sets.forEach(set => filters.push({ ...filter, [slot]: { kind: \"required\", sets: new Set([set]) } }))\n    }\n  }\n}\nfunction* splitFilterByIds(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): Iterable<RequestFilter> {\n  const filters = [filter]\n\n  while (filters.length) {\n    const filter = filters.pop()!\n    const arts = filterArts(_arts, filter)\n    const count = countBuilds(arts)\n    if (count <= limit) {\n      if (count) yield filter\n      continue\n    }\n\n    const candidates = allSlotKeys\n      .map(slot => ({ slot, length: arts.values[slot].length }))\n      .filter(x => x.length > 1)\n    const { slot, length } = candidates.reduce((a, b) => a.length < b.length ? a : b)\n\n    const numChunks = Math.ceil(count / limit)\n    const boundedNumChunks = Math.min(numChunks, length)\n    const chunk = Array(boundedNumChunks).fill(0).map(_ => new Set<string>())\n    arts.values[slot].forEach(({ id }, i) => chunk[i % boundedNumChunks].add(id))\n    if (numChunks > length) {\n      chunk.forEach(ids => filters.push({ ...filter, [slot]: { kind: \"id\", ids } }))\n    } else {\n      for (const ids of chunk)\n        yield { ...filter, [slot]: { kind: \"id\", ids } }\n    }\n  }\n}\n\n// const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\n\nexport function debugCompute(nodes: NumNode[], base: DynStat, arts: ArtifactBuildData[]) {\n  const stats = { ...base }\n  for (const art of arts) {\n    for (const [key, value] of Object.entries(art.values)) {\n      stats[key] = (stats[key] ?? 0) + value\n    }\n  }\n  const data = { dyn: Object.fromEntries(Object.entries(stats).map(([key, value]) => [key, constant(value)])) } as Data\n  const uiData = computeUIData([data])\n  return {\n    base, arts, stats,\n    data, uiData,\n    nodes: nodes.map(formulaString),\n    results: nodes.map(node => uiData.get(node)),\n  }\n}\n"],"names":["SetEffectDisplay","setKey","setNumKey","hideHeader","conditionalsOnly","sheet","usePromise","ArtifactSheet","document","setEffectDocument","filter","section","display","flexDirection","sections","ConditionalSelector","conditional","disabled","Object","keys","states","length","SimpleConditionalSelector","ExclusiveConditionalSelector","MultipleConditionalSelector","useContext","DataContext","character","characterDispatch","data","setConditional","useCallback","v","conditionalValues","deepClone","layeredAssignment","path","deletePropPath","conditionalValue","get","value","entries","stateKey","badge","getStateBadge","name","condName","getCondName","Button","fullWidth","size","sx","borderRadius","color","onClick","undefined","startIcon","CheckBox","CheckBoxOutlineBlank","state","SqBadge","DropdownButton","title","MenuItem","selected","Divider","map","st","ButtonGroup","orientation","disableElevation","isSelected","isElement","disp","stateName","badgeColor","badgeText","props","children","ml","key","key18","ns","values","Translate","useBadge","ConditionalDisplay","fields","hideDesc","condVal","flatMap","CardDark","evalIfFunc","HeaderDisplay","header","CardContent","p","pb","DocumentDisplay","teamBuffOnly","sectionDisplays","s","i","canShow","teamBuff","SectionDisplay","Box","gap","FieldsSectionDisplay","TextSectionDisplay","hideDivider","text","icon","action","description","displayTitle","InfoTooltip","Typography","CardHeader","avatar","titleTypographyProps","variant","infusionVals","uncoloredEleIcons","InfusionAuraDropdown","characterSheet","infusionAura","isMelee","sqBadgeStyle","mx","px","fontSize","ReactionToggle","reactionMode","charEleKey","input","infusion","infusionNode","includes","exclusive","baseColor","onChange","_","alignItems","HitModeToggle","hitMode","charCurves","objectMap","_charCurves","commonBasic","objectKeyMap","stringPrio","inferredHitEle","lookup","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","base","additional","mergeData","hit","constant","ele","customShieldNode","shieldNode","prod","sum","one","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","infoMut","healNodeTalent","dataObjForCharacterSheet","region","gen","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","tally","reaction","reactions","physical_dmg_","stat","list","curves","push","ascensions","some","x","NaN","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","errHeader","talentMap","normal","charged","plunging","skill","burst","passive","passive1","passive2","passive3","fromEntries","range","getDisplayHeader","sectionKey","split","namespace","defIconSrc","WeaponSheet","asc","img","imgAwaken","cKey","cEle","CharacterSheet","talentKey","talent","getTalentOfKey","actionText","getDisplaySections","getDisplay","nodes","every","isEmpty","weapon","startsWith","artifact","rest","k","crystallizeMulti1","crystallizeElemas","frac","crystallizeHit","transMulti1","transMulti2","trans","transformativeReactions","multi","variants","swirl","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","geo","crystallize","absorbableEle","e","overloaded","electrocharged","superconduct","ArtifactSetConditional","useState","open","setOpen","onOpen","onClose","artifactCondCount","useMemo","allArtifactSets","ArtConditionalModal","dataContext","artifactSheets","resetArtConds","artSetKeyList","reverse","container","spacing","item","flexGrow","mb","currentContext","setEffects","entry","d","xs","lg","height","className","rarity","width","component","src","justifyContent","stars","UIData","artSet","doc","parseInt","py","large","WhiteButton","styled","backgroundColor","OptimizationTargetSelector","optimizationTarget","setTarget","setTargetHandler","target","TargetDisplayText","columns","sm","md","Nodes","SelectorSection","displayNs","m","n","TargetSelectorMenuItem","node","NoTarget","displayHeader","objPathValue","KeyMap","style","overflow","textOverflow","pruneAll","minimum","arts","numTop","keepArtifacts","forced","should","deps","pruneNodeRange","reaffine","pruneOrder","pruneArtRange","count","newArts","newNodes","forceRename","affineNodes","Set","topLevelAffine","visit","isAffine","add","operands","forEach","_op","op","has","dynKeys","forEachNodes","f","operation","type","accu","nonConst","assertUnreachable","current","nextDynKey","affine","affineMap","Map","customRead","reaffineArt","constantFold","dyn","mapFormulas","allSlotKeys","slot","id","set","offsets","baseValue","progress","newList","art","other","greaterEqual","greater","baseRange","min","max","wrap","artRanges","computeArtRange","otherArtRanges","addArtRange","a","read","newRange","computeNodeRange","Infinity","nodeRange","operandRanges","threshold","pass","fail","isFinite","newOperands","op1","op2","j","ranges","reads","_f","computeMinMax","allOperations","reduce","c","minMaxes","Math","filterArts","filters","kind","ids","sets","mergeBuilds","builds","maxNum","sort","b","mergePlot","plots","scale","round","plot","build","countBuilds","_count","artSetPerm","splitFiltersBySet","splitFilterByIds","dynamic","setReadNodeKeys","dynamicData","allSubstatKeys","compactArtifacts","mainStatAssumptionLevel","flower","plume","goblet","circlet","sands","mainStatVal","Artifact","mainStatKey","level","substats","substat","accurateValue","slotKey","_filters","cleanFilters","check","remainingSlots","fs","relevantSets","newFilters","obj","noFilter","allFilters","_arts","limit","pop","candidates","numChunks","ceil","boundedNumChunks","chunk","Array","fill"],"sourceRoot":""}