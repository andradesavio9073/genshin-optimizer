{"version":3,"file":"static/js/842.e042cf63.chunk.js","mappings":"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","sources":["Components/Artifact/SubstatToggle.tsx","Components/CustomNumberInput.tsx","Components/InfoTooltip.tsx","Components/PercentBadge.tsx","Components/StatEditorList.tsx","PageArtifact/ArtifactCard.tsx","PageArtifact/ArtifactSort.ts","PageArtifact/RollProbability.ts","ReactHooks/useArtifact.tsx"],"sourcesContent":["import { Box, Grid, ToggleButton } from \"@mui/material\"\nimport KeyMap from \"../../KeyMap\"\nimport { allSubstatKeys } from \"../../Types/artifact\"\nimport SolidToggleButtonGroup from \"../SolidToggleButtonGroup\"\nimport StatIcon from \"../StatIcon\"\n\nexport default function SubstatToggle({ selectedKeys, onChange }) {\n  const keys1 = allSubstatKeys.slice(0, 6)\n  const keys2 = allSubstatKeys.slice(6)\n  const selKeys1 = selectedKeys.filter(k => keys1.includes(k))\n  const selKeys2 = selectedKeys.filter(k => keys2.includes(k))\n  return <Grid container spacing={1}>\n    <Grid item xs={12} md={6}>\n      <SolidToggleButtonGroup fullWidth value={selKeys1} onChange={(e, arr) => onChange([...selKeys2, ...arr])} sx={{ height: \"100%\" }}>\n        {keys1.map(key => <ToggleButton size=\"small\" key={key} value={key}>\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\n            {StatIcon[key]}\n            {KeyMap.getArtStr(key)}\n          </Box>\n        </ToggleButton>)}\n      </SolidToggleButtonGroup>\n    </Grid>\n    <Grid item xs={12} md={6}>\n      <SolidToggleButtonGroup fullWidth value={selKeys2} onChange={(e, arr) => onChange([...selKeys1, ...arr])} sx={{ height: \"100%\" }}>\n        {keys2.map(key => <ToggleButton size=\"small\" key={key} value={key}>\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\n            {StatIcon[key]}\n            {KeyMap.getArtStr(key)}\n          </Box>\n        </ToggleButton>)}\n      </SolidToggleButtonGroup>\n    </Grid>\n  </Grid>\n}\n","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\ntype props = Omit<InputProps, \"onChange\"> & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\n\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  transition: \"all 0.5s ease\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-focused\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n}))\n\nconst Wrapper = styled(Button)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  padding: 0,\n  overflow: \"hidden\",\n  \"div\": {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}))\n\n// wrap the Input with this when using the input in a buttongroup\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\n}\n\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\n  const [number, setNumber] = useState(value)\n  const [focused, setFocus] = useState(false)\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\n  const onBlur = useCallback(\n    () => {\n      onChange(number)\n      setFocus(false)\n    },\n    [onChange, number, setFocus],\n  )\n  const onFocus = useCallback(\n    () => {\n      setFocus(true)\n    },\n    [setFocus],\n  )\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\n  return <StyledInputBase\n    value={(focused && !number) ? \"\" : number}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    inputProps={{ step: float ? 0.1 : 1 }}\n    onChange={onInputChange}\n    onBlur={onBlur}\n    onFocus={onFocus}\n    disabled={disabled}\n    onKeyDown={onKeyDOwn}\n    {...props}\n  />\n}\n","\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, TooltipProps } from \"@mui/material\";\nimport BootstrapTooltip from \"./BootstrapTooltip\";\n\ninterface ITooltipProps extends Omit<TooltipProps, \"children\"> {\n  className?: string,\n}\nconst InfoTooltip = ({ className, ...props }: ITooltipProps) =>\n  <BootstrapTooltip placement=\"top\" {...props} className={className}>\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faInfoCircle} /></Box>\n  </BootstrapTooltip>\n\nexport default InfoTooltip\n","import SqBadge from './SqBadge';\nimport { clamp } from '../Util/Util';\nimport { ButtonProps } from '@mui/material';\nimport { RollColorKey } from '../Types/consts';\n\nexport default function PercentBadge({ value, max = 1, valid }: {\n  valid?: boolean,\n  value: number | string,\n  max?: number\n}) {\n  let [badgeColor, text]: [color: ButtonProps['color'], text: string] = typeof value === 'number' ?\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}` as RollColorKey, value.toFixed() + \"%\"] : [\"secondary\", value]\n  if (value > max) valid = false\n  if (!valid) badgeColor = \"error\"\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\n}\n","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, ButtonGroup, MenuItem } from '@mui/material';\nimport React, { useCallback, useMemo } from 'react';\nimport KeyMap, { StatColoredWithUnit, StatKey } from '../KeyMap';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\nimport DropdownButton from './DropdownMenu/DropdownButton';\n\n\nexport default function StatEditorList({ statKeys, statFilters, setStatFilters, disabled = false, wrapperFunc = (ele) => ele }: {\n  statKeys: StatKey[], statFilters: Dict<StatKey, number>, setStatFilters: (statFilters: Dict<StatKey, number>) => void, disabled?: boolean, wrapperFunc?: (ele: JSX.Element) => JSX.Element\n}) {\n  const remainingKeys = useMemo(() => statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key)), [statKeys, statFilters])\n  const setKey = useCallback(\n    (newk, oldk) => {\n      if (oldk)\n        setStatFilters(Object.fromEntries(Object.entries(statFilters).map(([k, v]) => [k === oldk ? newk : k, v])))\n      else {\n        const statFilters_ = { ...statFilters }\n        statFilters_[newk] = 0\n        setStatFilters({ ...statFilters_ })\n      }\n    }, [statFilters, setStatFilters])\n\n  const setFilter = useCallback((sKey, min) => {\n    const statFilters_ = { ...statFilters }\n    statFilters_[sKey] = min\n    setStatFilters({ ...statFilters_ })\n  }, [statFilters, setStatFilters])\n\n  const delKey = useCallback(statKey => {\n    const statFilters_ = { ...statFilters }\n    delete statFilters_[statKey]\n    setStatFilters({ ...statFilters_ })\n  }, [statFilters, setStatFilters])\n\n  return <>\n    {Object.entries(statFilters).map(([statKey, min]) =>\n      wrapperFunc(<StatFilterItem key={statKey} statKey={statKey} statKeys={remainingKeys} disabled={disabled} value={min} setValue={setFilter} setKey={setKey} delKey={delKey} />)\n    )}\n    {wrapperFunc(<StatFilterItem statKeys={remainingKeys} setValue={setFilter} setKey={setKey} delKey={delKey} disabled={disabled} />)}\n  </>\n}\n\nfunction StatFilterItem({ statKey, statKeys = [], value = 0, delKey, setKey, setValue, disabled = false }: {\n  statKey?: StatKey,\n  statKeys: StatKey[],\n  value?: number,\n  delKey: (delKey: StatKey) => void,\n  setKey: (newKey: StatKey, oldKey?: StatKey) => void,\n  setValue: (statKey: string, value: number) => void,\n  disabled?: boolean\n}) {\n  const isFloat = KeyMap.unit(statKey) === \"%\"\n  const onChange = useCallback(s => statKey && setValue(statKey, s), [setValue, statKey])\n  return <ButtonGroup sx={{ width: \"100%\" }}>\n    <DropdownButton\n      title={statKey ? <span>{KeyMap.get(statKey)}{KeyMap.unit(statKey)}</span> : \"New Stat\"}\n      disabled={disabled}\n      color={statKey ? (KeyMap.getVariant(statKey) ?? \"success\") : \"secondary\"}\n    >\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => setKey(sKey, statKey)}><StatColoredWithUnit statKey={sKey} /></MenuItem>)}\n    </DropdownButton>\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\n      <CustomNumberInput\n        disabled={!statKey || disabled}\n        float={isFloat}\n        value={value}\n        placeholder=\"Stat Value\"\n        onChange={onChange}\n        sx={{ px: 2, }}\n        inputProps={{ sx: { textAlign: \"right\" } }}\n        endAdornment={KeyMap.unit(statKey)}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    {!!statKey && <Button color=\"error\" onClick={() => delKey(statKey)} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\n  </ButtonGroup>\n}\n","import { faBan, faChartLine, faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { BusinessCenter, Lock, LockOpen } from '@mui/icons-material';\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, Chip, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\nimport { lazy, Suspense, useCallback, useContext, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\nimport CardLight from '../Components/Card/CardLight';\nimport CharacterAutocomplete from '../Components/Character/CharacterAutocomplete';\nimport LocationName from '../Components/Character/LocationName';\nimport ColorText from '../Components/ColoredText';\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\nimport InfoTooltip from '../Components/InfoTooltip';\nimport PercentBadge from '../Components/PercentBadge';\nimport SqBadge from '../Components/SqBadge';\nimport { StarsDisplay } from '../Components/StarDisplay';\nimport StatIcon from '../Components/StatIcon';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../Database/Database';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport useArtifact from '../ReactHooks/useArtifact';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstatKeys, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\nimport { CharacterKey, Rarity } from '../Types/consts';\nimport { clamp, clamp01 } from '../Util/Util';\n\nconst ArtifactEditor = lazy(() => import('./ArtifactEditor'))\n\ntype Data = {\n  artifactId?: string,\n  artifactObj?: ICachedArtifact,\n  onClick?: (id: string) => void,\n  onDelete?: (id: string) => void,\n  mainStatAssumptionLevel?: number,\n  effFilter?: Set<SubstatKey>,\n  editor?: boolean,\n  canExclude?: boolean\n  canEquip?: boolean,\n  extraButtons?: JSX.Element\n}\nconst allSubstatFilter = new Set(allSubstatKeys)\n\nexport default function ArtifactCard({ artifactId, artifactObj, onClick, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, editor = false, canExclude = false, canEquip = false, extraButtons }: Data): JSX.Element | null {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  const { database } = useContext(DatabaseContext)\n  const databaseArtifact = useArtifact(artifactId)\n  const sheet = usePromise(() => ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.arts.set(artifactId!, { location: charKey })\n  const editable = !artifactObj\n  const [showEditor, setshowEditor] = useState(false)\n  const onHideEditor = useCallback(() => setshowEditor(false), [setshowEditor])\n  const onShowEditor = useCallback(() => editable && setshowEditor(true), [editable, setshowEditor])\n\n  const wrapperFunc = useCallback(children => <CardActionArea onClick={() => artifactId && onClick?.(artifactId)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</CardActionArea>, [onClick, artifactId],)\n  const falseWrapperFunc = useCallback(children => <Box sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</Box>, [])\n\n  const art = artifactObj ?? databaseArtifact\n\n  const { currentEfficiency, maxEfficiency, currentEfficiency_, maxEfficiency_ } = useMemo(() => {\n    if (!art) return { currentEfficiency: 0, maxEfficiency: 0, currentEfficiency_: 0, maxEfficiency_: 0 }\n    const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\n    const { currentEfficiency: currentEfficiency_, maxEfficiency: maxEfficiency_ } = Artifact.getArtifactEfficiency(art, new Set(allSubstatKeys))\n    return { currentEfficiency, maxEfficiency, currentEfficiency_, maxEfficiency_ }\n  }, [art, effFilter])\n\n\n  if (!art) return null\n\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const mainStatUnit = KeyMap.unit(mainStatKey)\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\n\n  const artifactValid = maxEfficiency !== 0\n  const slotName = sheet?.getSlotName(slotKey)\n  const slotDesc = sheet?.getSlotDesc(slotKey)\n  const slotDescTooltip = slotDesc && <InfoTooltip title={<Box>\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><Typography variant='h6'>{slotName}</Typography></Suspense>\n    <Typography>{slotDesc}</Typography>\n  </Box>} />\n  const setEffects = sheet?.setEffects\n  const setDescTooltip = sheet && setEffects && <InfoTooltip title={\n    <span>\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`artifact:setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\n      </span>)}\n    </span>\n  } />\n  const mainIcon = StatIcon[mainStatKey]// allElementsWithPhy.some(e => mainStatKey.startsWith(e)) ? uncoloredEleIcons[mainStatKey] : StatIcon[mainStatKey]\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\n    {editor && <Suspense fallback={false}>\n      <ArtifactEditor\n        artifactIdToEdit={showEditor ? artifactId : \"\"}\n        cancelEdit={onHideEditor}\n      />\n    </Suspense>}\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={wrapperFunc} falseWrapper={falseWrapperFunc}>\n        <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", width: \"100%\" }}>\n          {!onClick && <IconButton color=\"primary\" disabled={!editable} onClick={() => database.arts.set(id, { lock: !lock })} sx={{ position: \"absolute\", right: 0, bottom: 0, zIndex: 2 }}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>}\n          <Box sx={{ pt: 2, px: 2, position: \"relative\", zIndex: 1 }}>\n            {/* header */}\n            <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1, mb: 1 }}>\n              <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\n              {!slotName && <Skeleton variant=\"text\" width={100} />}\n              {slotName && <Typography noWrap sx={{ textAlign: \"center\", backgroundColor: \"rgba(100,100,100,0.35)\", borderRadius: \"1em\", px: 1 }}><strong>{slotName}</strong></Typography>}\n              {!slotDescTooltip && <Skeleton width={10} />}\n              {slotDescTooltip}\n            </Box>\n            <Typography color=\"text.secondary\" variant=\"body2\">\n              <SlotNameWithIcon slotKey={slotKey} />\n            </Typography>\n            <Typography variant=\"h6\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n              {mainIcon}\n              <span>{KeyMap.get(mainStatKey)}</span>\n            </Typography>\n            <Typography variant=\"h5\">\n              <strong>\n                <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\n              </strong>\n            </Typography>\n            <StarsDisplay stars={rarity} colored />\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\n          </Box>\n          <Box sx={{ height: \"100%\", position: \"absolute\", right: 0, top: 0 }}>\n            <Box\n              component=\"img\"\n              src={sheet?.slotIcons[slotKey] ?? \"\"}\n              width=\"auto\"\n              height=\"100%\"\n              sx={{ float: \"right\" }}\n            />\n          </Box>\n        </Box>\n        <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0, width: \"100%\" }}>\n          {substats.map((stat: ICachedSubstat) => !!stat.value && <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\n          <Typography variant=\"caption\" sx={{ display: \"flex\", gap: 1, my: 1 }}>\n            <ColorText color=\"secondary\" sx={{ flexGrow: 1 }}>{t`artifact:editor.curSubEff`}</ColorText>\n            <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\n            {currentEfficiency !== currentEfficiency_ && <span>/</span>}\n            {currentEfficiency !== currentEfficiency_ && <PercentBadge value={currentEfficiency_} max={900} valid={artifactValid} />}\n          </Typography>\n          {currentEfficiency !== maxEfficiency && <Typography variant=\"caption\" sx={{ display: \"flex\", gap: 1 }}>\n            <ColorText color=\"secondary\" sx={{ flexGrow: 1 }}>{t`artifact:editor.maxSubEff`}</ColorText>\n            <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\n            {maxEfficiency !== maxEfficiency_ && <span>/</span>}\n            {maxEfficiency !== maxEfficiency_ && <PercentBadge value={maxEfficiency_} max={900} valid={artifactValid} />}\n          </Typography>}\n          <Box flexGrow={1} />\n          {art.probability !== undefined && art.probability >= 0 && <strong>Probability: {(art.probability * 100).toFixed(2)}%</strong>}\n          <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\n        </CardContent>\n      </ConditionalWrapper>\n      <Box sx={{ p: 1, display: \"flex\", gap: 1, justifyContent: \"space-between\", alignItems: \"center\" }}>\n        {editable && canEquip\n          ? <CharacterAutocomplete sx={{ flexGrow: 1 }} size=\"small\" showDefault\n            defaultIcon={<BusinessCenter />} defaultText={t(\"ui:inventory\")}\n            value={location} onChange={equipOnChar} />\n          : <LocationName location={location} />}\n        {editable && <ButtonGroup sx={{ height: \"100%\" }}>\n          {editor && <Tooltip title={<Typography>{t`artifact:edit`}</Typography>} placement=\"top\" arrow>\n            <Button color=\"info\" size=\"small\" onClick={onShowEditor} >\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n            </Button>\n          </Tooltip>}\n          {canExclude && <Tooltip title={<Box>\n            <Typography>{t`artifact:excludeArtifactTip`}</Typography>\n            <Typography><ColorText color={exclude ? \"error\" : \"success\"}>{t(`artifact:${exclude ? \"excluded\" : \"included\"}`)}</ColorText></Typography>\n          </Box>} placement=\"top\" arrow>\n            <Button onClick={() => database.arts.set(id, { exclude: !exclude })} color={exclude ? \"error\" : \"success\"} size=\"small\" >\n              <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\n            </Button>\n          </Tooltip>}\n          {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\n            <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n          </Button>}\n          {extraButtons}\n        </ButtonGroup>}\n      </Box>\n    </CardLight >\n  </Suspense>\n}\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\n  const numRolls = stat.rolls?.length ?? 0\n  const maxRoll = stat.key ? Artifact.maxSubstatValues(stat.key) : 0\n  const rollData = useMemo(() => stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : [], [stat.key, rarity])\n  const rollOffset = 7 - rollData.length\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const efficiency = stat.efficiency ?? 0\n  const inFilter = stat.key && effFilter.has(stat.key)\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\n  const statName = KeyMap.getStr(stat.key)\n  const unit = KeyMap.unit(stat.key)\n  const progresses = useMemo(() => <Box display=\"flex\" gap={0.25} height=\"1.3em\" sx={{ opacity: inFilter ? 1 : 0.3 }}>\n    {[...stat.rolls].sort().map((v, i) => <SmolProgress key={`${i}${v}`} value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\n  </Box>, [inFilter, stat.rolls, maxRoll, rollData, rollOffset])\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</Typography>\n    {progresses}\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{efficiency.toFixed()}%</Typography>\n  </Box>)\n}\nexport function SmolProgress({ color = \"red\", value = 50 }) {\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\n  </Box>\n}\n","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\nimport Artifact from \"../Data/Artifacts/Artifact\";\nimport { probability } from \"./RollProbability\";\nimport { SubstatKey } from \"../Types/artifact\";\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\nexport const artifactSortKeysTC = [\"probability\"] as const\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\nexport type FilterOption = {\n  artSetKeys: ArtifactSetKey[],\n  rarity: ArtifactRarity[],\n  levelLow: number,\n  levelHigh: number,\n  slotKeys: SlotKey[],\n  mainStatKeys: MainStatKey[],\n  substats: SubstatKey[]\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\n  exclusion: Array<\"excluded\" | \"included\">,\n  locked: Array<\"locked\" | \"unlocked\">,\n}\n\ntype ArtifactSortFilter = {\n  filterOption: FilterOption\n  ascending: boolean\n  sortType: ArtifactSortKey\n}\nexport function initialFilterOption(): FilterOption {\n  return {\n    artSetKeys: [],\n    rarity: [...allArtifactRarities],\n    levelLow: 0,\n    levelHigh: 20,\n    slotKeys: [...allSlotKeys],\n    mainStatKeys: [],\n    substats: [],\n    location: \"\",\n    exclusion: [\"excluded\", \"included\"],\n    locked: [\"locked\", \"unlocked\"],\n  }\n}\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\n  filterOption: initialFilterOption(),\n  ascending: false,\n  sortType: artifactSortKeys[0],\n})\n\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\n  return {\n    rarity: {\n      getValue: art => art.rarity ?? 0,\n      tieBreaker: \"level\"\n    },\n    level: {\n      getValue: art => art.level ?? 0,\n      tieBreaker: \"artsetkey\"\n    },\n    artsetkey: {\n      getValue: art => art.setKey ?? \"\",\n      tieBreaker: \"level\"\n    },\n    efficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\n    },\n    mefficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\n    },\n    probability: {\n      getValue: art => {\n        if (!Object.keys(probabilityFilter).length) return 0\n        const prob = (art as any).probability\n        if (prob === undefined) return probability(art, probabilityFilter);\n        return prob\n      }\n    }\n  }\n}\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\n  return {\n    exclusion: (art, filter) => {\n      if (!filter.includes(\"included\") && !art.exclude) return false\n      if (!filter.includes(\"excluded\") && art.exclude) return false\n      return true\n    },\n    locked: (art, filter) => {\n      if (!filter.includes(\"locked\") && art.lock) return false\n      if (!filter.includes(\"unlocked\") && !art.lock) return false\n      return true\n    },\n    location: (art, filter) => {\n      if (!filter) return true\n      if (filter === \"Inventory\" && !art.location) return true\n      if (filter === \"Equipped\" && art.location) return true\n      if (filter === art.location) return true\n      return false\n    },\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\n    slotKeys: (art, filter) => filter.includes(art.slotKey),\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\n    levelLow: (art, filter) => filter <= art.level,\n    levelHigh: (art, filter) => filter >= art.level,\n    rarity: (art, filter) => filter.includes(art.rarity),\n    substats: (art, filter) => {\n      for (const filterKey of filter)\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\n      return true\n    }\n  }\n}\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\nimport { crawlObject, layeredAssignment } from '../Util/Util'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\n\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\n// probability distribution and require separate consideration.\n\n// Notations for the remainder of this file.\n//\n// i, j, k := substat\n// E(i) := Extra substat that rolls into substat i\n// T(i) := Targetted (extra) substat for substat i\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\n// Nu(i) := # of upgrade rolls into substat i\n//\n// E := { E1, E2, ... }\n// T := { T1, T2, ... }\n// N(i) := Nf(i) + Nu(i)\n// Nf := Nf(1) + Nf(2) + ...\n// Nu := Nu(1) + Nu(2) + ...\n//\n// For example, if the artifact has 14 atk, and the target atk is 30,\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\n//\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\n\nconst allWeights = [3, 4, 6] as const\ntype Weight = typeof allWeights[number]\n\n/**\n * Weight used when rolling a filler roll. Each roll will choose from available\n * substats (excluding main stat and existing substats) with these weights.\n */\nconst fWeight: StrictDict<SubstatKey, Weight> = {\n  hp: 6, atk: 6, def: 6,\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\n  critRate_: 3, critDMG_: 3\n}\n\n/**\n * Probability of observing a filler sequence with particular weights\n *\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\n */\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\n  if (prefix.length === 5) {\n    layeredAssignment(pFillerSeq, prefix as any, current)\n    return\n  }\n\n  for (const i of allWeights)\n    if (prob[i] > 0)\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\n}\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\n\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\n\n/**\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\n *\n * 0 <= n <= 5; 0 <= r <= n\n */\nconst cnr = Array(6).fill(0).map((_, n) => {\n  const result = [1]\n  let r = 0, value = 1\n  while (++r <= n) {\n    value *= n - r + 1\n    value /= r\n    result.push(value)\n  }\n\n  return result\n})\n\n/**\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\n *\n * 0 <= n <= 5; 0 <= i < 3*n + 1\n */\nconst pNExtra = [[1]]\nwhile (pNExtra.length < 6) {\n  const last = pNExtra[pNExtra.length - 1]\n  const next = Array(last.length + 3).fill(0)\n  last.forEach((value, i) => {\n    for (const j of [0, 1, 2, 3]) {\n      next[i + j] += value\n    }\n  })\n\n  pNExtra.push(next.map(x => x / 4))\n}\nfor (const array of pNExtra) {\n  let accu = array.reduce((a, b) => a + b)\n  array.forEach((x, i, array) => {\n    array[i] = accu\n    accu -= x\n  })\n}\n\n/** Probability that `artifact` will have at least `target` stats at max level */\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\n\n  const { rarity, level, substats } = artifact\n\n  // `target = target - mainstat - substat` to find the extra substats we need\n  // Also count filler rolls (4 - # of substats) while we're at it\n  const target = { ..._target }, required = new Set(Object.keys(target))\n  let numFillerSlots = 0\n  {\n    const key = artifact.mainStatKey\n    if (key in target) {\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\n\n      delete target[key]\n      required.delete(key as SubstatKey)\n    }\n  }\n  for (const { key, value } of substats) {\n    if (key) {\n      if (required.has(key)) {\n        required.delete(key)\n        if (target[key]! > value)\n          target[key]! -= value\n        else delete target[key] // Requirement already met\n      }\n    } else numFillerSlots += 1\n  }\n  numFillerSlots += 4 - substats.length\n\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\n\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\n\n  // normalize `target`\n  for (const [key, value] of Object.entries(target))\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\n\n  let minTotalUpgrades = 0\n  const targetEntries = Object.entries(target).map(([key, target]) => {\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\n    minTotalUpgrades += minUpgrade\n    return { target, filler, minUpgrade }\n  }).reverse()\n\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\n\n  /**\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\n   *\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\n   *\n   * Then\n   *\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\n   *\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\n   *\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\n   *  g(0, N) = 1\n   *  g(0, n) = 0 for n != N\n   *\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\n   */\n\n  // At this point,\n  //  `target` = ceil(T / alpha)\n  //  `numUpgradeRolls` = Nu\n\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\n\n  // Keep applying `target` from first to last.\n  // At each step i in the loop, `result[n]` = g(i, n)\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\n    const next: typeof result = {}\n\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\n      // rolls = m; extra = T(i) / alpha - 7n\n\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\n      const extra = target - 7 * (rolls + filler)\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\n      //        = f(m + Nf(i), T(i))\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\n\n      for (const [_remaining, probability] of Object.entries(result)) {\n        const remaining = parseInt(_remaining)\n        if (remaining < rolls) continue\n\n        // n := remaining - m\n        // remaining = n + m\n        // probability = g(i, n + m)\n\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\n        //          = h(n + m, m, |K| - i)\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\n        const index = remaining - rolls // n\n\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\n      }\n    }\n    result = next\n  })\n\n  // At this point, `result[i]` = g(|K|, i)\n\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\n}\n\n/**\n * Pr[ N(k) = n | N = m, |K| = M ]\n *\n * 0 <= n <= N <= 5; 0 <= M <= 4\n */\nfunction pRollInto(m: number, n: number, M: number) {\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\n}\n\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\n\n  const mainStatRatio = fWeight[mainStat] ?? 0\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\n\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\n  for (const { key } of substats) {\n    if (key) {\n      const ratio = fWeight[key]\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\n      numUnusedSubstats[ratio] -= 1\n    }\n  }\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\n\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\n  for (const key of required) requiredCount[fWeight[key]] += 1\n\n  let total = 0\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\n    total += prob\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\n    for (const key of path) currentCount[key] += 1\n\n    let sum = prob\n    for (const i of allWeights) {\n      const current = currentCount[i], required = requiredCount[i]\n      if (current < required) return\n      sum *= cnr[current][required]\n    }\n\n    pFillerRolls += sum\n  })\n\n  for (const i of allWeights)\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\n  return pFillerRolls / total\n}\n\nexport { probability }\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useArtifact(artifactID: string | undefined = \"\") {\n  const { database } = useContext(DatabaseContext)\n  const [artifact, setArtifact] = useState(database.arts.get(artifactID))\n  useEffect(() => setArtifact(database.arts.get(artifactID)), [database, artifactID])\n  useEffect(() =>\n    artifactID ? database.arts.follow(artifactID, setArtifact) : undefined,\n    [artifactID, setArtifact, database])\n  return artifact\n}\n"],"names":["SubstatToggle","selectedKeys","onChange","keys1","allSubstatKeys","keys2","selKeys1","filter","k","includes","selKeys2","container","spacing","item","xs","md","fullWidth","value","e","arr","sx","height","map","key","size","display","gap","alignItems","StatIcon","KeyMap","StyledInputBase","styled","InputBase","theme","backgroundColor","palette","primary","main","transition","dark","Wrapper","Button","padding","overflow","width","CustomNumberInputButtonGroupWrapper","children","props","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","disabled","float","useState","number","setNumber","focused","setFocus","parseFunc","useMemo","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","target","onKeyDOwn","type","inputProps","step","onKeyDown","className","placement","component","cursor","icon","faInfoCircle","PercentBadge","max","valid","clamp","Math","floor","toFixed","badgeColor","text","color","StatEditorList","statKeys","statFilters","setStatFilters","wrapperFunc","ele","remainingKeys","Object","keys","some","setKey","newk","oldk","fromEntries","entries","v","statFilters_","setFilter","sKey","min","delKey","statKey","StatFilterItem","setValue","isFloat","s","title","onClick","flexBasis","flexGrow","placeholder","px","textAlign","endAdornment","faTrashAlt","ArtifactEditor","lazy","allSubstatFilter","Set","ArtifactCard","artifactId","artifactObj","onDelete","mainStatAssumptionLevel","effFilter","editor","canExclude","canEquip","extraButtons","t","useTranslation","database","useContext","DatabaseContext","databaseArtifact","useArtifact","sheet","usePromise","ArtifactSheet","editable","showEditor","setshowEditor","onHideEditor","onShowEditor","flexDirection","falseWrapperFunc","art","currentEfficiency","maxEfficiency","currentEfficiency_","maxEfficiency_","Artifact","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","location","mainStatLevel","mainStatUnit","levelVariant","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","Suspense","fallback","variant","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","mainIcon","minHeight","artifactIdToEdit","cancelEdit","condition","wrapper","falseWrapper","position","arts","set","right","bottom","zIndex","pt","mb","label","noWrap","borderRadius","undefined","cacheValueString","stars","colored","top","src","slotIcons","pb","stat","SubstatDisplay","my","probability","name","p","justifyContent","showDefault","defaultIcon","defaultText","charKey","arrow","faEdit","faBan","faChartLine","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","efficiency","inFilter","has","effOpacity","clamp01","statName","unit","progresses","opacity","sort","i","SmolProgress","indexOf","alignContent","minWidth","bgcolor","artifactSortKeys","artifactSortKeysTC","initialFilterOption","artSetKeys","allArtifactRarities","levelLow","levelHigh","slotKeys","allSlotKeys","mainStatKeys","exclusion","locked","initialArtifactSortFilter","filterOption","ascending","sortType","artifactSortConfigs","effFilterSet","probabilityFilter","getValue","tieBreaker","artsetkey","mefficiency","prob","artifactFilterConfigs","filterKey","substat","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","sumProb","current","layeredAssignment","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","artifact","_target","NaN","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","values","artifactID","get","setArtifact","follow"],"sourceRoot":""}