{"version":3,"file":"static/js/886.45679eee.chunk.js","mappings":"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","sources":["Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import type { WeaponData } from \"pipeline\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { WeaponKey } from \"../../Types/consts\";\nimport _weaponCurves from \"./expCurve_gen.json\";\nimport { input } from \"../../Formula\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\n\n// TODO: Remove this conversion after changing the file format\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\n\nexport function dataObjForWeaponSheet(\n  key: WeaponKey,\n  gen: WeaponData,\n  additional: Data = {},\n  displayWeapon: DisplaySub = {},\n): Data {\n  const result: Data = {\n    base: {},\n    premod: {},\n    total: {},\n    weapon: {\n      key: constant(key), type: constant(gen.weaponType),\n    },\n    display: {\n      [`weapon:${key}`]: displayWeapon\n    },\n  }\n\n  const { mainStat, subStat } = gen\n  const merging = [result]\n\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\n\n  if (subStat) {\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\n    merging.push({\n      premod: { [subStat.type]: input.weapon.sub },\n      weapon: { sub: substatNode },\n    })\n  }\n  return mergeData([...merging, inferInfoMut(additional, key)])\n}\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Akuoumaru\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffSlasher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DebateClub\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FerrousShadow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_,\n        }, {\n          text: trm(\"resistance\")\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ForestRegalia\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 75, 90, 105, 120]\nconst eleMas = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: skill_dmg_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicBlade\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"member\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: critRate_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LuxuriousSeaLord\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\n  customDmgNode(prod(\n    subscript(\n      input.weapon.refineIndex, dmg_Src, { key: \"_\" }),\n      input.total.atk\n    ),\n    \"elemental\",\n    { hit: { ele: constant(\"physical\") }\n})))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  },\n}, {\n  dmg\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }],\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    value: condPassive,\n    path: condPassivePath,\n    name: st('hitOp.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\n        }, {\n          text: sgt(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OldMercsPal\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeArchaic\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rainslasher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RedhornStonethresher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\nconst normal_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def))\nconst charged_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    def_,\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n  }\n}, {\n  normal_dmgInc,\n  charged_dmgInc,\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: def_\n    }, {\n      node: normal_dmgInc\n    }, {\n      node: charged_dmgInc\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"opponentsDamaged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SerpentSpine\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\n\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\nconst all_dmg_stack = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: all_dmg_stack\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: {\n      ...objectKeyMap(range(1, 5), i => ({\n        name: st(\"seconds\", { count: i * 4 }),\n        fields: [{\n          node: all_dmg_stack\n        }, {\n          text: trm(\"takeMoreDmg\"),\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\n          unit: \"%\"\n        }]\n      })),\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardPride\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: all_dmg_,\n    }, {\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SnowTombedStarsilver\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SongOfBrokenPines\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n      atkSPD_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"name\"),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          node: atkSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customShieldNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBell\"\nconst data_gen = data_gen_json as WeaponData\n\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\nconst shield = equal(input.weapon.key, key,\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))))\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n}, {\n  shield\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"takeDmg\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\n        }, {\n          text: sgt(\"cd\"),\n          value: 45,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheUnforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"WasterGreatsword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Whiteblind\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteIronGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\nconst heal = equal(input.weapon.key, key,\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp))))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    name: st('afterDefeatEnemy'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { key: \"sheet_gen:healing\" })\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WolfsGravestone\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_,\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport Akuoumaru from \"./Akuoumaru\"\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\nimport DebateClub from \"./DebateClub\"\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\nimport FerrousShadow from \"./FerrousShadow\"\nimport ForestRegalia from \"./ForestRegalia\"\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\nimport LithicBlade from \"./LithicBlade\"\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\nimport OldMercsPal from \"./OldMercsPal\"\nimport PrototypeArchaic from \"./PrototypeArchaic\"\nimport Rainslasher from \"./Rainslasher\"\nimport RedhornStonethresher from \"./RedhornStonethresher\"\nimport RoyalGreatsword from \"./RoyalGreatsword\"\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\nimport SerpentSpine from \"./SerpentSpine\"\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\nimport SkywardPride from \"./SkywardPride\"\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\nimport TheBell from \"./TheBell\"\nimport TheUnforged from \"./TheUnforged\"\nimport WasterGreatsword from \"./WasterGreatsword\"\nimport Whiteblind from \"./Whiteblind\"\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\nimport WolfsGravestone from \"./WolfsGravestone\"\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\n  Akuoumaru,\n  BlackcliffSlasher,\n  BloodtaintedGreatsword,\n  DebateClub,\n  FavoniusGreatsword,\n  FerrousShadow,\n  ForestRegalia,\n  KatsuragikiriNagamasa,\n  LithicBlade,\n  LuxuriousSeaLord,\n  OldMercsPal,\n  PrototypeArchaic,\n  Rainslasher,\n  RedhornStonethresher,\n  RoyalGreatsword,\n  SacrificialGreatsword,\n  SerpentSpine,\n  SkyriderGreatsword,\n  SkywardPride,\n  SnowTombedStarsilver,\n  SongOfBrokenPines,\n  TheBell,\n  TheUnforged,\n  WasterGreatsword,\n  Whiteblind,\n  WhiteIronGreatsword,\n  WolfsGravestone,\n} as const\nexport default claymore\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmenomaKageuchi\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquilaFavonia\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk)))\nconst dmg = equal(input.weapon.key, key,\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n  },\n}, {\n  heal, dmg\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: st('takeDmg'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"heal\" })\n        }, {\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\n        }, {\n          text: sgt(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CinnabarSpindle\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\nconst skill_dmgInc = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def)))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: { // TODO: should be total\n    skill_dmgInc\n  }\n}, {\n  skill_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"name\"),\n    states: {\n      on: {\n        fields: [{\n          node: skill_dmgInc\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CoolSteel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagotsurubeIsshin\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\nconst dmg = equal(input.weapon.key, key,\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"hitOp.normalChargedOrPlunging\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\n        }, {\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DarkIronSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.electro\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"DullBlade\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusSword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FesteringDesire\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    skill_critRate_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_\n    }, {\n      node: skill_critRate_\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FilletBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\nconst cd_Src = [15, 14, 13, 12, 11]\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\n    }, {\n      text: sgt(\"cd\"),\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\n      unit: \"s\"\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FreedomSworn\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst charged_dmg_ = { ...normal_dmg_ }\nconst plunging_dmg_ = { ...normal_dmg_ }\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: dmg_\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      normal_dmg_,\n      charged_dmg_,\n      plunging_dmg_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: dmg_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"sigilsConsumed\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: normal_dmg_\n        }, {\n          node: charged_dmg_\n        }, {\n          node: plunging_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\n))\nconst normal_dmg_ = lookup(condNode,\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\n  , naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...passive_dmg_,\n    normal_dmg_,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [ // Passive\n      ...allElements.map((ele) => {\n        return { node: passive_dmg_[`${ele}_dmg_`] }\n      })\n    ],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"consumed\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HarbingerOfDawn\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"greaterPercentHP\", { percent: 90 }),\n    states: {\n      on: {\n        fields: [{\n          node: critRate_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"IronSting\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\nconst eleDmgDealtStack = range(1, 2)\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\n  subscript(input.weapon.refineIndex, allDmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: all_dmg_,\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LionsRoar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MistsplitterReforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst stacks = [\"1\", \"2\", \"3\"] as const\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stacksRefine = {\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\n}\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\n))\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  equal(input.charEle, ele,\n    lookup(condNode, objectKeyMap(stacks, stack =>\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\n  )]\n))\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\n))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...allEle_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: allElements.map(ele => (\n      { node: passive_dmg_[`${ele}_dmg_`] }\n    ))\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"emblem\"),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(\n      stacks.map(stack => [stack, {\n        name: st(\"stack\", { count: parseInt(stack) }),\n        fields: allElements.map(ele => ({\n          node: stacks_dmg_[`${ele}_dmg_`]\n        }))\n      }])\n    )\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeCutter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\nconst atk = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk\n  }\n}, {\n  atk\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: hp_ }, { node: atk }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeRancour\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"onHit\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SapwoodBlade\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 75, 90, 105, 120]\nconst eleMas = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SilverSword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst dmg = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    moveSPD_,\n    atkSPD_,\n  }\n}, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: critRate_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st('afterUse.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: moveSPD_\n        }, {\n          node: atkSPD_\n        }, {\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SummitShaper\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SwordOfDescension\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = equal(\"Traveler\", input.charKey, 66)\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk\n  }\n}, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk\n    }, {\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheAlleyFlash\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBlackSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk)))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n}, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }, {\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheFlute\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TravelersHandySword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp)))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      { node: infoMut(heal, { key: \"sheet_gen:healing\" }) }\n    ]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponSwordKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\nimport AquilaFavonia from \"./AquilaFavonia\"\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\nimport CinnabarSpindle from \"./CinnabarSpindle\"\nimport CoolSteel from \"./CoolSteel\"\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\nimport DarkIronSword from \"./DarkIronSword\"\nimport DullBlade from \"./DullBlade\"\nimport FavoniusSword from \"./FavoniusSword\"\nimport FesteringDesire from \"./FesteringDesire\"\nimport FilletBlade from \"./FilletBlade\"\nimport FreedomSworn from \"./FreedomSworn\"\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\nimport IronSting from \"./IronSting\"\nimport LionsRoar from \"./LionsRoar\"\nimport MistsplitterReforged from \"./MistsplitterReforged\"\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\nimport PrototypeRancour from \"./PrototypeRancour\"\nimport RoyalLongsword from \"./RoyalLongsword\"\nimport SacrificialSword from \"./SacrificialSword\"\nimport SapwoodBlade from \"./SapwoodBlade\"\nimport SilverSword from \"./SilverSword\"\nimport SkyriderSword from \"./SkyriderSword\"\nimport SkywardBlade from \"./SkywardBlade\"\nimport SummitShaper from \"./SummitShaper\"\nimport SwordOfDescension from \"./SwordOfDescension\"\nimport TheAlleyFlash from \"./TheAlleyFlash\"\nimport TheBlackSword from \"./TheBlackSword\"\nimport TheFlute from \"./TheFlute\"\nimport TravelersHandySword from \"./TravelersHandySword\"\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\n  AmenomaKageuchi,\n  AquilaFavonia,\n  BlackcliffLongsword,\n  CinnabarSpindle,\n  CoolSteel,\n  KagotsurubeIsshin,\n  DarkIronSword,\n  DullBlade,\n  FavoniusSword,\n  FesteringDesire,\n  FilletBlade,\n  FreedomSworn,\n  HaranGeppakuFutsu,\n  HarbingerOfDawn,\n  IronSting,\n  LionsRoar,\n  MistsplitterReforged,\n  PrimordialJadeCutter,\n  PrototypeRancour,\n  RoyalLongsword,\n  SacrificialSword,\n  SapwoodBlade,\n  SilverSword,\n  SkyriderSword,\n  SkywardBlade,\n  SummitShaper,\n  SwordOfDescension,\n  TheAlleyFlash,\n  TheBlackSword,\n  TheFlute,\n  TravelersHandySword,\n} as const\nexport default sword\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"BeginnersProtector\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"BlackcliffPole\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: sgt(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackTassel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CalamityQueller\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [tr] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\n// const [condActivePath, condActive] = cond(key, \"active\")\n\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\n\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\nconst atkInc = prod(\n  compareEq(input.activeCharKey, input.charKey,\n    constant(1, { /* TODO: Add key for active char */ }),\n    constant(2, { key: `weapon_${key}:inactiveKey` })),\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { key: \"sheet:stacks\" })), 0),\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\n)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...dmg_Nodes,\n    atk_: atkInc,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\n  }, {\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: tr(\"passiveName\"),\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: atkInc }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CrescentPike\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\nconst hit = equal(input.weapon.key, key,\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(hit, { key: `weapon_${key}:hitName` })\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Deathmatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      \"oneOrNone\": {\n        name: trm(\"opponents.oneOrNone\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n      \"moreThanOne\": {\n        name: trm(\"opponents.moreThanOne\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonsBane\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonspineSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EngulfingLightning\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\nconst atk_ = equal(input.weapon.key, key,\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\n\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    enerRech_\n  },\n}, {\n  atk_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: enerRech_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusLance\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Halberd\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"IronPoint\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KitainCrossSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"member\", { count: i }),\n      fields: [{ node: atk_ }, { node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Moonpiercer\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.none\"),\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeStarglitter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardSpine\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\nconst atkSPD_ = percent(0.12)\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    atkSPD_\n  }\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critRate_,\n    }, {\n      node: atkSPD_,\n    }, {\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"StaffOfHoma\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\nconst atk2 = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk: sum(atk1, atk2)\n  }\n}, {\n  atk2_: atk2\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: hp_\n    }, {\n      node: infoMut(atk1, { key: \"atk\" })\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: st(\"lessPercentHP\", { percent: 50 }),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk2, { key: \"atk\" }),\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheCatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_,\n    burst_critRate_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"VortexVanquisher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WavebreakersFin\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteTassel\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponPoleArmKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport BeginnersProtector from './BeginnersProtector'\nimport BlackcliffPole from './BlackcliffPole'\nimport BlackTassel from './BlackTassel'\nimport CalamityQueller from './CalamityQueller'\nimport CrescentPike from './CrescentPike'\nimport Deathmatch from './Deathmatch'\nimport DragonsBane from './DragonsBane'\nimport DragonspineSpear from './DragonspineSpear'\nimport EngulfingLightning from './EngulfingLightning'\nimport FavoniusLance from './FavoniusLance'\nimport Halberd from './Halberd'\nimport IronPoint from './IronPoint'\nimport KitainCrossSpear from './KitainCrossSpear'\nimport LithicSpear from './LithicSpear'\nimport Moonpiercer from './Moonpiercer'\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\nimport PrototypeStarglitter from './PrototypeStarglitter'\nimport RoyalSpear from './RoyalSpear'\nimport SkywardSpine from './SkywardSpine'\nimport StaffOfHoma from './StaffOfHoma'\nimport TheCatch from './TheCatch'\nimport VortexVanquisher from './VortexVanquisher'\nimport WavebreakersFin from './WavebreakersFin'\nimport WhiteTassel from './WhiteTassel'\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\n  BeginnersProtector,\n  BlackcliffPole,\n  BlackTassel,\n  CalamityQueller,\n  CrescentPike,\n  Deathmatch,\n  DragonsBane,\n  DragonspineSpear,\n  EngulfingLightning,\n  FavoniusLance,\n  Halberd,\n  IronPoint,\n  KitainCrossSpear,\n  LithicSpear,\n  Moonpiercer,\n  PrimordialJadeWingedSpear,\n  PrototypeStarglitter,\n  RoyalSpear,\n  SkywardSpine,\n  StaffOfHoma,\n  TheCatch,\n  VortexVanquisher,\n  WavebreakersFin,\n  WhiteTassel,\n} as const\nexport default polearm\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AlleyHunter\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst dmgInc = [.02, .025, .03, .035, .04]\n\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\nconst all_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\n      name: st(\"seconds\", { count: c }),\n      fields: [{\n        node: all_dmg_\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmosBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\n\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\nconst normal_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, { key: \"normal_dmg_\" })\nconst charged_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, { key: \"charged_dmg_\" })\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 5), i => ({\n      name: st(\"seconds\", { count: i / 10 }),\n      fields: [{\n        node: normal_dmg_arrow_\n      }, {\n        node: charged_dmg_arrow_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquaSimulacra\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_: base_hp_,\n    all_dmg_: cond_dmg_,\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: base_hp_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: cond_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst atkInc = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_\n      }, {\n        text: sgt(\"duration\"),\n        value: 30,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CompoundBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.04, .05, .06, .07, .08]\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\n}, naught)\nconst atkSPD_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    atkSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.normalOrCharged\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: atkSPD_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ElegyForTheEnd\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\nconst eleMasInc = [60, 75, 90, 105, 120]\nconst eleMasInc2 = [100, 125, 150, 175, 200]\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas,\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      eleMas: eleMas2\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: eleMas,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas2\n        }, {\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FadingTwilight\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStatePath, condState] = cond(key, \"state\")\nconst state_dmg_dict = {\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\n}\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: state_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condState,\n    path: condStatePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\n      state,\n      {\n        name: trm(`states.${state}`),\n        fields: [{ node: state_dmg_ }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Hamayumi\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\n\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\n\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg, normal_passive),\n    charged_dmg_: sum(charged_dmg, charged_passive)\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg\n    }, {\n      node: charged_dmg\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: normal_passive\n        }, {\n          node: charged_passive\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"HuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HuntersPath\"\nconst data_gen = data_gen_json as WeaponData\n\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\n  `${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { key: \"_\" })\n]))\n\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst charged_dmgInc = equal(condPassive, \"on\",\n  prod(\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { key: \"_\" }),\n    input.total.eleMas\n  ))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...allEle_dmg_,\n    charged_dmgInc,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: Object.values(allEle_dmg_).map(node => ({\n      node\n    }))\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.charged\"),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmgInc,\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }, {\n          text: st(\"charges\"),\n          value: 12\n        }, {\n          text: sgt(\"cd\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KingsSquire\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 80, 100, 120, 140]\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\nconst dmg = equal(input.weapon.key, key, customDmgNode(\n  prod(\n    subscript(input.weapon.refineIndex, dmg_arr, { key: \"_\" }),\n    input.total.atk\n  ),\n  \"elemental\",\n))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.skillOrBurst\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas,\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: sgt(\"cd\"),\n          value: 20,\n          unit: \"s\",\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Messenger\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MitternachtsWaltz\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\n\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\n\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skill\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }, {\n    value: condSkill,\n    path: condSkillPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      on: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MouunsMoon\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PolarStar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\n\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst atk_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    atk_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Predator\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normalInc = percent(.1)\nconst chargedInc = percent(.1)\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst normal_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\n}, naught)\nconst charged_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\n}, naught)\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_,\n    atk\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.cryo\"),\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: normal_dmg_\n      }, {\n        node: charged_dmg_\n      }, {\n        text: sgt(\"duration\"),\n        value: 6,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeCrescent\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.36, .45, .54, .63, .72]\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RavenBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RecurveBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healing_s = [.08, .10, .12, .14, .16]\nconst healing = equal(input.weapon.key, key,\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(healing, { key: \"sheet_gen:healing\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRate_s = [.08, .10, .12, .14, .16]\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\nconst critRate_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: critRate_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rust\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\n\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\nconst charged_dmg_ = constant(-0.1)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SeasonedHuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SharpshootersOath\"\nconst data_gen = data_gen_json as WeaponData\n\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    weakspotDMG_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: weakspotDMG_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardHarp\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critd_s = [.20, .25, .30, .35, .40]\nconst dmgPerc = percent(1.25)\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critDMG_\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critDMG_\n    }, {\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Slingshot\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmg_arr = [.36, .42, .48, .54, .60]\n\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"normal_dmg_\" })\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"charged_dmg_\" })\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"normal_dmg_\" }))\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"charged_dmg_\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_dec\n    }, {\n      node: charged_dmg_dec\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_dmg_inc\n        }, {\n          node: charged_dmg_inc\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheStringless\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheViridescentHunt\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThunderingPulse\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\n\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\nconst normal_dmg_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    normal_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 3), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: normal_dmg_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EndOfTheLine\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\nconst dmg = equal(input.weapon.key, key, customDmgNode(\n  prod(\n    subscript(input.weapon.refineIndex, dmgArr, { key: \"_\" }),\n    input.total.atk\n  ),\n  \"elemental\"\n))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WindblumeOde\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.16, .20, .24, .28, .32]\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.skill\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: 's'\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponBowKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\n\nimport AlleyHunter from './AlleyHunter'\nimport AmosBow from \"./AmosBow\"\nimport AquaSimulacra from \"./AquaSimulacra\"\nimport BlackcliffWarbow from './BlackcliffWarbow'\nimport CompoundBow from './CompoundBow'\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\nimport FadingTwilight from \"./FadingTwilight\"\nimport FavoniusWarbow from './FavoniusWarbow'\nimport Hamayumi from './Hamayumi'\nimport HuntersBow from \"./HuntersBow\"\nimport HuntersPath from './HuntersPath'\nimport KingsSquire from './KingsSquire'\nimport Messenger from './Messenger'\nimport MitternachtsWaltz from './MitternachtsWaltz'\nimport MouunsMoon from './MouunsMoon'\nimport PolarStar from './PolarStar'\nimport Predator from './Predator'\nimport PrototypeCrescent from './PrototypeCrescent'\nimport RavenBow from './RavenBow'\nimport RecurveBow from './RecurveBow'\nimport RoyalBow from './RoyalBow'\nimport Rust from './Rust'\nimport SacrificialBow from \"./SacrificialBow\"\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\nimport SharpshootersOath from './SharpshootersOath'\nimport SkywardHarp from './SkywardHarp'\nimport Slingshot from './Slingshot'\nimport TheStringless from './TheStringless'\nimport TheViridescentHunt from './TheViridescentHunt'\nimport ThunderingPulse from './ThunderingPulse'\nimport EndOfTheLine from './EndOfTheLine'\nimport WindblumeOde from './WindblumeOde'\n\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\n  AlleyHunter,\n  AmosBow,\n  AquaSimulacra,\n  BlackcliffWarbow,\n  CompoundBow,\n  ElegyForTheEnd,\n  FadingTwilight,\n  FavoniusWarbow,\n  Hamayumi,\n  HuntersBow,\n  HuntersPath,\n  KingsSquire,\n  Messenger,\n  MitternachtsWaltz,\n  MouunsMoon,\n  PolarStar,\n  Predator,\n  PrototypeCrescent,\n  RavenBow,\n  RecurveBow,\n  RoyalBow,\n  Rust,\n  SacrificialBow,\n  SeasonedHuntersBow,\n  SharpshootersOath,\n  SkywardHarp,\n  Slingshot,\n  TheStringless,\n  TheViridescentHunt,\n  ThunderingPulse,\n  EndOfTheLine,\n  WindblumeOde,\n} as const\nexport default bow\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"ApprenticesNotes\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffAgate\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_,\n      }, {\n        text: sgt(\"duration\"),\n        value: 30,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DodocoTales\"\nconst data_gen = data_gen_json as WeaponData\n\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\n\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_,\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    name: st(\"hitOp.normal\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condCharged,\n    path: condChargedPath,\n    name: st(\"hitOp.charged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EmeraldOrb\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.hydro\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EverlastingMoonglow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\nconst [, trm] = trans(\"weapon\", key)\nconst normal_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp))\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    heal_\n  }\n}, {\n  normal_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: heal_\n    }, {\n      text: trm(\"name\"),\n      node: normal_dmgInc,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EyeOfPerception\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_: dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusCodex\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Frostbearer\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmgAoe,\n  dmgOnCryoOp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FruitOfFulfillment\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst eleMasArr = [24, 27, 30, 33, 36]\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\nconst stacksArr = range(1, 5)\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\n  stacks,\n  prod(\n    subscript(input.weapon.refineIndex, eleMasArr),\n    stacks\n  )\n])), naught)\n\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\n  stacks,\n  prod(\n    percent(-0.05),\n    stacks\n  )\n])), naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas,\n    atk_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    path: condStacksPath,\n    value: condStacks,\n    name: trm(\"stackName\"),\n    states: Object.fromEntries(stacksArr.map(stack => [\n      stack,\n      {\n        name: st(\"stack\", { count: stack }),\n        fields: [{\n          node: eleMas,\n        }, {\n          node: atk_\n        }]\n      }\n    ]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport ColorText from '../../../../Components/ColoredText'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, unequal } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HakushinRing\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\nconst anemo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"anemo\", condPassive, eleDmg))\nconst cryo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"cryo\", condPassive, eleDmg))\nconst geo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"geo\", condPassive, eleDmg))\nconst hydro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"hydro\", condPassive, eleDmg))\nconst pyro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"pyro\", condPassive, eleDmg))\nconst dendro_dmg_= unequal(input.activeCharKey, input.charKey, equal(\"dendro\", condPassive, eleDmg))\n\nconst electro_dmg_ = unequal(input.activeCharKey, input.charKey, unequal(condPassive, undefined, eleDmg))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      anemo_dmg_,\n      cryo_dmg_,\n      electro_dmg_,\n      geo_dmg_,\n      hydro_dmg_,\n      pyro_dmg_,\n      dendro_dmg_,\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.electro\"),\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      anemo: {\n        name: <ColorText color=\"swirl\">{sgt(\"reaction.swirl\")}</ColorText>,\n        fields: [{\n          node: anemo_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      cryo: {\n        name: <ColorText color=\"superconduct\">{sgt(\"reaction.superconduct\")}</ColorText>,\n        fields: [{\n          node: cryo_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      geo: {\n        name: <ColorText color=\"crystallize\">{sgt(\"reaction.crystallize\")}</ColorText>,\n        fields: [{\n          node: geo_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      pyro: {\n        name: <ColorText color=\"overloaded\">{sgt(\"reaction.overloaded\")}</ColorText>,\n        fields: [{\n          node: pyro_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      hydro: {\n        name: <ColorText color=\"electrocharged\">{sgt(\"reaction.electrocharged\")}</ColorText>,\n        fields: [{\n          node: hydro_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      dendro: {\n        // maybe TODO: Change this to Catalyze\n        name: <ColorText color=\"aggravate\">{sgt(\"reaction.aggravate\")}</ColorText>,\n        fields: [{\n          node: dendro_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagurasVerity\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\nconst totems = range(1, 3)\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_: sum(...skill_dmg_s),\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states:\n      Object.fromEntries(totems.map(i => [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: skill_dmg_s[i - 1]\n        },\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\nconst data_gen = data_gen_json as WeaponData\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\n\nconst moveSPD_ = percent(0.1)\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { key: \"_\" })\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\n}, naught)]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    moveSPD_,\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: moveSPD_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"seconds\", { count: i * 4 }),\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MagicGuide\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MappaMare\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\n\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\n}, naught)])\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: eleDmgs\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\n        text: sgt(\"duration\"),\n        value: 10,\n        unit: \"s\"\n      }]\n    }))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MemoryOfDust\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: sgt(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OathswornEye\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\n\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    enerRech_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.skill\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: enerRech_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OtherworldlyStory\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PocketGrimoire\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeAmber\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\n\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.burst\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\" }) }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGrimoire\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialFragments\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardAtlas\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\n\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\n  }\n}, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\n      {\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\n      }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SolarPearl\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\nconst burst_dmg_ = { ...skill_dmg_ }\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    normal_dmg_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      normal: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          node: burst_dmg_\n        }]\n      }\n    }\n  }, {\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skillOrBurst\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: normal_dmg_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"TheWidsith\"\nconst data_gen = data_gen_json as WeaponData\nconst [tr, trm] = trans(\"weapon\", key)\n\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\n\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    anemo_dmg_,\n    cryo_dmg_,\n    electro_dmg_,\n    geo_dmg_,\n    hydro_dmg_,\n    pyro_dmg_,\n    eleMas\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: tr(\"passiveName\"),\n    states: {\n      aria: {\n        name: trm(\"aria\"),\n        fields: [{\n          node: anemo_dmg_\n        }, {\n          node: cryo_dmg_\n        }, {\n          node: electro_dmg_\n        }, {\n          node: geo_dmg_\n        }, {\n          node: hydro_dmg_\n        }, {\n          node: pyro_dmg_\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      interlude: {\n        name: trm(\"interlude\"),\n        fields: [{\n          node: eleMas\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      recitative: {\n        name: trm(\"recitative\"),\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\n\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      atk_\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm('condName'),\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk_Disp, { key: \"atk_\" })\n        }, {\n          text: sgt(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TwinNephrite\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterDefeatEnemy\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: sgt(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WineAndSong\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterSprint\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: sgt(\"duration\"),\n          value: 5,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponCatalystKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport ApprenticesNotes from './ApprenticesNotes'\nimport BlackcliffAgate from './BlackcliffAgate'\nimport DodocoTales from './DodocoTales'\nimport EmeraldOrb from './EmeraldOrb'\nimport EverlastingMoonglow from './EverlastingMoonglow'\nimport EyeOfPerception from './EyeOfPerception'\nimport FavoniusCodex from './FavoniusCodex'\nimport Frostbearer from './Frostbearer'\nimport FruitOfFulfillment from './FruitOfFulfillment'\nimport HakushinRing from './HakushinRing'\nimport KagurasVerity from './KagurasVerity'\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\nimport MagicGuide from './MagicGuide'\nimport MappaMare from './MappaMare'\nimport MemoryOfDust from './MemoryOfDust'\nimport OathswornEye from './OathswornEye'\nimport OtherworldlyStory from './OtherworldlyStory'\nimport PocketGrimoire from './PocketGrimoire'\nimport PrototypeAmber from './PrototypeAmber'\nimport RoyalGrimoire from './RoyalGrimoire'\nimport SacrificialFragments from './SacrificialFragments'\nimport SkywardAtlas from './SkywardAtlas'\nimport SolarPearl from './SolarPearl'\nimport TheWidsith from './TheWidsith'\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\nimport TwinNephrite from './TwinNephrite'\nimport WineAndSong from './WineAndSong'\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\n  ApprenticesNotes,\n  BlackcliffAgate,\n  DodocoTales,\n  EmeraldOrb,\n  EverlastingMoonglow,\n  EyeOfPerception,\n  FavoniusCodex,\n  Frostbearer,\n  FruitOfFulfillment,\n  HakushinRing,\n  KagurasVerity,\n  LostPrayerToTheSacredWinds,\n  MagicGuide,\n  MappaMare,\n  MemoryOfDust,\n  OathswornEye,\n  OtherworldlyStory,\n  PocketGrimoire,\n  PrototypeAmber,\n  RoyalGrimoire,\n  SacrificialFragments,\n  SkywardAtlas,\n  SolarPearl,\n  TheWidsith,\n  ThrillingTalesOfDragonSlayers,\n  TwinNephrite,\n  WineAndSong,\n} as const\nexport default catalyst\n","import claymore from './Claymore'\nimport sword from './Sword'\nimport polearm from './Polearm'\nimport bow from './Bow'\nimport { WeaponKey } from '../../Types/consts'\nimport catalyst from './Catalyst'\nimport WeaponSheet from './WeaponSheet'\n\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\n  ...sword,\n  ...claymore,\n  ...polearm,\n  ...bow,\n  ...catalyst\n} as const\nexport default WeaponData\n"],"names":["weaponCurves","Object","fromEntries","entries","_weaponCurves","map","key","value","values","dataObjForWeaponSheet","gen","additional","displayWeapon","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","Error","mainStatNode","infoMut","sum","prod","subscript","input","curve","ascension","x","addStats","push","main","substatNode","sub","mergeData","inferInfoMut","data_gen","data_gen_json","trans","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","lookup","min","naught","data","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","objectKeyMap","c","count","text","sgt","unit","all_dmg_","equal","on","dmg","customDmgNode","hit","ele","charged_dmg_","eleMas","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","undefined","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","teamBuff","shield","customShieldNode","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","customHealNode","percent","claymore","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","NaN","variant","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","stacks","stacksRefine","stacks_dmg_","stack","allEle_dmg_","parseInt","hp_","atk","moveSPD_","autoSrc","sword","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","tr","dmg_Nodes","e","compareEq","atkDefInc","enerRech_","dmgInc","atk1","atk2","atk2_","burst_critRate_","polearm","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","keys","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","condChargedPath","condCharged","heal_","eleMasArr","condStacksPath","condStacks","stacksArr","eleDmg","anemo_dmg_","unequal","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_","canShow","anemo","color","cryo","geo","pyro","hydro","dendro","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","target","refineInc","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong","catalyst"],"sourceRoot":""}