{"version":3,"file":"static/js/909.9b9ea040.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactAutocomplete.tsx","Components/Artifact/ArtifactLevelSlider.tsx","Components/Character/CharacterSelectionModal.tsx","Components/ExpandButton.tsx","Components/SortByButton.tsx","Components/TextButton.tsx","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Components/ToggleButton/WeaponToggle.tsx","PageArtifact/ArtifactSort.ts","Components/StatInput.tsx","Components/EnemyEditor.tsx","Components/Character/StatDisplayComponent.tsx","ReactHooks/useBoolState.tsx","Components/Artifact/ArtifactCardNano.tsx","Components/Weapon/WeaponCardNano.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildDisplayItem.tsx","PageCharacter/CharacterDisplay/Tabs/TabEquip/CompareBuildButton.tsx","PageCharacter/CharacterDisplay/Tabs/TabEquip/ArtifactSwapModal.tsx","PageCharacter/CharacterDisplay/Tabs/TabEquip/WeaponSwapModal.tsx","PageCharacter/CharacterDisplay/Tabs/TabEquip/index.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BackgroundWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetPicker.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/AssumeFullLevelToggle.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BonusStatsCard.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildAlert.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/MainStatSelectionCard.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/DBState.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/UseEquipped.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/UseExcluded.tsx","PageCharacter/CharacterDisplay/Tabs/TabOptimize/index.tsx","PageCharacter/CharacterDisplay/Tabs/TabOverview.tsx","PageCharacter/CharacterDisplay/Tabs/TabTalent.tsx","PageCharacter/CharacterDisplay/Tabs/TabTeambuffs.tsx","PageCharacter/CharacterDisplay/index.tsx","PageWeapon/WeaponCard.tsx","ReactHooks/useMediaQueryUp.tsx","ReactHooks/useWeapon.tsx","Util/TimeUtil.ts","Util/WeaponSort.ts"],"sourcesContent":["import { Autocomplete, AutocompleteProps, Chip, TextField, useTheme } from '@mui/material';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport KeyMap from '../../KeyMap';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\nimport { allArtifactSets, allElementsWithPhy, ArtifactSetKey } from '../../Types/consts';\nimport MenuItemWithImage from '../MenuItemWithImage';\nimport SolidColoredTextField from '../SolidColoredTextfield';\nimport StatIcon from '../StatIcon';\n\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey> = {\n  key: T\n  label: string\n}\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtifactKeys: readonly T[]\n  selectedArtifactKeys: T[]\n  setArtifactKeys: (keys: T[]) => void\n  getName: (key: T) => string\n  getImage: (key: T) => JSX.Element\n  label: string\n}\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey>({ allArtifactKeys, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\n  ArtifactMultiAutocompleteProps<T>) {\n  const theme = useTheme();\n\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T>[]) => {\n    setArtifactKeys(value.map(v => v.key))\n  };\n  const options = useMemo(() => allArtifactKeys.map(key => ({ key: key, label: getName(key) })), [allArtifactKeys, getName])\n  return <Autocomplete\n    autoHighlight\n    multiple\n    options={options}\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\n    onChange={handleChange}\n    getOptionLabel={(option) => option.label}\n    isOptionEqualToValue={(option, value) => option.key === value.key}\n    renderInput={(params) => <TextField\n      {...params}\n      label={label}\n      variant=\"filled\"\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\n      type=\"search\"\n    />}\n    renderOption={(props, option) => (\n      <MenuItemWithImage\n        key={option.key}\n        value={option.key}\n        image={getImage(option.key)}\n        text={option.label}\n        theme={theme}\n        isSelected={selectedArtifactKeys.includes(option.key)}\n        props={props}\n      />\n    )}\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\n      const color = element ? element : undefined\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\n    })}\n    {...props}\n  />\n}\n\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  artSetKeys: ArtifactSetKey[]\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\n}\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const { t } = useTranslation(\"artifact\")\n  if (!artifactSheets) return null\n  return <ArtifactMultiAutocomplete<ArtifactSetKey>\n    allArtifactKeys={allArtifactSets}\n    selectedArtifactKeys={artSetKeys}\n    setArtifactKeys={setArtSetKeys}\n    getName={(key: ArtifactSetKey) => artifactSheets[key].nameRaw}\n    getImage={(key: ArtifactSetKey) => artifactSheets[key].defIcon}\n    label={t(\"autocompleteLabels.set\")}\n    {...props}\n  />\n}\n\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  mainStatKeys: MainStatKey[]\n  setMainStatKeys: (keys: MainStatKey[]) => void\n}\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\n  const { t } = useTranslation(\"artifact\")\n  return <ArtifactMultiAutocomplete<MainStatKey>\n    allArtifactKeys={allMainStatKeys}\n    selectedArtifactKeys={mainStatKeys}\n    setArtifactKeys={setMainStatKeys}\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\n    getImage={(key: MainStatKey) => StatIcon[key]}\n    label={t(\"autocompleteLabels.mainStat\")}\n    {...props}\n  />\n}\n\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  substatKeys: SubstatKey[]\n  setSubstatKeys: (keys: SubstatKey[]) => void\n}\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\n  const { t } = useTranslation(\"artifact\")\n  return <ArtifactMultiAutocomplete<SubstatKey>\n    allArtifactKeys={allSubstatKeys}\n    selectedArtifactKeys={substatKeys}\n    setArtifactKeys={setSubstatKeys}\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\n    getImage={(key: SubstatKey) => StatIcon[key]}\n    label={t(\"autocompleteLabels.substat\")}\n    {...props}\n  />\n}\n\ntype ArtifactSingleAutocompleteKey = (ArtifactSetKey | \"\") | (MainStatKey | \"\") | (SubstatKey | \"\")\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey> = {\n  key: T\n  label: string\n}\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtifactKeys: readonly T[]\n  selectedArtifactKey: T\n  setArtifactKey: (key: T | \"\") => void\n  getName: (key: T) => string\n  getImage: (key: T) => JSX.Element\n  label: string\n  disable?: (v: any) => boolean\n  showDefault?: boolean\n  defaultText?: string\n  defaultIcon?: Displayable\n  flattenCorners?: boolean\n}\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey>({ allArtifactKeys, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable= () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", flattenCorners = false, ...props }:\n  ArtifactSingleAutocompleteProps<T>) {\n  const theme = useTheme();\n\n  const options = useMemo(() =>\n    (showDefault\n      ? [{ key: \"\" as T, label: defaultText }]\n      : []\n    ).concat(allArtifactKeys.map(key => (\n      { key: key, label: getName(key) }\n    ))), [allArtifactKeys, getName, defaultText, showDefault])\n  return <Autocomplete\n    autoHighlight\n    options={options}\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\n    onChange={(_, newValue) => setArtifactKey(newValue ? newValue.key : \"\")}\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\n    isOptionEqualToValue={(option, value) => option.key === value.key}\n    getOptionDisabled={option => option.key ? disable(option.key) : false}\n    renderInput={(props) => <SolidColoredTextField\n      {...props}\n      label={label}\n      startAdornment={getImage(selectedArtifactKey)}\n      hasValue={selectedArtifactKey ? true : false}\n      flattenCorners={flattenCorners}\n    />}\n    renderOption={(props, option) => (\n      <MenuItemWithImage\n        key={option.key}\n        value={option.key}\n        image={getImage(option.key)}\n        text={option.label}\n        theme={theme}\n        isSelected={selectedArtifactKey === option.key}\n        props={props}\n      />\n    )}\n    {...props}\n  />\n}\n\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\">, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtSetKeys?: readonly ArtifactSetKey[]\n  artSetKey: ArtifactSetKey | \"\"\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\n  label?: string\n  disable?: (v: any) => boolean\n  showDefault?: boolean\n  defaultText?: string\n  defaultIcon?: Displayable\n  flattenCorners?: boolean\n}\nexport function ArtifactSetSingleAutocomplete({ allArtSetKeys = allArtifactSets, artSetKey, setArtSetKey, label = \"\", flattenCorners, ...props }: ArtifactSetSingleAutocompleteProps) {\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const { t } = useTranslation(\"artifact\")\n  label = label ? label : t(\"autocompleteLabels.set\")\n  if (!artifactSheets) return null\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\">\n    allArtifactKeys={allArtSetKeys}\n    selectedArtifactKey={artSetKey}\n    setArtifactKey={setArtSetKey}\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets[key].nameRaw}\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets[key].defIcon : <></>}\n    label={label}\n    flattenCorners={flattenCorners}\n    {...props}\n  />\n}\n","import { Card, Slider } from \"@mui/material\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { clamp } from \"../../Util/Util\"\nimport CustomNumberInput from \"../CustomNumberInput\"\n\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false, disabled = false, showLevelText = false }: {\n  levelLow: number,\n  levelHigh: number,\n  setLow: (low: number) => void,\n  setHigh: (high: number) => void,\n  setBoth: (low: number, high: number) => void,\n  dark?: boolean,\n  disabled?: boolean,\n  showLevelText?: boolean,\n}) {\n  const [sliderLow, setsliderLow] = useState(levelLow)\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\n  const setSlider = useCallback(\n    (e: unknown, value: number | number[]) => {\n      if (typeof value == \"number\") throw new TypeError()\n      const [l, h] = value\n      setsliderLow(l)\n      setsliderHigh(h)\n    },\n    [setsliderLow, setsliderHigh])\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\n\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\n    <CustomNumberInput\n      value={sliderLow}\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\n      sx={{ px: 1, pl: showLevelText ? 2 : undefined, width: showLevelText ? 100 : 50, }}\n      inputProps={{ sx: { textAlign: \"center\" } }}\n      startAdornment={showLevelText ? \"Level: \" : undefined}\n      disabled={disabled}\n    />\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\n      getAriaLabel={() => 'Arifact Level Range'}\n      value={[sliderLow, sliderHigh]}\n      onChange={setSlider}\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\n      valueLabelDisplay=\"auto\"\n      min={0} max={20} step={1} marks\n      disabled={disabled}\n    />\n    <CustomNumberInput\n      value={sliderHigh}\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\n      sx={{ px: 1, width: 50, }}\n      inputProps={{ sx: { textAlign: \"center\" } }}\n      disabled={disabled}\n    />\n  </Card>\n}\n","import { Favorite, FavoriteBorder } from \"@mui/icons-material\";\nimport { Box, CardActionArea, CardContent, Divider, Grid, IconButton, Skeleton, TextField, Typography } from \"@mui/material\";\nimport { ChangeEvent, Suspense, useContext, useDeferredValue, useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Assets from \"../../Assets/Assets\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport { uiInput as input } from \"../../Formula\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport useForceUpdate from \"../../ReactHooks/useForceUpdate\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport useTeamData from \"../../ReactHooks/useTeamData\";\nimport { ICachedCharacter } from \"../../Types/character\";\nimport { allCharacterKeys, CharacterKey, ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport { characterFilterConfigs, characterSortConfigs } from \"../../Util/CharacterSort\";\nimport { filterFunction, sortFunction } from \"../../Util/SortByFilters\";\nimport CardDark from \"../Card/CardDark\";\nimport CardLight from \"../Card/CardLight\";\nimport CloseButton from \"../CloseButton\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport ModalWrapper from \"../ModalWrapper\";\nimport SortByButton from \"../SortByButton\";\nimport SqBadge from \"../SqBadge\";\nimport { Stars } from \"../StarDisplay\";\nimport StatIcon from \"../StatIcon\";\nimport ElementToggle from \"../ToggleButton/ElementToggle\";\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\";\n\nconst defaultSortKeys = [\"level\", \"rarity\", \"name\"]\n\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\n\ntype CharacterSelectionModalProps = {\n  show: boolean,\n  newFirst?: boolean\n  onHide: () => void,\n  onSelect?: (ckey: CharacterKey) => void,\n  filter?: characterFilter\n}\n\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true, newFirst = false }: CharacterSelectionModalProps) {\n  const sortKeys = useMemo(() => newFirst ? [\"new\", ...defaultSortKeys] : defaultSortKeys, [newFirst])\n  const { database } = useContext(DatabaseContext)\n  const { t } = useTranslation(\"page_character\")\n\n  const [sortBy, setsortBy] = useState(sortKeys[0])\n  const [ascending, setascending] = useState(false)\n  const [elementalFilter, setelementalFilter] = useState<ElementKey | \"\">(\"\")\n  const [weaponFilter, setweaponFilter] = useState<WeaponTypeKey | \"\">(\"\")\n\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n\n  const [favesDirty, setFavesDirty] = useForceUpdate()\n  useEffect(() => database.followAnyChar(setFavesDirty), [database, setFavesDirty])\n\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n\n  const sortConfigs = useMemo(() => characterSheets && characterSortConfigs(database, characterSheets), [database, characterSheets])\n  const filterConfigs = useMemo(() => characterSheets && favesDirty && characterFilterConfigs(database, characterSheets), [favesDirty, database, characterSheets])\n  const ownedCharacterKeyList = useMemo(() => characterSheets ? allCharacterKeys.filter(cKey => filter(database._getChar(cKey), characterSheets[cKey])) : [], [database, characterSheets, filter])\n  const characterKeyList = useMemo(() => (characterSheets && sortConfigs && filterConfigs) ?\n    ownedCharacterKeyList\n      .filter(filterFunction({ element: elementalFilter, weaponType: weaponFilter, favorite: \"yes\", name: deferredSearchTerm }, filterConfigs))\n      .sort(sortFunction(sortBy, ascending, sortConfigs) as (a: CharacterKey, b: CharacterKey) => number)\n      .concat(\n        ownedCharacterKeyList\n          .filter(filterFunction({ element: elementalFilter, weaponType: weaponFilter, favorite: \"no\", name: deferredSearchTerm }, filterConfigs))\n          .sort(sortFunction(sortBy, ascending, sortConfigs) as (a: CharacterKey, b: CharacterKey) => number)\n      )\n    : [],\n    [characterSheets, elementalFilter, weaponFilter, sortBy, ascending, sortConfigs, filterConfigs, ownedCharacterKeyList, deferredSearchTerm])\n\n  if (!characterSheets) return null\n  return <ModalWrapper open={show} onClose={onHide} sx={{ \"& .MuiContainer-root\": { justifyContent: \"normal\" } }}>\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1} >\n          <Grid item>\n            <WeaponToggle sx={{ height: \"100%\" }} onChange={setweaponFilter} value={weaponFilter} size=\"small\" />\n          </Grid>\n          <Grid item>\n            <ElementToggle sx={{ height: \"100%\" }} onChange={setelementalFilter} value={elementalFilter} size=\"small\" />\n          </Grid>\n          <Grid item>\n            <TextField\n              autoFocus\n              value={searchTerm}\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\n              label={t(\"characterName\")}\n            />\n          </Grid>\n\n          <Grid item flexGrow={1} />\n\n          <Grid item >\n            <SortByButton sx={{ height: \"100%\" }}\n              sortKeys={sortKeys} value={sortBy} onChange={setsortBy as any}\n              ascending={ascending} onChangeAsc={setascending} />\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {characterKeyList.map(characterKey => <Grid item key={characterKey} xs={6} md={4} lg={3} >\n          <CharacterBtn key={characterKey} characterKey={characterKey} characterSheet={characterSheets[characterKey]} onClick={() => { onHide(); onSelect?.(characterKey) }} />\n        </Grid>)}\n      </Grid></CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n\nfunction CharacterBtn({ onClick, characterKey, characterSheet }: { onClick: () => void, characterKey: CharacterKey, characterSheet: CharacterSheet }) {\n  const teamData = useTeamData(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const favorite = database._getChar(characterKey)?.favorite\n  const { target: data } = teamData?.[characterKey] ?? {}\n  const rarity = characterSheet.rarity\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" height={130} />}><Box>\n    {favorite !== undefined && <Box display=\"flex\" position=\"absolute\" alignSelf=\"start\" zIndex={1}>\n      <IconButton sx={{ p: 0.5 }} onClick={() => characterDispatch({ favorite: !favorite })}>\n        {favorite ? <Favorite /> : <FavoriteBorder />}\n      </IconButton>\n    </Box>}\n    <CardActionArea onClick={onClick} >\n      <CardLight sx={{ display: \"flex\", alignItems: \"center\" }}  >\n        <Box component=\"img\" src={characterSheet.thumbImg} sx={{ width: 130, height: \"auto\" }} className={`grad-${rarity}star`} />\n        <Box sx={{ pl: 1 }}>\n          <Typography><strong>{characterSheet.name}</strong></Typography>\n          {data ? <>\n            <Typography variant=\"h6\"> {characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <ImgIcon src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} />{` `}{CharacterSheet.getLevelString(data.get(input.lvl).value, data.get(input.asc).value)}</Typography>\n            <Typography >\n              <SqBadge color=\"success\">{`C${data.get(input.constellation).value}`}</SqBadge>{` `}\n              <SqBadge color={data.get(input.bonus.auto).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.auto).value}</strong></SqBadge>{` `}\n              <SqBadge color={data.get(input.bonus.skill).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.skill).value}</strong></SqBadge>{` `}\n              <SqBadge color={data.get(input.bonus.burst).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.burst).value}</strong></SqBadge>\n            </Typography>\n          </> : <>\n            <Typography variant=\"h6\"><SqBadge color=\"primary\">NEW</SqBadge></Typography>\n          </>}\n          <small><Stars stars={rarity} colored /></small>\n        </Box>\n      </CardLight>\n    </CardActionArea >\n  </Box></Suspense>\n}\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\nconst ExpandButton = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n  marginLeft: 'auto',\n  transition: (theme as any).transitions.create('transform', {\n    duration: (theme as any).transitions.duration.shortest,\n  }),\n}));\n\nexport default ExpandButton","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\n\ntype SortByButtonProps = ButtonGroupProps & {\n  sortKeys: string[]\n  value: string\n  onChange: (value: string) => void\n  ascending: boolean\n  onChangeAsc: (value: boolean) => void\n}\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\n  const { t } = useTranslation(\"ui\")\n  return <Box display=\"flex\" alignItems=\"center\" gap={1}>\n    <Trans t={t} i18nKey={t(\"sortBy\") as any}>Sort by: </Trans>\n    <ButtonGroup {...props} >\n      <DropdownButton title={<Trans t={t} i18nKey={t(`sortMap.${value}`) as any}>{{ value: t(`sortMap.${value}`) }}</Trans>}>\n        {sortKeys.map(key =>\n          <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\n      </DropdownButton>\n      <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\n        {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\n      </Button>\n    </ButtonGroup>\n  </Box>\n}\n","import { Button, ButtonProps, styled } from \"@mui/material\";\n\nconst DisabledButton = styled(Button)(({ theme }) => ({\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.text.secondary,\n  }\n}))\n\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\n  return <DisabledButton {...props} disabled  >\n    {children}\n  </DisabledButton>\n}\n","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\n\ntype SolidColoredToggleButtonPartial = {\n  baseColor?: ButtonProps[\"color\"];\n  selectedColor?: ButtonProps[\"color\"];\n}\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\n\n\nconst SolidColoredToggleButton = styled(ToggleButton, {\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"secondary\", selectedColor = \"success\" }) => ({\n  '&': {\n    backgroundColor: theme.palette[baseColor].main,\n    color: theme.palette[baseColor].contrastText,\n  },\n  '&:hover': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected': {\n    backgroundColor: theme.palette[selectedColor].main,\n    color: theme.palette[selectedColor].contrastText,\n  },\n  '&.Mui-selected:hover': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n  '&.Mui-disabled': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected.Mui-disabled': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n}));\n\nexport default SolidColoredToggleButton\n","import { Box, ToggleButtonGroup } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport { allElements, ElementKey } from \"../../Types/consts\";\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\nimport { uncoloredEleIcons } from \"../StatIcon\";\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: ElementKey | \"\") => void\n  value: ElementKey | \"\"\n}\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\n  return <ToggleButtonGroup exclusive onChange={cb} value={value || allElements} {...props}>\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} >\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{uncoloredEleIcons[ele]}</Box>\n    </SolidColoredToggleButton>)}\n  </ToggleButtonGroup>\n}\n","import { ToggleButton } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: WeaponTypeKey | \"\") => void\n  value: WeaponTypeKey | \"\"\n}\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\n  return <SolidToggleButtonGroup exclusive onChange={cb} value={value || allWeaponTypeKeys} {...props}>\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt}>\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\n    </ToggleButton>)}\n  </SolidToggleButtonGroup>\n}","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\nimport Artifact from \"../Data/Artifacts/Artifact\";\nimport { probability } from \"./RollProbability\";\nimport { SubstatKey } from \"../Types/artifact\";\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\nexport const artifactSortKeysTC = [\"probability\"] as const\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\nexport type FilterOption = {\n  artSetKeys: ArtifactSetKey[],\n  rarity: ArtifactRarity[],\n  levelLow: number,\n  levelHigh: number,\n  slotKeys: SlotKey[],\n  mainStatKeys: MainStatKey[],\n  substats: SubstatKey[]\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\n  exclusion: Array<\"excluded\" | \"included\">,\n  locked: Array<\"locked\" | \"unlocked\">,\n}\n\ntype ArtifactSortFilter = {\n  filterOption: FilterOption\n  ascending: boolean\n  sortType: ArtifactSortKey\n}\nexport function initialFilterOption(): FilterOption {\n  return {\n    artSetKeys: [],\n    rarity: [...allArtifactRarities],\n    levelLow: 0,\n    levelHigh: 20,\n    slotKeys: [...allSlotKeys],\n    mainStatKeys: [],\n    substats: [],\n    location: \"\",\n    exclusion: [\"excluded\", \"included\"],\n    locked: [\"locked\", \"unlocked\"],\n  }\n}\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\n  filterOption: initialFilterOption(),\n  ascending: false,\n  sortType: artifactSortKeys[0],\n})\n\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\n  return {\n    rarity: {\n      getValue: art => art.rarity ?? 0,\n      tieBreaker: \"level\"\n    },\n    level: {\n      getValue: art => art.level ?? 0,\n      tieBreaker: \"artsetkey\"\n    },\n    artsetkey: {\n      getValue: art => art.setKey ?? \"\",\n      tieBreaker: \"level\"\n    },\n    efficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\n    },\n    mefficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\n    },\n    probability: {\n      getValue: art => {\n        if (!Object.keys(probabilityFilter).length) return 0\n        const prob = (art as any).probability\n        if (prob === undefined) return probability(art, probabilityFilter);\n        return prob\n      }\n    }\n  }\n}\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\n  return {\n    exclusion: (art, filter) => {\n      if (!filter.includes(\"included\") && !art.exclude) return false\n      if (!filter.includes(\"excluded\") && art.exclude) return false\n      return true\n    },\n    locked: (art, filter) => {\n      if (!filter.includes(\"locked\") && art.lock) return false\n      if (!filter.includes(\"unlocked\") && !art.lock) return false\n      return true\n    },\n    location: (art, filter) => {\n      if (!filter) return true\n      if (filter === \"Inventory\" && !art.location) return true\n      if (filter === \"Equipped\" && art.location) return true\n      if (filter === art.location) return true\n      return false\n    },\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\n    slotKeys: (art, filter) => filter.includes(art.slotKey),\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\n    levelLow: (art, filter) => filter <= art.level,\n    levelHigh: (art, filter) => filter >= art.level,\n    rarity: (art, filter) => filter.includes(art.rarity),\n    substats: (art, filter) => {\n      for (const filterKey of filter)\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\n      return true\n    }\n  }\n}\n","import { Replay } from \"@mui/icons-material\"\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\nimport { ReactNode } from \"react\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"./CustomNumberInput\"\nimport TextButton from \"./TextButton\"\n\ntype StatInputInput = ButtonGroupProps & {\n  name: Displayable,\n  children?: ReactNode,\n  value: number,\n  placeholder?: string,\n  defaultValue?: number,\n  onValueChange: (newValue: number | undefined) => void,\n  percent?: boolean,\n  disabled?: boolean,\n  onReset?: () => void\n}\nconst FlexButtonGroup = styled(ButtonGroup)({\n  display: \"flex\"\n})\n\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\n\n  return <FlexButtonGroup {...restProps} >\n    {children}\n    <TextButton sx={{ whiteSpace: \"nowrap\" }} >\n      {name}\n    </TextButton>\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\n      <CustomNumberInput\n        sx={{ px: 1 }}\n        inputProps={{\n          sx: { textAlign: \"right\" }\n        }}\n        float={percent}\n        placeholder={placeholder}\n        value={value}\n        onChange={onValueChange}\n        disabled={disabled}\n        endAdornment={percent ? \"%\" : undefined}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    <Button onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\n      <Replay />\n    </Button>\n  </FlexButtonGroup>\n}\n","import { faCheckSquare, faSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ExpandMore } from \"@mui/icons-material\";\nimport { Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\nimport { useCallback, useContext, useState } from 'react';\nimport StatInput from \"./StatInput\";\nimport { DataContext } from \"../DataContext\";\nimport { uiInput as input } from \"../Formula\";\nimport KeyMap, { valueString } from '../KeyMap';\nimport { allElementsWithPhy, ElementKeyWithPhy } from \"../Types/consts\";\nimport CardLight from \"./Card/CardLight\";\nimport ColorText from \"./ColoredText\";\nimport ExpandButton from \"./ExpandButton\";\nimport { uncoloredEleIcons } from \"./StatIcon\";\n\nexport function EnemyExpandCard() {\n  const { data } = useContext(DataContext)\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  const eLvlNode = data.get(input.enemy.level)\n  const eDefRed = data.get(input.enemy.defRed)\n  const eDefIgn = data.get(input.enemy.defIgn)\n  return <CardLight>\n    <CardContent>\n      <Grid container>\n        <Grid item flexGrow={1} alignItems=\"center\">\n          <Grid container spacing={1}>\n            <Grid item>\n              <Chip size=\"small\" color=\"success\" label={<span>{KeyMap.get(eLvlNode.info.key)} <strong>{eLvlNode.value}</strong></span>} />\n            </Grid>\n            {allElementsWithPhy.map(element => <Grid item key={element}>\n              <Typography key={element} ><EnemyResText element={element} /></Typography>\n            </Grid>)}\n            <Grid item>\n              <Typography>DEF Reduction {valueString(eDefRed.value, eDefRed.unit)}</Typography>\n            </Grid>\n            <Grid item>\n              <Typography>DEF Ignore {valueString(eDefIgn.value, eDefIgn.unit)}</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n            size=\"small\"\n            sx={{ p: 0 }}\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <EnemyEditor />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nexport function EnemyResText({ element }: { element: ElementKeyWithPhy }) {\n  const { data } = useContext(DataContext)\n  const node = data.get(input.enemy[`${element}_res_`])\n  const immune = !isFinite(node.value)\n  const content = immune ? <span >{uncoloredEleIcons[element]} IMMUNE</span> :\n    <span >{uncoloredEleIcons[element]}RES <strong>{valueString(node.value, node.unit)}</strong></span>\n  return <ColorText color={element}>{content}</ColorText>\n}\n\nexport function EnemyEditor({ bsProps = { xs: 12, md: 6 } }: { bsProps?: object }) {\n  const { data, character: { enemyOverride }, characterDispatch } = useContext(DataContext)\n  const defaultVal = 10\n\n  const eLvl = enemyOverride.enemyLevel ?? data.get(input.lvl).value\n  const eDefRed = enemyOverride.enemyDefIgn_ ?? 0\n  const eDefIgn = enemyOverride.enemyDefRed_ ?? 0\n  return <Grid container spacing={1}>\n    <Grid item {...bsProps}>\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\n        To get the specific resistance values of enemies, please visit the wiki.\n      </Button>\n    </Grid>\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(\"enemyLevel\")}</b>}\n        value={eLvl}\n        placeholder={KeyMap.getStr(\"enemyLevel\")}\n        defaultValue={data.get(input.lvl).value}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value })}\n        onReset={() => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value: undefined })}\n      />\n    </Grid>\n    {allElementsWithPhy.map(eleKey => {\n      const statKey = `${eleKey}_enemyRes_`\n      const val = enemyOverride[statKey]\n      const elementImmunity = val === Number.MAX_VALUE\n      return <Grid item key={eleKey} {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n          name={<ColorText color={eleKey}><b>{KeyMap.get(statKey)}</b></ColorText>}\n          value={val ? (elementImmunity ? Infinity : val) : 10}\n          placeholder={elementImmunity ? \"Immune \" : KeyMap.getStr(statKey)}\n          defaultValue={defaultVal}\n          onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey, value })}\n          disabled={elementImmunity}\n          percent\n        >\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"enemyOverride\", statKey, value: elementImmunity ? defaultVal : Number.MAX_VALUE })} >\n            <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\n          </Button>\n        </StatInput>\n      </Grid>\n    })}\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(\"enemyDefIgn_\")}</b>}\n        value={eDefRed}\n        placeholder={KeyMap.getStr(\"enemyDefIgn_\")}\n        defaultValue={0}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefIgn_\", value })}\n        percent\n      />\n    </Grid>\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(\"enemyDefRed_\")}</b>}\n        value={eDefIgn}\n        placeholder={KeyMap.getStr(\"enemyDefRed_\")}\n        defaultValue={0}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefRed_\", value })}\n        percent\n      />\n    </Grid>\n    <Grid item xs={12}>\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\n    </Grid>\n  </Grid>\n}\n","import { Masonry } from \"@mui/lab\"\nimport { CardContent, CardHeader, Divider } from \"@mui/material\"\nimport { Box } from \"@mui/system\"\nimport { useContext, useMemo } from \"react\"\nimport CardDark from \"../Card/CardDark\"\nimport { NodeFieldDisplay } from \"../FieldDisplay\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport { DataContext } from \"../../DataContext\"\nimport { getDisplayHeader, getDisplaySections } from \"../../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../../Formula/type\"\nimport { NodeDisplay } from \"../../Formula/uiData\"\nimport { customRead } from \"../../Formula/utils\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { objectMap } from \"../../Util/Util\"\n\nexport default function StatDisplayComponent() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Box sx={{ mr: -1, mb: -1 }}>\n    <Masonry columns={{ xs: 1, sm: 2, md: 3, xl: 4 }} spacing={1}>\n      {sections.map(([key, Nodes]) =>\n        <Section key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Masonry >\n  </Box>\n}\n\nfunction Section({ displayNs, sectionKey }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data, oldData } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  const displayNsReads = useMemo(() => objectMap(displayNs, (n, nodeKey) => customRead([\"display\", sectionKey, nodeKey])), [displayNs, sectionKey]);\n  if (!header) return <CardDark></CardDark>\n\n  const { title, icon, action } = header\n  return <CardDark >\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([nodeKey, n]) => <NodeFieldDisplay key={nodeKey} node={n} oldValue={oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined} />)}\n    </CardContent>\n  </CardDark>\n}\n","import { useCallback, useState } from \"react\"\n\nexport default function useBoolState(initial: boolean = false) {\n  const [bool, setBool] = useState(initial)\n  const onTrue = useCallback(() => setBool(true), [setBool],)\n  const onFalse = useCallback(() => setBool(false), [setBool],)\n  return [bool, onTrue, onFalse] as [boolean, () => void, () => void]\n}\n","import { BusinessCenter } from \"@mui/icons-material\";\nimport { alpha, Box, CardActionArea, Chip, Typography, useTheme } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport Artifact from \"../../Data/Artifacts/Artifact\";\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport KeyMap, { cacheValueString } from \"../../KeyMap\";\nimport useArtifact from \"../../ReactHooks/useArtifact\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { ICachedSubstat } from \"../../Types/artifact\";\nimport { allElementsWithPhy, SlotKey } from \"../../Types/consts\";\nimport { clamp } from \"../../Util/Util\";\nimport BootstrapTooltip from \"../BootstrapTooltip\";\nimport CardDark from \"../Card/CardDark\";\nimport ColorText from \"../ColoredText\";\nimport ConditionalWrapper from \"../ConditionalWrapper\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport StatIcon, { uncoloredEleIcons } from \"../StatIcon\";\nimport ArtifactSetSlotTooltip from \"./ArtifactSetSlotTooltip\";\n\ntype Data = {\n  artifactId?: string,\n  slotKey: SlotKey,\n  mainStatAssumptionLevel?: number,\n  onClick?: () => void,\n  showLocation?: boolean,\n  BGComponent?: React.ElementType\n}\n\nexport default function ArtifactCardNano({ artifactId, slotKey: pSlotKey, mainStatAssumptionLevel = 0, showLocation = false, onClick, BGComponent = CardDark }: Data) {\n  const art = useArtifact(artifactId)\n  const sheet = usePromise(ArtifactSheet.get(art?.setKey), [art])\n  const actionWrapperFunc = useCallback(children => <CardActionArea onClick={onClick} sx={{ height: \"100%\" }}>{children}</CardActionArea>, [onClick],)\n  const theme = useTheme()\n  if (!art) return <BGComponent sx={{ display: \"flex\", height: \"100%\", alignItems: \"center\", justifyContent: \"center\" }}>\n    <Box component=\"img\" src={Assets.slot[pSlotKey]} sx={{ width: \"25%\", height: \"auto\", opacity: 0.7 }} />\n  </BGComponent>\n\n  const { slotKey, rarity, level, mainStatKey, substats, location } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const mainStatUnit = KeyMap.unit(mainStatKey)\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\n  const element = allElementsWithPhy.find(ele => art.mainStatKey.includes(ele))\n  const color = element ? alpha(theme.palette[element].main, 0.6) : alpha(theme.palette.secondary.main, 0.6)\n  return <BGComponent sx={{ height: \"100%\" }}><ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}  >\n    <Box display=\"flex\" height=\"100%\">\n      <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", flexGrow: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\" }} >\n        <ArtifactSetSlotTooltip slotKey={slotKey} sheet={sheet}>\n          <Box\n            component=\"img\"\n            src={sheet?.slotIcons[slotKey] ?? \"\"}\n            sx={{ m: -1, maxHeight: \"110%\", maxWidth: \"110%\" }}\n          />\n        </ArtifactSetSlotTooltip>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"space-between\", pointerEvents: \"none\" }} >\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\n          {showLocation && <Chip size=\"small\" label={<LocationIcon location={location} />} color={\"secondary\"} sx={{\n            overflow: \"visible\", \".MuiChip-label\": {\n              overflow: \"visible\"\n            }\n          }} />}\n        </Box>\n        {/* mainstats */}\n        <Chip size=\"small\" sx={{ position: \"absolute\", bottom: 0, mb: 1, backgroundColor: color }}\n          label={<Typography variant=\"h6\" sx={{ display: \"flex\", gap: 1, px: 1, zIndex: 1 }}>\n            <BootstrapTooltip placement=\"top\" title={<Typography>{KeyMap.getArtStr(mainStatKey)}</Typography>} disableInteractive>\n              <span>{element ? uncoloredEleIcons[element] : StatIcon[mainStatKey]}</span>\n            </BootstrapTooltip>\n            <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\n          </Typography>} />\n      </Box>\n      {/* substats */}\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" sx={{ p: 1, }}>\n        {substats.map((stat: ICachedSubstat, i: number) => <SubstatDisplay key={i + stat.key} stat={stat} />)}\n      </Box>\n    </Box>\n  </ConditionalWrapper></BGComponent >\n}\nfunction SubstatDisplay({ stat }: { stat: ICachedSubstat }) {\n  if (!stat.value) return null\n  const numRolls = stat.rolls?.length ?? 0\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const unit = KeyMap.unit(stat.key)\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1, display: \"flex\", gap: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">\n      <BootstrapTooltip placement=\"top\" title={<Typography>{stat.key && KeyMap.getArtStr(stat.key)}</Typography>} disableInteractive>\n        <span>{StatIcon[stat.key]}</span>\n      </BootstrapTooltip>\n      <span>{`${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</span>\n    </Typography>\n  </Box>)\n}\nfunction LocationIcon({ location }) {\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\n  return characterSheet ? <BootstrapTooltip placement=\"right-end\" title={<Typography>{characterSheet.name}</Typography>}><ImgIcon src={characterSheet.thumbImgSide} sx={{ height: \"3em\", marginTop: \"-1.5em\", marginLeft: \"-0.5em\" }} /></BootstrapTooltip> : <BusinessCenter />\n}\n","import { BusinessCenter } from \"@mui/icons-material\";\nimport { Box, CardActionArea, Chip, Skeleton, Typography } from \"@mui/material\";\nimport { useCallback, useMemo } from \"react\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\";\nimport { input } from \"../../Formula\";\nimport { computeUIData, dataObjForWeapon } from \"../../Formula/api\";\nimport { NodeDisplay } from '../../Formula/uiData';\nimport KeyMap, { valueString } from \"../../KeyMap\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport useWeapon from \"../../ReactHooks/useWeapon\";\nimport { MainStatKey, SubstatKey } from \"../../Types/artifact\";\nimport BootstrapTooltip from \"../BootstrapTooltip\";\nimport CardDark from \"../Card/CardDark\";\nimport ConditionalWrapper from \"../ConditionalWrapper\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport StatIcon from \"../StatIcon\";\nimport WeaponNameTooltip from \"./WeaponNameTooltip\";\n\ntype Data = {\n  weaponId?: string,\n  onClick?: () => void,\n  showLocation?: boolean,\n  BGComponent?: React.ElementType,\n}\n\nexport default function WeaponCardNano({ weaponId, showLocation = false, onClick, BGComponent = CardDark, }: Data) {\n  const weapon = useWeapon(weaponId)\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\n  const actionWrapperFunc = useCallback(children => <CardActionArea sx={{ height: \"100%\" }} onClick={onClick}>{children}</CardActionArea>, [onClick],)\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n  if (!weapon || !weaponSheet || !UIData) return <BGComponent sx={{ height: \"100%\" }}><Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\" }} /></BGComponent>;\n  const { refinement, location } = weapon\n  return <BGComponent sx={{ height: \"100%\" }}><ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}  >\n    <Box display=\"flex\" height=\"100%\" alignItems=\"stretch\" >\n      <Box className={`grad-${weaponSheet.rarity}star`} sx={{ height: \"100%\", position: \"relative\", flexGrow: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"flex-end\" }} >\n        <WeaponNameTooltip sheet={weaponSheet}>\n          <Box\n            component=\"img\"\n            src={weaponSheet.img}\n            sx={{ mx: -1, maxHeight: \"100%\", maxWidth: \"100%\" }}\n          />\n        </WeaponNameTooltip>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"space-between\", pointerEvents: \"none\" }} >\n          <Chip size=\"small\" label={<strong>{WeaponSheet.getLevelString(weapon)}</strong>} color=\"primary\" />\n          {showLocation && <Chip size=\"small\" label={<LocationIcon location={location} />} color={\"secondary\"} sx={{\n            overflow: \"visible\", \".MuiChip-label\": {\n              overflow: \"visible\"\n            }\n          }} />}\n        </Box>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"flex-end\", alignItems: \"flex-end\" }} >\n          {weaponSheet.hasRefinement && <Chip size=\"small\" color=\"info\" label={<strong>R{refinement}</strong>} />}\n        </Box>\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\" sx={{ p: 1, }}>\n        <WeaponStat node={UIData.get(input.weapon.main)} />\n        <WeaponStat node={UIData.get(input.weapon.sub)} />\n      </Box>\n    </Box>\n  </ConditionalWrapper></BGComponent >\n}\nfunction WeaponStat({ node }: { node: NodeDisplay }) {\n  if (!node.info.key) return null\n  const val = valueString(node.value, node.unit, !node.unit ? 0 : undefined)\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1, display: \"flex\", gap: 1 }} component=\"span\">\n      <BootstrapTooltip placement=\"top\" title={<Typography>{node.info.key && KeyMap.getArtStr(node.info.key as MainStatKey | SubstatKey)}</Typography>} disableInteractive>\n        <span>{StatIcon[node.info.key]}</span>\n      </BootstrapTooltip>\n      <span>{val}</span>\n    </Typography>\n  </Box>)\n}\nfunction LocationIcon({ location }) {\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\n  return characterSheet ? <BootstrapTooltip placement=\"right-end\" title={<Typography>{characterSheet.name}</Typography>}><ImgIcon src={characterSheet.thumbImgSide} sx={{ height: \"3em\", marginTop: \"-1.5em\", marginLeft: \"-0.5em\" }} /></BootstrapTooltip> : <BusinessCenter />\n}\n","import { ChevronRight } from '@mui/icons-material';\nimport { Button, CardContent, Grid, Skeleton, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React, { Suspense, useCallback, useContext, useState } from 'react';\nimport ArtifactCardNano from '../../../../../Components/Artifact/ArtifactCardNano';\nimport { artifactSlotIcon } from '../../../../../Components/Artifact/SlotNameWIthIcon';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport StatDisplayComponent from '../../../../../Components/Character/StatDisplayComponent';\nimport ModalWrapper from '../../../../../Components/ModalWrapper';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport WeaponCardNano from '../../../../../Components/Weapon/WeaponCardNano';\nimport { ArtifactSheet } from '../../../../../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../../../../../Database/Database';\nimport { DataContext } from '../../../../../DataContext';\nimport { uiInput as input } from '../../../../../Formula';\nimport ArtifactCard from '../../../../../PageArtifact/ArtifactCard';\nimport usePromise from '../../../../../ReactHooks/usePromise';\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from '../../../../../Types/consts';\n\ntype NewOld = {\n  newId: string,\n  oldId?: string\n}\n\ntype BuildDisplayItemProps = {\n  index?: number,\n  compareBuild: boolean,\n  disabled?: boolean,\n  extraButtons?: JSX.Element\n}\n//for displaying each artifact build\nexport default function BuildDisplayItem({ index, compareBuild, extraButtons, disabled }: BuildDisplayItemProps) {\n  const { database } = useContext(DatabaseContext)\n  const dataContext = useContext(DataContext)\n\n  const { character, data, oldData, mainStatAssumptionLevel } = dataContext\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const [newOld, setNewOld] = useState(undefined as NewOld | undefined)\n  const close = useCallback(() => setNewOld(undefined), [setNewOld],)\n\n  const equipBuild = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this build to this character?\")) return\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\n    database.equipArtifacts(character.key, newBuild)\n    database.setWeaponLocation(data.get(input.weapon.id).value!, character.key)\n  }, [character, data, database])\n  if (!character || !artifactSheets || !oldData) return null\n  const currentlyEquipped = allSlotKeys.every(slotKey => data.get(input.art[slotKey].id).value === oldData.get(input.art[slotKey].id).value) && data.get(input.weapon.id).value === oldData.get(input.weapon.id).value\n  const statProviderContext = { ...dataContext }\n  if (!compareBuild) statProviderContext.oldData = undefined\n  const setToSlots: Partial<Record<ArtifactSetKey, SlotKey[]>> = {}\n  allSlotKeys.forEach(slotKey => {\n    const set = data.get(input.art[slotKey].set).value as ArtifactSetKey | undefined\n    if (!set) return\n    if (setToSlots[set]) setToSlots[set]!.push(slotKey)\n    else setToSlots[set] = [slotKey]\n  })\n\n  return <CardLight>\n    <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n      {newOld && <CompareArtifactModal newOld={newOld} mainStatAssumptionLevel={mainStatAssumptionLevel} onClose={close} />}\n      <CardContent>\n        <Box display=\"flex\" gap={1} sx={{ pb: 1 }} flexWrap=\"wrap\">\n          {index !== undefined && <SqBadge color=\"info\"><Typography><strong>#{index + 1}{currentlyEquipped ? \" (Equipped)\" : \"\"}</strong></Typography></SqBadge>}\n          {(Object.entries(setToSlots) as [ArtifactSetKey, SlotKey[]][]).sort(([k1, slotarr1], [k2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\n            <Box key={key}><SqBadge color={currentlyEquipped ? \"success\" : \"primary\"} ><Typography >\n              {slotarr.map(slotKey => artifactSlotIcon(slotKey))} {artifactSheets?.[key].name ?? \"\"}\n            </Typography></SqBadge></Box>\n          )}\n          <Box sx={{ flexGrow: 1, display: \"flex\", justifyContent: \"flex-end\" }}>\n          </Box>\n          <Button size='small' color=\"success\" onClick={equipBuild} disabled={disabled || currentlyEquipped}>Equip Build</Button>\n          {extraButtons}\n        </Box>\n        <Grid container spacing={1} sx={{ pb: 1 }}>\n          <Grid item xs={6} sm={4} md={3} lg={2}>\n            <WeaponCardNano showLocation weaponId={data.get(input.weapon.id).value} />\n          </Grid>\n          {allSlotKeys.map(slotKey =>\n            <Grid item xs={6} sm={4} md={3} lg={2} key={slotKey} >\n              <ArtifactCardNano showLocation slotKey={slotKey} artifactId={data.get(input.art[slotKey].id).value} mainStatAssumptionLevel={mainStatAssumptionLevel} onClick={() => {\n                const oldId = character.equippedArtifacts[slotKey]\n                const newId = data.get(input.art[slotKey].id).value!\n                setNewOld({ oldId: oldId !== newId ? oldId : undefined, newId })\n              }} />\n            </Grid>)}\n        </Grid>\n        <DataContext.Provider value={statProviderContext}>\n          <StatDisplayComponent />\n        </DataContext.Provider>\n      </CardContent>\n    </Suspense>\n  </CardLight>\n}\n\nfunction CompareArtifactModal({ newOld: { newId, oldId }, mainStatAssumptionLevel, onClose }: { newOld: NewOld, mainStatAssumptionLevel: number, onClose: () => void }) {\n  return <ModalWrapper open={!!newId} onClose={onClose} containerProps={{ maxWidth: oldId ? \"md\" : \"xs\" }}>\n    <CardDark>\n      <CardContent sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"stretch\", gap: 2, height: \"100%\" }}>\n        {oldId && <Box><ArtifactCard artifactId={oldId} mainStatAssumptionLevel={mainStatAssumptionLevel} disableEditSetSlot canExclude canEquip /></Box>}\n        {oldId && <Box display=\"flex\" flexGrow={1} />}\n        {oldId && <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\"><CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight></Box>}\n        {oldId && <Box display=\"flex\" flexGrow={1} />}\n        <Box><ArtifactCard artifactId={newId} mainStatAssumptionLevel={mainStatAssumptionLevel} disableEditSetSlot canExclude canEquip /></Box>\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { Close, Difference } from \"@mui/icons-material\"\nimport { Button, Skeleton, Tooltip, Typography } from \"@mui/material\"\nimport { Suspense, useContext, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { HitModeToggle, ReactionToggle } from \"../../../../Components/HitModeEditor\"\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\nimport { DatabaseContext } from \"../../../../Database/Database\"\nimport { DataContext } from \"../../../../DataContext\"\nimport useBoolState from \"../../../../ReactHooks/useBoolState\"\nimport useTeamData from \"../../../../ReactHooks/useTeamData\"\nimport { objectMap } from \"../../../../Util/Util\"\nimport BuildDisplayItem from \"../TabOptimize/Components/BuildDisplayItem\"\n\nexport default function CompareBuildButton({ artId, weaponId }: { artId?: string, weaponId?: string }) {\n  const { t } = useTranslation(\"page_character\")\n  const [show, onShow, onHide] = useBoolState(false)\n  const { database } = useContext(DatabaseContext)\n  const { character, character: { key: characterKey, equippedArtifacts }, characterSheet, data: oldData, mainStatAssumptionLevel, characterDispatch } = useContext(DataContext)\n  const build = useMemo(() => {\n    const newArt = database._getArt(artId ?? \"\")\n    const artmap = objectMap(equippedArtifacts, (id, slot) => slot === newArt?.slotKey ? newArt : database._getArt(id))\n    return Object.values(artmap)\n  }, [database, equippedArtifacts, artId])\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel, build, weaponId ? database._getWeapon(weaponId) : undefined)\n  if (!teamData) return null\n  return <>\n    <ModalWrapper open={show} onClose={onHide} containerProps={{ maxWidth: \"xl\" }}>\n      <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n        <DataContext.Provider value={{ characterSheet, character, characterDispatch, mainStatAssumptionLevel, data: teamData[characterKey]!.target, teamData, oldData }}>\n          <BuildDisplayItem compareBuild={true} extraButtons={<><HitModeToggle size=\"small\" /><ReactionToggle size=\"small\" /><Button size='small' color=\"error\" onClick={onHide} ><Close /></Button></>} />\n        </DataContext.Provider>\n      </Suspense>\n    </ModalWrapper>\n    <Tooltip title={<Typography>{t`tabEquip.compare`}</Typography>} placement=\"top\" arrow>\n      <Button color=\"info\" size=\"small\" onClick={onShow} ><Difference /></Button>\n    </Tooltip>\n  </>\n}\n","import { Box, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\nimport { lazy, Suspense, useCallback, useContext, useEffect, useMemo, useReducer } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Assets from \"../../../../Assets/Assets\"\nimport CardDark from \"../../../../Components/Card/CardDark\"\nimport CloseButton from \"../../../../Components/CloseButton\"\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\"\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\nimport { DatabaseContext } from \"../../../../Database/Database\"\nimport ArtifactCard from \"../../../../PageArtifact/ArtifactCard\"\nimport { artifactFilterConfigs, FilterOption, initialFilterOption } from \"../../../../PageArtifact/ArtifactSort\"\nimport useForceUpdate from \"../../../../ReactHooks/useForceUpdate\"\nimport useMediaQueryUp from \"../../../../ReactHooks/useMediaQueryUp\"\nimport { SlotKey } from \"../../../../Types/consts\"\nimport { filterFunction } from \"../../../../Util/SortByFilters\"\nimport CompareBuildButton from \"./CompareBuildButton\"\nconst numToShowMap = { xs: 6, sm: 6, md: 9, lg: 12, xl: 12 }\n\nconst ArtifactFilterDisplay = lazy(() => import('../../../../Components/Artifact/ArtifactFilterDisplay'))\n\nexport default function ArtifactSwapModal({ onChangeId, slotKey, show, onClose }:\n  { onChangeId: (id: string) => void, slotKey: SlotKey, show: boolean, onClose: () => void }) {\n  const { t } = useTranslation(\"page_character\")\n  const { database } = useContext(DatabaseContext)\n  const clickHandler = useCallback((id) => {\n    onChangeId(id)\n    onClose()\n  }, [onChangeId, onClose])\n  const filterOptionReducer = useCallback((state, action) => ({ ...state, ...action, slotKeys: [slotKey] }), [slotKey],)\n\n  const [filterOption, filterOptionDispatch]: [FilterOption, (action: any) => void] = useReducer(filterOptionReducer, { ...initialFilterOption(), slotKeys: [slotKey] })\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => { return database.followAnyArt(forceUpdate) }, [database, forceUpdate])\n\n  const brPt = useMediaQueryUp()\n\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\n  const artIdList = useMemo(() => {\n    const filterFunc = filterFunction(filterOption, filterConfigs)\n    return dbDirty && database._getArts().filter(filterFunc).map(art => art.id).slice(0, numToShowMap[brPt])\n  }, [dbDirty, database, filterConfigs, filterOption, brPt])\n\n  return <ModalWrapper open={show} onClose={onClose} containerProps={{ maxWidth: \"xl\" }} >\n    <CardDark>\n      <CardContent sx={{ py: 1, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n        <Typography variant=\"h6\">{slotKey ? <ImgIcon src={Assets.slot[slotKey]} /> : null} {t`tabEquip.swapArt`}</Typography>\n        <CloseButton onClick={onClose} />\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={200} />}>\n          <ArtifactFilterDisplay filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} />\n        </Suspense>\n        <Box mt={1}>\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\n            <Grid container spacing={1} columns={{ xs: 2, md: 3, lg: 4 }}>\n              {artIdList.map(id =>\n                <Grid item key={id} xs={1} >\n                  <ArtifactCard\n                    artifactId={id}\n                    extraButtons={<CompareBuildButton artId={id} />}\n                    onClick={clickHandler}\n                  />\n                </Grid>)}\n            </Grid>\n          </Suspense>\n        </Box>\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { Box, CardContent, Divider, Grid, ToggleButton, Typography } from \"@mui/material\"\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Assets from \"../../../../Assets/Assets\"\nimport CardDark from \"../../../../Components/Card/CardDark\"\nimport CloseButton from \"../../../../Components/CloseButton\"\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\"\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\nimport SolidToggleButtonGroup from \"../../../../Components/SolidToggleButtonGroup\"\nimport { Stars } from \"../../../../Components/StarDisplay\"\nimport WeaponSheet from \"../../../../Data/Weapons/WeaponSheet\"\nimport { DatabaseContext } from \"../../../../Database/Database\"\nimport WeaponCard from \"../../../../PageWeapon/WeaponCard\"\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate'\nimport usePromise from \"../../../../ReactHooks/usePromise\"\nimport { allRarities, WeaponTypeKey } from \"../../../../Types/consts\"\nimport { filterFunction, sortFunction } from '../../../../Util/SortByFilters'\nimport { weaponFilterConfigs, weaponSortConfigs } from '../../../../Util/WeaponSort'\nimport CompareBuildButton from \"./CompareBuildButton\"\nexport default function WeaponSwapModal({ onChangeId, weaponTypeKey, show, onClose }: { onChangeId: (id: string) => void, weaponTypeKey: WeaponTypeKey, show: boolean, onClose: () => void }) {\n  const { t } = useTranslation(\"page_character\")\n  const { database } = useContext(DatabaseContext)\n  const clickHandler = useCallback((id) => {\n    onChangeId(id)\n    onClose()\n  }, [onChangeId, onClose])\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => database.followAnyWeapon(forceUpdate), [forceUpdate, database])\n\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n\n  const filterConfigs = useMemo(() => weaponSheets && weaponFilterConfigs(weaponSheets), [weaponSheets])\n  const sortConfigs = useMemo(() => weaponSheets && weaponSortConfigs(weaponSheets), [weaponSheets])\n\n  const [rarity, setRarity] = useState([5, 4, 3])\n\n  const weaponIdList = useMemo(() => (filterConfigs && sortConfigs && dbDirty && database._getWeapons()\n    .filter(filterFunction({ weaponType: weaponTypeKey, rarity }, filterConfigs))\n    .sort(sortFunction(\"level\", false, sortConfigs))\n    .map(weapon => weapon.id)) ?? []\n    , [dbDirty, database, filterConfigs, sortConfigs, rarity, weaponTypeKey])\n\n  return <ModalWrapper open={show} onClose={onClose} >\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} {t`tabEquip.swapWeapon`}</Typography>\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={onClose} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Box mb={1}>\n          <SolidToggleButtonGroup sx={{ height: \"100%\" }} onChange={(e, newVal) => setRarity(newVal)} value={rarity} size=\"small\">\n            {allRarities.map(star => <ToggleButton key={star} value={star}><Box display=\"flex\" gap={1}><strong>{star}</strong><Stars stars={1} /></Box></ToggleButton>)}\n          </SolidToggleButtonGroup>\n        </Box>\n        <Grid container spacing={1}>\n          {weaponIdList.map(weaponId =>\n            <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\n              <WeaponCard\n                weaponId={weaponId}\n                onClick={clickHandler}\n                extraButtons={<CompareBuildButton weaponId={weaponId} />}\n              />\n            </Grid>)}\n        </Grid>\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { SwapHoriz } from '@mui/icons-material';\nimport { Box, Button, CardContent, Divider, Grid, Tooltip, Typography, useMediaQuery } from '@mui/material';\nimport { useTheme } from \"@mui/system\";\nimport { lazy, Suspense, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SetEffectDisplay from '../../../../Components/Artifact/SetEffectDisplay';\nimport SlotNameWithIcon from '../../../../Components/Artifact/SlotNameWIthIcon';\nimport CardLight from '../../../../Components/Card/CardLight';\nimport StatDisplayComponent from '../../../../Components/Character/StatDisplayComponent';\nimport DocumentDisplay from \"../../../../Components/DocumentDisplay\";\nimport { ArtifactSheet } from '../../../../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../../../../Database/Database';\nimport { DataContext } from '../../../../DataContext';\nimport { uiInput as input } from '../../../../Formula';\nimport ArtifactCard from '../../../../PageArtifact/ArtifactCard';\nimport WeaponCard from '../../../../PageWeapon/WeaponCard';\nimport useBoolState from '../../../../ReactHooks/useBoolState';\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate';\nimport usePromise from '../../../../ReactHooks/usePromise';\nimport { allSlotKeys, SlotKey, WeaponTypeKey } from '../../../../Types/consts';\nimport { objectKeyMap } from '../../../../Util/Util';\nimport ArtifactSwapModal from './ArtifactSwapModal';\nimport WeaponSwapModal from './WeaponSwapModal';\n\nconst WeaponEditor = lazy(() => import('../../../../PageWeapon/WeaponEditor'))\n\nfunction TabEquip() {\n  const { t } = useTranslation(\"page_character\")\n  const { teamData, data, character, character: { equippedWeapon, key: characterKey, equippedArtifacts }, characterSheet, mainStatAssumptionLevel } = useContext(DataContext)\n  const { weaponSheet } = teamData[characterKey]!\n  const [weaponId, setweaponId] = useState(\"\")\n  const showWeapon = useCallback(() => setweaponId(equippedWeapon), [equippedWeapon],)\n  const hideWeapon = useCallback(() => setweaponId(\"\"), [])\n\n  //triggers when character swap weapons\n  useEffect(() => {\n    if (weaponId && weaponId !== equippedWeapon)\n      setweaponId(equippedWeapon)\n  }, [weaponId, equippedWeapon])\n\n  const { database } = useContext(DatabaseContext)\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n\n  // TODO: We can also listen only to equipped artifacts\n  const [, updateArt] = useForceUpdate()\n  useEffect(() => database.followAnyArt(updateArt))\n\n  const hasEquipped = useMemo(() => !!Object.values(equippedArtifacts).filter(i => i).length, [equippedArtifacts])\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\n  }, [character, database])\n  const setEffects = useMemo(() => artifactSheets && ArtifactSheet.setEffects(artifactSheets, data), [artifactSheets, data])\n\n  const theme = useTheme();\n  const grxl = useMediaQuery(theme.breakpoints.up('xl'));\n  const artifactFields = useMemo(() => artifactSheets && setEffects && Object.entries(setEffects).map(([setKey, setNumKeyArr]) =>\n    <CardLight key={setKey} sx={{ flexGrow: 1, }} >\n      <CardContent >\n        <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\n          <Grid item display=\"flex\" flexDirection=\"column\" gap={2}>\n            {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\n          </Grid>\n        </Grid>\n      </CardContent>\n    </CardLight>), [artifactSheets, setEffects])\n  const weaponDoc = useMemo(() => weaponSheet.document.length > 0 && <CardLight><CardContent><DocumentDisplay sections={weaponSheet.document} /></CardContent></CardLight>, [weaponSheet])\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n    <Suspense fallback={false}>\n      <WeaponEditor\n        weaponId={weaponId}\n        footer\n        onClose={hideWeapon}\n        extraButtons={<LargeWeaponSwapButton weaponTypeKey={characterSheet.weaponTypeKey} />}\n      />\n    </Suspense>\n    <CardLight >\n      <CardContent>\n        <StatDisplayComponent />\n      </CardContent>\n    </CardLight>\n    <Grid container spacing={1}>\n      {grxl && <Grid item xs={12} md={12} xl={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\n        {weaponDoc}\n        {hasEquipped && <Button color=\"error\" onClick={unequipArts} fullWidth>{t`tabEquip.unequipArts`}</Button>}\n        {artifactFields}\n      </Grid>}\n      <Grid item xs={12} md={12} xl={9} container spacing={1}>\n        <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <WeaponCard weaponId={equippedWeapon} onEdit={showWeapon} canEquip extraButtons={<WeaponSwapButton weaponTypeKey={characterSheet.weaponTypeKey} />} />\n        </Grid>\n        {allSlotKeys.map(slotKey => <Grid item xs={12} sm={6} md={4} key={slotKey} >\n          {!!data.get(input.art[slotKey].id).value ?\n            <ArtifactCard artifactId={data.get(input.art[slotKey].id).value} mainStatAssumptionLevel={mainStatAssumptionLevel}\n              extraButtons={<ArtifactSwapButton slotKey={slotKey} />} editor canExclude canEquip /> :\n            <ArtSwapCard slotKey={slotKey} />}\n        </Grid>)}\n      </Grid>\n      {!grxl && <Grid item xs={12} md={12} xl={3} container spacing={1} >\n        <Grid item xs={12} md={6} lg={4}>{weaponDoc}</Grid>\n        <Grid item xs={12} md={6} lg={4}>{artifactFields}</Grid>\n      </Grid>}\n    </Grid>\n  </Box>\n}\nexport default TabEquip\nfunction ArtSwapCard({ slotKey }: { slotKey: SlotKey }) {\n  const { character: { key: characterKey } } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <CardLight sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\n    <CardContent>\n      <Typography><SlotNameWithIcon slotKey={slotKey} /></Typography>\n    </CardContent>\n    <Divider />\n    <Box sx={{\n      flexGrow: 1,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }}\n    >\n      <ArtifactSwapModal slotKey={slotKey} show={show} onClose={onClose} onChangeId={id => database.setArtLocation(id, characterKey)} />\n      <Button onClick={onOpen} color=\"info\" sx={{ borderRadius: \"1em\", }}>\n        <SwapHoriz sx={{ height: 100, width: 100 }} />\n      </Button>\n    </Box>\n  </CardLight>\n}\nfunction WeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Tooltip title={<Typography>{t`tabEquip.swapWeapon`}</Typography>} placement=\"top\" arrow>\n      <Button color=\"info\" size=\"small\" onClick={onOpen} ><SwapHoriz /></Button>\n    </Tooltip>\n    <WeaponSwapModal weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, characterKey)} show={show} onClose={onClose} />\n  </>\n}\nfunction LargeWeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Button color=\"info\" onClick={onOpen} startIcon={<SwapHoriz />} >{t`tabEquip.swapWeapon`}</Button>\n    <WeaponSwapModal weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, characterKey)} show={show} onClose={onClose} />\n  </>\n}\nfunction ArtifactSwapButton({ slotKey }: { slotKey: SlotKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Tooltip title={<Typography>{t`tabEquip.swapArt`}</Typography>} placement=\"top\" arrow>\n      <Button color=\"info\" size=\"small\" onClick={onOpen} ><SwapHoriz /></Button>\n    </Tooltip>\n    <ArtifactSwapModal slotKey={slotKey} show={show} onClose={onClose} onChangeId={id => database.setArtLocation(id, characterKey)} />\n  </>\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BackgroundWorker.af0b638a.worker.js\");\n}\n","import { ButtonGroup, CardContent, Divider, MenuItem } from '@mui/material';\nimport React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ArtifactSetSingleAutocomplete } from '../../../../../Components/Artifact/ArtifactAutocomplete';\nimport SetEffectDisplay from '../../../../../Components/Artifact/SetEffectDisplay';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport DropdownButton from '../../../../../Components/DropdownMenu/DropdownButton';\nimport { ArtifactSheet } from '../../../../../Data/Artifacts/ArtifactSheet';\nimport usePromise from '../../../../../ReactHooks/usePromise';\nimport { allArtifactSets, ArtifactSetKey, SetNum } from '../../../../../Types/consts';\nimport { BuildSetting } from '../BuildSetting';\n\ntype PickerProps = {\n  index: number\n  setFilters: BuildSetting[\"setFilters\"],\n  disabled?: boolean,\n  onChange: (index: number, key: ArtifactSetKey | \"\", num: number) => void,\n}\n\nexport default function ArtifactSetPicker({ index, setFilters, onChange, disabled = false }: PickerProps) {\n  const { key: setKey, num: setNum } = setFilters[index]\n  const { t } = useTranslation(\"page_character\")\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const artifactSets = useMemo(() => {\n    if (!artifactSheets) return undefined\n    return allArtifactSets.filter(set => {\n      const setsNumArr = set ? Object.keys(artifactSheets[set].setEffects) : []\n      const artsAccountedOther = setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\n      if (setsNumArr.every((num: any) => parseInt(num) + artsAccountedOther > 5)) return false\n      return true\n    })\n  }, [artifactSheets, setFilters, index])\n\n  if (!artifactSets) return null\n\n  const artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\n\n  return <CardLight>\n    <ButtonGroup sx={{ width: \"100%\" }}>\n      {/* Artifact set */}\n      {artifactSheets && <ArtifactSetSingleAutocomplete\n        flattenCorners\n        showDefault\n        size=\"small\"\n        artSetKey={setKey}\n        setArtSetKey={setKey => onChange(index, setKey as ArtifactSetKey, parseInt(Object.keys(artifactSheets[setKey]?.setEffects ?? {})[0] as string) ?? 0)}\n        allArtSetKeys={artifactSets}\n        label={t(\"forceSet\")}\n        disabled={disabled}\n        sx={{ flexGrow: 1 }}\n        disable={(setKey) => setFilters.some(setFilter => setFilter.key === setKey)}\n        defaultText={t(\"none\")}\n      />}\n      {/* set number */}\n      <DropdownButton title={`${setNum}-set`}\n        disabled={disabled || !setKey || artsAccounted >= 5}\n        sx={{ borderRadius: 0 }}\n      >\n        {Object.keys(artifactSheets?.[setKey]?.setEffects ?? {}).map((num: any) => {\n          let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\n          return (parseInt(num) + artsAccountedOther <= 5) &&\n            (<MenuItem key={num} onClick={() => onChange(index, setFilters[index].key, parseInt(num) ?? 0)} >\n              {`${num}-set`}\n            </MenuItem>)\n        })}\n      </DropdownButton>\n    </ButtonGroup>\n    {!!setKey && <Divider />}\n    {!!setKey && <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n      {Object.keys(artifactSheets?.[setKey].setEffects ?? {}).map(setNKey => parseInt(setNKey as string) as SetNum).filter(setNkey => setNkey <= setNum).map(setNumKey =>\n        <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\n    </CardContent>}\n  </CardLight>\n}\n","import { MenuItem } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport DropdownButton from \"../../../../../Components/DropdownMenu/DropdownButton\"\n\nconst levels = [0, 4, 8, 12, 16, 20] as const\nexport default function AssumeFullLevelToggle({ mainStatAssumptionLevel = 0, setmainStatAssumptionLevel, disabled }) {\n  const { t } = useTranslation(\"page_character\")\n  return <DropdownButton fullWidth color={mainStatAssumptionLevel ? \"success\" : \"primary\"} disabled={disabled}\n    title={mainStatAssumptionLevel ? t(\"tabOptimize.assumptionLvl.lvl\", { lvl: mainStatAssumptionLevel }) : t(\"tabOptimize.assumptionLvl.no\")}>\n    {levels.map((lvl) => <MenuItem key={lvl} onClick={() => setmainStatAssumptionLevel(lvl)}>{lvl ? t(\"tabOptimize.assumptionLvl.lvl\", { lvl }) : t(\"tabOptimize.assumptionLvl.no\")}</MenuItem>)}\n  </DropdownButton>\n}\n","import { CardContent, Divider, Typography } from '@mui/material';\nimport { useContext } from 'react';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport { NodeFieldDisplay } from '../../../../../Components/FieldDisplay';\nimport { DataContext } from '../../../../../DataContext';\nimport { uiInput as input } from '../../../../../Formula';\nimport { NumNode } from '../../../../../Formula/type';\nexport default function BonusStatsCard() {\n  const { data, character } = useContext(DataContext)\n  const bonusStatsKeys = Object.keys(character?.bonusStats)\n  if (!bonusStatsKeys.length) return null\n  const nodes = bonusStatsKeys.map(k => data.get(input.customBonus[k] as NumNode))\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Typography>Bonus Stats</Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      {nodes.map(n => <NodeFieldDisplay key={n.info.key} node={n} />)}\n    </CardContent>\n  </CardLight>\n}\n","import { Alert, Grid, LinearProgress, styled, Typography } from '@mui/material';\nimport React, { ReactNode } from 'react';\nimport { timeStringMs } from '../../../../../Util/TimeUtil';\n\nexport const warningBuildNumber = 10000000\n\nconst Monospace = styled(\"strong\")({\n  fontFamily: \"monospace\"\n})\n\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\n  height: 10,\n  borderRadius: 5,\n}));\nexport default function BuildAlert({ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }) {\n  const totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\n  const totalUnskipped = totBuildNumber - generationSkipped\n  const generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\n  const generationSkippedString = generationSkipped?.toLocaleString() ?? generationSkipped\n  const totalUnskippedString = totalUnskipped?.toLocaleString() ?? totalUnskipped\n  const generationSkippedText = !!generationSkipped && <span>(<b>{generationSkippedString}</b> skipped)</span>\n\n  let color = \"success\" as \"success\" | \"warning\" | \"error\"\n  let title = \"\" as ReactNode\n  let subtitle = \"\" as ReactNode\n  let progress = undefined as undefined | number\n\n  if (generatingBuilds) {\n    progress = generationProgress * 100 / (totalUnskipped)\n    title = <Typography>Generating and testing <Monospace>{generationProgressString}/{totalUnskippedString}</Monospace> build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</Typography>\n    subtitle = <Typography>Time elapsed: <Monospace>{timeStringMs(Math.round(generationDuration))}</Monospace></Typography>\n  } else if (!generatingBuilds && generationProgress) {//done\n    progress = 100\n    title = <Typography>Generated and tested <Monospace>{totalUnskippedString}</Monospace> Build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</Typography>\n    subtitle = <Typography>Total duration: <Monospace>{timeStringMs(Math.round(generationDuration))}</Monospace></Typography>\n  } else {\n    if (totBuildNumber === 0) {\n      title = <Typography>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/include more Artifacts.</Typography>\n      color = \"error\"\n    } else if (totBuildNumber > warningBuildNumber) {\n      title = <Typography>Current configuration will generate <Monospace>{totalBuildNumberString}</Monospace> potential builds for <b>{characterName}</b>. This might take quite a while to generate...</Typography>\n      color = \"warning\"\n    } else\n      title = <Typography>Current configuration {totBuildNumber <= maxBuildsToShow ? \"generated\" : \"will generate\"} <Monospace>{totalBuildNumberString}</Monospace> builds for <b>{characterName}</b>.</Typography>\n  }\n\n  return <Alert severity={color} variant=\"filled\" sx={{\n    \"& .MuiAlert-message\": {\n      flexGrow: 1\n    }\n  }}>\n    {title && title}\n    {subtitle && subtitle}\n    {progress !== undefined && <Grid container spacing={1} alignItems=\"center\">\n      <Grid item>\n        <Typography>{`${progress.toFixed(1)}%`}</Typography>\n      </Grid>\n      <Grid item flexGrow={1} >\n        <BorderLinearProgress variant=\"determinate\" value={progress} color=\"primary\" />\n      </Grid>\n    </Grid>}\n  </Alert>\n}\n","import { CheckBox, CheckBoxOutlineBlank, Download, Info } from '@mui/icons-material';\nimport { Button, CardContent, Collapse, Divider, Grid, MenuItem, styled, Tooltip, Typography } from '@mui/material';\nimport { useContext, useMemo, useState } from 'react';\nimport { CartesianGrid, ComposedChart, Legend, Line, ResponsiveContainer, Scatter, XAxis, YAxis, ZAxis } from 'recharts';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport DropdownButton from '../../../../../Components/DropdownMenu/DropdownButton';\nimport { DataContext } from '../../../../../DataContext';\nimport { uiInput as input } from '../../../../../Formula';\nimport { NumNode } from '../../../../../Formula/type';\nimport KeyMap from '../../../../../KeyMap';\nimport { MainStatKey, SubstatKey } from '../../../../../Types/artifact';\nimport { ChartData } from '../background';\ntype ChartCardProps = {\n  chartData?: ChartData\n  plotBase: MainStatKey | SubstatKey | \"\",\n  setPlotBase: (key: MainStatKey | SubstatKey | \"\") => void\n  disabled?: boolean\n}\ntype Point = { x: number, y: number, min?: number }\nexport default function ChartCard({ chartData, plotBase, setPlotBase, disabled = false }: ChartCardProps) {\n  const [showDownload, setshowDownload] = useState(false)\n  const [showMin, setshowMin] = useState(true)\n  const { data } = useContext(DataContext)\n  const statKeys = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\n  statKeys.push(`${data.get(input.charEle).value}_dmg_`)\n\n  const { displayData, downloadData } = useMemo(() => {\n    if (!chartData) return { displayData: null, downloadData: null }\n    const points = chartData.data.map(({ value: y, plot: x }) => ({ x, y })) as Point[]\n    const increasingX: Point[] = points.sort((a, b) => a.x - b.x)\n    const minimumData: Point[] = []\n    for (const point of increasingX) {\n      let last: Point | undefined\n      while ((last = minimumData.pop())) {\n        if (last.y > point.y) {\n          minimumData.push(last)\n          break\n        }\n      }\n      minimumData.push(point)\n    }\n\n    // Note:\n    // We can also just use `minimumData` if the plotter supports multiple data sources.\n    // It could be faster too since there're no empty entries in `minimumData`.\n    if (minimumData[0]?.x !== increasingX[0]?.x)\n      increasingX[0].min = minimumData[0].y\n    minimumData.forEach(x => { x.min = x.y })\n\n    const downloadData = {\n      minimum: minimumData.map(({ x, y }) => [x, y]),\n      allData: increasingX.map(({ x, y }) => [x, y]),\n    }\n    return { displayData: increasingX, downloadData }\n  }, [chartData])\n\n  return <CardLight>\n    <CardContent>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h6\" >Optimization Target vs</Typography>\n        </Grid>\n        <Grid item>\n          <DropdownButton title={plotBase ? KeyMap.get(plotBase) : \"Not Selected\"}\n            color={plotBase ? \"success\" : \"primary\"}\n            disabled={disabled}\n          >\n            <MenuItem onClick={() => { setPlotBase(\"\") }}>Unselect</MenuItem>\n            <Divider />\n            {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { setPlotBase(sKey as any) }}>{KeyMap.get(sKey)}</MenuItem>)}\n          </DropdownButton>\n        </Grid>\n        <Grid item flexGrow={1}>\n          <Tooltip placement=\"top\" title=\"Using data from the builder, this will generate a graph to visualize Optimization Target vs. a selected stat. The graph will show the maximum Optimization Target value per 0.01 of the selected stat.\">\n            <Info />\n          </Tooltip>\n        </Grid>\n        {!!downloadData && <Grid item>\n          <Button startIcon={showMin ? <CheckBox /> : <CheckBoxOutlineBlank />}\n            color={showMin ? \"success\" : \"secondary\"}\n            onClick={() => setshowMin(!showMin)}>Show Min Stat Threshold</Button>\n        </Grid>}\n        {!!downloadData && <Grid item>\n          <Button color=\"info\" startIcon={<Download />} onClick={() => setshowDownload(!showDownload)}>Download Data</Button>\n        </Grid>}\n      </Grid>\n    </CardContent>\n    {!!displayData && <Divider />}\n    {chartData && !!displayData && <CardContent>\n      <Collapse in={!!downloadData && showDownload}>\n        <CardDark sx={{ mb: 2 }}>\n          <CardContent>\n            <Typography>Min Data</Typography>\n            <DataDisplay data={downloadData?.minimum} />\n            <Typography>All Data</Typography>\n            <DataDisplay data={downloadData?.allData} />\n          </CardContent>\n        </CardDark>\n      </Collapse>\n      <Chart displayData={displayData} plotNode={chartData.plotNode} valueNode={chartData.valueNode} showMin={showMin} />\n    </CardContent>}\n  </CardLight >\n}\nconst TextArea = styled(\"textarea\")({\n  width: \"100%\",\n  fontFamily: \"monospace\",\n  resize: \"vertical\",\n  minHeight: \"5em\"\n})\nfunction DataDisplay({ data, }: { data?: object }) {\n  return <TextArea readOnly value={JSON.stringify(data)} onClick={e => {\n    const target = e.target as HTMLTextAreaElement;\n    target.selectionStart = 0;\n    target.selectionEnd = target.value.length;\n  }} />\n}\nfunction Chart({ displayData, plotNode, valueNode, showMin }: {\n  displayData: Point[],\n  plotNode: NumNode,\n  valueNode: NumNode,\n  showMin: boolean\n}) {\n  const plotBaseUnit = KeyMap.unit(plotNode.info?.key)\n  const valueUnit = KeyMap.unit(valueNode.info?.key)\n  return <ResponsiveContainer width=\"100%\" height={600}>\n    <ComposedChart data={displayData}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"x\" scale=\"linear\" unit={plotBaseUnit} domain={[\"auto\", \"auto\"]} tick={{ fill: 'white' }} type=\"number\" tickFormatter={n => n > 10000 ? n.toFixed() : n.toFixed(1)} />\n      <YAxis name=\"DMG\" domain={[\"auto\", \"auto\"]} unit={valueUnit} allowDecimals={false} tick={{ fill: 'white' }} type=\"number\" />\n      <ZAxis dataKey=\"y\" range={[3, 25]} />\n      <Legend />\n      <Scatter name=\"Optimization Target\" dataKey=\"y\" fill=\"#8884d8\" line lineType=\"fitting\" isAnimationActive={false} />\n      {showMin && <Line name=\"Minimum Stat Requirement Threshold\" dataKey=\"min\" stroke=\"#ff7300\" type=\"stepBefore\" connectNulls strokeWidth={2} isAnimationActive={false} />}\n    </ComposedChart>\n  </ResponsiveContainer>\n}\n","import { Replay } from '@mui/icons-material';\nimport { Button, CardContent, Divider, Grid, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { artifactSlotIcon } from '../../../../../Components/Artifact/SlotNameWIthIcon';\nimport BootstrapTooltip from '../../../../../Components/BootstrapTooltip';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport StatIcon, { uncoloredEleIcons } from '../../../../../Components/StatIcon';\nimport Artifact from '../../../../../Data/Artifacts/Artifact';\nimport KeyMap from '../../../../../KeyMap';\nimport { MainStatKey } from '../../../../../Types/artifact';\nimport { allElementsWithPhy, SlotKey } from '../../../../../Types/consts';\nimport { BuildSetting } from '../BuildSetting';\n\nexport const artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"] as const\n\nexport default function MainStatSelectionCard({ mainStatKeys, onChangeMainStatKey, disabled = false, }: {\n  mainStatKeys: BuildSetting[\"mainStatKeys\"]\n  onChangeMainStatKey: (slotKey: SlotKey, mainStatKey?: MainStatKey) => void\n  disabled?: boolean\n}) {\n  const { t } = useTranslation(\"artifact\")\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n    {artifactsSlotsToSelectMainStats.map(slotKey => {\n      const numSel = mainStatKeys[slotKey].length\n      return <Box key={slotKey}>\n        <Divider />\n        <CardContent sx={{ pt: 1 }}>\n          <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\", pb: 1 }}>\n            <BootstrapTooltip placement=\"top\" title={<Typography>{t(`slotName.${slotKey}`)}</Typography>}>\n              <span>{artifactSlotIcon(slotKey)}</span>\n            </BootstrapTooltip>\n            <Box flexGrow={1}>\n              <SqBadge color=\"info\">{numSel ? `${numSel} Selected` : `Any`}</SqBadge>\n            </Box>\n            <Button color=\"error\" size=\"small\" disabled={!mainStatKeys[slotKey].length || disabled} sx={{ mt: -1, mb: -1 }}\n              onClick={() => onChangeMainStatKey(slotKey)}>\n              <Replay />\n            </Button>\n          </Box>\n          <Grid container spacing={1}>\n            {Artifact.slotMainStats(slotKey).map((mainStatKey, i) => {\n              const element = allElementsWithPhy.find(ele => mainStatKey.includes(ele))\n              const color = mainStatKeys[slotKey].includes(mainStatKey)\n                ? element ?? \"success\"\n                : \"secondary\"\n              return <Grid item key={mainStatKey} flexGrow={1} xs={i < 3 ? 4 : undefined} >\n                <BootstrapTooltip placement=\"top\" title={<Typography><strong>{KeyMap.getArtStr(mainStatKey)}</strong></Typography>} disableInteractive>\n                  <Button fullWidth size=\"small\" color={color} sx={{ fontSize: \"1.2em\", height: \"100%\", pointerEvents: disabled ? \"none\" : undefined, cursor: disabled ? \"none\" : undefined }}\n                    onClick={() => onChangeMainStatKey(slotKey, mainStatKey)}>\n                    {element ? uncoloredEleIcons[element] : StatIcon[mainStatKey]}\n                  </Button>\n                </BootstrapTooltip>\n              </Grid>\n            })}\n          </Grid>\n        </CardContent>\n      </Box>\n    })}\n  </Box >\n}\n","import useDBState from \"../../../../ReactHooks/useDBState\";\nimport { CharacterKey } from \"../../../../Types/consts\";\n\nexport const defThreads = navigator.hardwareConcurrency || 4\n\nexport function initialTabOptimizeDBState(): {\n  equipmentPriority: CharacterKey[],\n  threads: number,\n} {\n  return {\n    equipmentPriority: [],\n    threads: defThreads\n  }\n}\n\nexport function useOptimizeDBState() {\n  return useDBState(\"TabOptimize\", initialTabOptimizeDBState)\n}\n","import { Add, CheckBox, CheckBoxOutlineBlank, Close, KeyboardArrowDown, KeyboardArrowUp, KeyboardDoubleArrowDown, KeyboardDoubleArrowUp, Replay, Settings } from \"@mui/icons-material\";\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, Typography } from \"@mui/material\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport ArtifactCardPico from \"../../../../../Components/Artifact/ArtifactCardPico\";\nimport CardDark from \"../../../../../Components/Card/CardDark\";\nimport CardLight from \"../../../../../Components/Card/CardLight\";\nimport CharacterCardPico from \"../../../../../Components/Character/CharacterCardPico\";\nimport { CharacterSelectionModal } from \"../../../../../Components/Character/CharacterSelectionModal\";\nimport CloseButton from \"../../../../../Components/CloseButton\";\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../../../../../Components/CustomNumberInput\";\nimport ModalWrapper from \"../../../../../Components/ModalWrapper\";\nimport SqBadge from \"../../../../../Components/SqBadge\";\nimport WeaponCardPico from \"../../../../../Components/Weapon/WeaponCardPico\";\nimport { DatabaseContext } from \"../../../../../Database/Database\";\nimport { DataContext } from \"../../../../../DataContext\";\nimport useBoolState from \"../../../../../ReactHooks/useBoolState\";\nimport useCharacter from \"../../../../../ReactHooks/useCharacter\";\nimport { ICachedCharacter } from \"../../../../../Types/character\";\nimport { CharacterKey } from \"../../../../../Types/consts\";\nimport { useOptimizeDBState } from \"../DBState\";\n\nexport default function UseEquipped({ useEquippedArts, buildSettingsDispatch, disabled }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState(false)\n  const [{ equipmentPriority: tempEquipmentPriority }, setOptimizeDBState] = useOptimizeDBState()\n  //Basic validate for the equipmentPrio list to remove dups and characters that doesnt exist.\n  const equipmentPriority = useMemo(() => [...new Set(tempEquipmentPriority)].filter(ck => database._getChar(ck)), [database, tempEquipmentPriority])\n  const setPrio = useCallback((equipmentPriority: CharacterKey[]) => setOptimizeDBState({ equipmentPriority }), [setOptimizeDBState])\n\n  const setPrioRank = useCallback((fromIndex, toIndex) => {\n    const arr = [...equipmentPriority]\n    var element = arr[fromIndex];\n    arr.splice(fromIndex, 1);\n    arr.splice(toIndex, 0, element);\n    setPrio(arr)\n  }, [equipmentPriority, setPrio])\n  const removePrio = useCallback((fromIndex) => {\n    const arr = [...equipmentPriority]\n    arr.splice(fromIndex, 1)\n    setPrio(arr)\n  }, [equipmentPriority, setPrio])\n  const addPrio = useCallback((ck: CharacterKey) => setPrio([...equipmentPriority, ck]), [equipmentPriority, setPrio])\n  const resetPrio = useCallback(() => setPrio([]), [setPrio])\n\n  const numAbove = useMemo(() => {\n    let numAbove = equipmentPriority.length\n    const index = equipmentPriority.indexOf(characterKey)\n    if (index >= 0) numAbove = index\n    return numAbove\n  }, [characterKey, equipmentPriority])\n  const numUseEquippedChar = useMemo(() => {\n    return database._getCharKeys().length - 1 - numAbove\n  }, [numAbove, database])\n  const numUnlisted = useMemo(() => {\n    return database._getCharKeys().length - equipmentPriority.length\n  }, [equipmentPriority, database])\n\n  return <Box display=\"flex\" gap={1}>\n    <ModalWrapper open={show} onClose={onClose} containerProps={{ maxWidth: \"sm\" }}><CardDark>\n      <CardContent>\n        <Grid container spacing={1}>\n          <Grid item flexGrow={1}>\n            <Typography variant=\"h6\"><Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.title\">Character Priority for Equipped Artifacts</Trans></Typography>\n          </Grid>\n          <Grid item sx={{ mb: -1 }}>\n            <CloseButton onClick={onClose} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <CardLight sx={{ mb: 1 }}>\n          <CardContent>\n            <Typography gutterBottom><Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.desc1\">When generating a build, the Optimizer will only consider equipped artifacts from characters below the current character or those not on the list.</Trans></Typography>\n            <Typography gutterBottom><Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.desc2\">If the current character is not on the list, the Optimizer will only consider equipped artifacts from others characters that are not on the list.</Trans></Typography>\n          </CardContent>\n        </CardLight>\n        <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n          {equipmentPriority.map((ck, i) =>\n            <SelectItem key={ck} characterKey={ck} rank={i + 1} maxRank={equipmentPriority.length} setRank={(num) => num && setPrioRank(i, num - 1)} onRemove={() => removePrio(i)} numAbove={numAbove} />)}\n          <Box sx={{ display: \"flex\", gap: 1 }}>\n            <NewItem onAdd={addPrio} list={equipmentPriority} />\n            <Button color=\"error\" onClick={resetPrio} startIcon={<Replay />}><Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.clearList\">Clear List</Trans></Button>\n          </Box>\n          {!!numUseEquippedChar && <SqBadge color=\"success\"><Typography><Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.usingNum\" count={numUnlisted}>Using artifacts from <strong>{{ count: numUnlisted }}</strong> unlisted characters</Trans></Typography></SqBadge>}\n        </Box>\n      </CardContent>\n    </CardDark ></ModalWrapper>\n    <ButtonGroup sx={{ display: \"flex\", width: \"100%\" }}>\n      <Button sx={{ flexGrow: 1 }} onClick={() => buildSettingsDispatch({ useEquippedArts: !useEquippedArts })} disabled={disabled} startIcon={useEquippedArts ? <CheckBox /> : <CheckBoxOutlineBlank />} color={useEquippedArts ? \"success\" : \"secondary\"}>\n        <Box>\n          <span><Trans t={t} i18nKey=\"tabOptimize.useEquipped.title\">Use Equipped Artifacts</Trans></span>\n          {useEquippedArts && <SqBadge><Trans t={t} i18nKey=\"tabOptimize.useEquipped.usingNum\" count={numUseEquippedChar}>Using from <strong>{{ count: numUseEquippedChar }}</strong> characters</Trans></SqBadge>}\n        </Box>\n      </Button>\n      {useEquippedArts && <Button sx={{ flexShrink: 1 }} color=\"info\" onClick={onOpen}><Settings /></Button>}\n    </ButtonGroup>\n  </Box>\n}\n\nconst itemSize = 60\nfunction SelectItem({ characterKey, rank, maxRank, setRank, onRemove, numAbove }: {\n  characterKey: CharacterKey,\n  rank: number,\n  maxRank: number,\n  setRank: (r: number | undefined) => void,\n  onRemove: () => void,\n  numAbove: number,\n}) {\n  const { t } = useTranslation(\"page_character\")\n  const { database } = useContext(DatabaseContext)\n  const character = useCharacter(characterKey)\n  if (!character) return null\n  const { equippedWeapon, equippedArtifacts } = character\n  return <CardLight sx={{ p: 1 }}  >\n    <Box sx={{ pb: 1, display: \"flex\", justifyContent: \"space-between\", gap: 1 }}>\n      <SqBadge color=\"info\">\n        <Typography>#{rank}</Typography>\n      </SqBadge>\n      <SqBadge sx={{ flexGrow: 1 }} color={numAbove === (rank - 1) ? \"warning\" : (rank - 1) < numAbove ? \"error\" : \"success\"}>\n        <Typography>{numAbove === (rank - 1) ? <Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.status.curr\">Current character</Trans>\n          : (rank - 1) < numAbove ? <Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.status.dont\">Don't Use artifacts</Trans> :\n            <Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.status.use\">Use artifacts</Trans>}</Typography>\n      </SqBadge>\n      <Box>\n        <ButtonGroup sx={{ flexGrow: 1 }} size=\"small\">\n          <CustomNumberInputButtonGroupWrapper >\n            <CustomNumberInput onChange={setRank} value={rank}\n              // startAdornment=\"Rank:\"\n              inputProps={{ min: 1, max: maxRank, sx: { textAlign: \"center\" } }}\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }} />\n          </CustomNumberInputButtonGroupWrapper>\n          <Button disabled={rank === 1} onClick={() => setRank(1)} >\n            <KeyboardDoubleArrowUp />\n          </Button>\n          <Button disabled={rank === 1} onClick={() => setRank(rank - 1)}  >\n            <KeyboardArrowUp />\n          </Button>\n          <Button disabled={rank === maxRank} onClick={() => setRank(rank + 1)}  >\n            <KeyboardArrowDown />\n          </Button>\n          <Button disabled={rank === maxRank} onClick={() => setRank(maxRank)}  >\n            <KeyboardDoubleArrowDown />\n          </Button>\n          <Button color=\"error\" onClick={onRemove}>\n            <Close />\n          </Button>\n        </ButtonGroup>\n      </Box>\n    </Box>\n    <Grid container columns={7} spacing={1}>\n      <Grid item xs={1} >\n        <CharacterCardPico characterKey={characterKey} />\n      </Grid>\n      <Grid item xs={1}><WeaponCardPico weaponId={equippedWeapon} /></Grid>\n      {Object.entries(equippedArtifacts).map(([slotKey, aId]) => <Grid item xs={1} key={slotKey} ><ArtifactCardPico slotKey={slotKey} artifactObj={database._getArt(aId)} /></Grid>)}\n    </Grid>\n\n  </CardLight>\n}\nfunction NewItem({ onAdd, list }: { onAdd: (ck: CharacterKey) => void, list: CharacterKey[] }) {\n  const { t } = useTranslation(\"page_character\")\n  const [show, onOpen, onClose] = useBoolState(false)\n  const filter = useCallback((char?: ICachedCharacter) => {\n    if (!char) return false\n    return !list.includes(char.key)\n  }, [list])\n  return <>\n    <CharacterSelectionModal show={show} onHide={onClose} onSelect={onAdd} filter={filter} />\n    <Button fullWidth sx={{ height: itemSize }} color=\"info\" onClick={onOpen} startIcon={<Add />} >\n      <Trans t={t} i18nKey=\"tabOptimize.useEquipped.modal.add\">Add character to list</Trans>\n    </Button>\n  </>\n}\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\nimport { Box, Button } from \"@mui/material\";\nimport { useContext, useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport SqBadge from \"../../../../../Components/SqBadge\";\nimport { DatabaseContext } from \"../../../../../Database/Database\";\n\nexport default function UseExcluded({ buildSettingsDispatch, useExcludedArts, disabled, artsDirty }) {\n  const { t } = useTranslation(\"page_character\")\n  const { database } = useContext(DatabaseContext)\n  const numExcludedArt = useMemo(() => artsDirty && database._getArts().reduce((a, art) => a + (art.exclude ? 1 : 0), 0), [database, artsDirty])\n  return <Button fullWidth onClick={() => buildSettingsDispatch({ useExcludedArts: !useExcludedArts })} disabled={!numExcludedArt || disabled} startIcon={useExcludedArts ? <CheckBox /> : <CheckBoxOutlineBlank />} color={useExcludedArts ? \"success\" : \"secondary\"}>\n    <Box>\n      <span><Trans t={t} i18nKey=\"tabOptimize.useExcluded.title\" count={numExcludedArt}>Use Excluded Artifacts</Trans></span>\n      {useExcludedArts && <SqBadge><Trans t={t} i18nKey=\"tabOptimize.useExcluded.usingNum\" count={numExcludedArt}>Using <strong>{{ count: numExcludedArt }}</strong> excluded artifacts</Trans></SqBadge>}\n    </Box>\n  </Button>\n}\n","import { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Close } from '@mui/icons-material';\nimport { Alert, Box, Button, ButtonGroup, CardContent, Divider, Grid, Link, MenuItem, Skeleton, ToggleButton, Typography } from '@mui/material';\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// eslint-disable-next-line\nimport Worker from \"worker-loader!./BackgroundWorker\";\nimport ArtifactLevelSlider from '../../../../Components/Artifact/ArtifactLevelSlider';\nimport BootstrapTooltip from '../../../../Components/BootstrapTooltip';\nimport CardLight from '../../../../Components/Card/CardLight';\nimport CharacterCard from '../../../../Components/Character/CharacterCard';\nimport DropdownButton from '../../../../Components/DropdownMenu/DropdownButton';\nimport { HitModeToggle, ReactionToggle } from '../../../../Components/HitModeEditor';\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup';\nimport StatFilterCard from '../../../../Components/StatFilterCard';\nimport CharacterSheet from '../../../../Data/Characters/CharacterSheet';\nimport { DatabaseContext } from '../../../../Database/Database';\nimport { DataContext, dataContextObj } from '../../../../DataContext';\nimport { mergeData, uiDataForTeam } from '../../../../Formula/api';\nimport { uiInput as input } from '../../../../Formula/index';\nimport { optimize } from '../../../../Formula/optimization';\nimport { NumNode } from '../../../../Formula/type';\nimport { UIData } from '../../../../Formula/uiData';\nimport { initGlobalSettings } from '../../../../GlobalSettings';\nimport KeyMap from '../../../../KeyMap';\nimport useCharacterReducer, { characterReducerAction } from '../../../../ReactHooks/useCharacterReducer';\nimport useDBState from '../../../../ReactHooks/useDBState';\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate';\nimport useTeamData, { getTeamData } from '../../../../ReactHooks/useTeamData';\nimport { ICachedArtifact, MainStatKey } from '../../../../Types/artifact';\nimport { ICachedCharacter } from '../../../../Types/character';\nimport { ArtifactSetKey, CharacterKey, SlotKey } from '../../../../Types/consts';\nimport { objPathValue, range } from '../../../../Util/Util';\nimport { Build, ChartData, Finalize, FinalizeResult, Request, Setup, WorkerResult } from './background';\nimport { maxBuildsToShowList } from './Build';\nimport { buildSettingsReducer, initialBuildSettings } from './BuildSetting';\nimport { countBuilds, filterArts, mergeBuilds, mergePlot, pruneAll } from './common';\nimport ArtifactSetConditional from './Components/ArtifactSetConditional';\nimport ArtifactSetPicker from './Components/ArtifactSetPicker';\nimport AssumeFullLevelToggle from './Components/AssumeFullLevelToggle';\nimport BonusStatsCard from './Components/BonusStatsCard';\nimport BuildAlert, { warningBuildNumber } from './Components/BuildAlert';\nimport BuildDisplayItem from './Components/BuildDisplayItem';\nimport ChartCard from './Components/ChartCard';\nimport MainStatSelectionCard from './Components/MainStatSelectionCard';\nimport OptimizationTargetSelector from './Components/OptimizationTargetSelector';\nimport UseEquipped from './Components/UseEquipped';\nimport UseExcluded from './Components/UseExcluded';\nimport { defThreads, useOptimizeDBState } from './DBState';\nimport { artSetPerm, compactArtifacts, dynamicData, splitFiltersBySet } from './foreground';\nimport { polyDebug } from '../../../../Formula/expandPoly'\n\nexport default function TabBuild() {\n  const { character, character: { key: characterKey } } = useContext(DataContext)\n  const [{ tcMode }] = useDBState(\"GlobalSettings\", initGlobalSettings)\n  const { database } = useContext(DatabaseContext)\n\n  const [generatingBuilds, setgeneratingBuilds] = useState(false)\n  const [generationProgress, setgenerationProgress] = useState(0)\n  const [generationDuration, setgenerationDuration] = useState(0)//in ms\n  const [generationSkipped, setgenerationSkipped] = useState(0)\n\n  const [chartData, setchartData] = useState(undefined as ChartData | undefined)\n\n  const [artsDirty, setArtsDirty] = useForceUpdate()\n\n  const [{ equipmentPriority, threads = defThreads }, setOptimizeDBState] = useOptimizeDBState()\n  const maxWorkers = threads > defThreads ? defThreads : threads\n  const setMaxWorkers = useCallback(threads => setOptimizeDBState({ threads }), [setOptimizeDBState],)\n\n  const characterDispatch = useCharacterReducer(characterKey)\n  const buildSettings = character?.buildSettings ?? initialBuildSettings()\n  const { plotBase, setFilters, statFilters, mainStatKeys, optimizationTarget, mainStatAssumptionLevel, useExcludedArts, useEquippedArts, builds, buildDate, maxBuildsToShow, levelLow, levelHigh } = buildSettings\n  const buildsArts = useMemo(() => builds.map(build => build.map(i => database._getArt(i)!)), [builds, database])\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { characterSheet, target: data } = teamData?.[characterKey as CharacterKey] ?? {}\n  const compareData = character?.compareData ?? false\n\n  const noArtifact = useMemo(() => !database._getArts().length, [database])\n\n  const buildSettingsDispatch = useCallback((action) =>\n    characterDispatch && characterDispatch({ buildSettings: buildSettingsReducer(buildSettings, action) })\n    , [characterDispatch, buildSettings])\n\n  const onChangeMainStatKey = useCallback((slotKey: SlotKey, mainStatKey?: MainStatKey) => {\n    if (mainStatKey === undefined) buildSettingsDispatch({ type: \"mainStatKeyReset\", slotKey })\n    else buildSettingsDispatch({ type: \"mainStatKey\", slotKey, mainStatKey })\n  }, [buildSettingsDispatch])\n\n  //register changes in artifact database\n  useEffect(() =>\n    database.followAnyArt(setArtsDirty),\n    [setArtsDirty, database])\n\n  const { split, setPerms, totBuildNumber } = useMemo(() => {\n    if (!characterKey) // Make sure we have all slotKeys\n      return { totBuildNumber: 0 }\n    let cantTakeList: CharacterKey[] = []\n    if (useEquippedArts) {\n      const index = equipmentPriority.indexOf(characterKey)\n      if (index < 0) cantTakeList = [...equipmentPriority]\n      else cantTakeList = equipmentPriority.slice(0, index)\n    }\n    const arts = database._getArts().filter(art => {\n      if (art.level < levelLow) return false\n      if (art.level > levelHigh) return false\n      const mainStats = mainStatKeys[art.slotKey]\n      if (mainStats?.length && !mainStats.includes(art.mainStatKey)) return false\n\n      // If its equipped on the selected character, bypass the check\n      if (art.location === characterKey) return true\n\n      if (art.exclude && !useExcludedArts) return false\n      if (art.location && !useEquippedArts) return false\n      if (art.location && useEquippedArts && cantTakeList.includes(art.location)) return false\n      return true\n    })\n    const split = compactArtifacts(arts, mainStatAssumptionLevel)\n    const setPerms = [...artSetPerm([setFilters.map(({ key, num }) => ({ key, min: num }))])]\n    const totBuildNumber = [...setPerms].map(perm => countBuilds(filterArts(split, perm))).reduce((a, b) => a + b, 0)\n    return artsDirty && { split, setPerms, totBuildNumber }\n  }, [characterKey, useExcludedArts, useEquippedArts, equipmentPriority, mainStatKeys, setFilters, levelLow, levelHigh, artsDirty, database, mainStatAssumptionLevel])\n\n  // Reset the Alert by setting progress to zero.\n  useEffect(() => {\n    setgenerationProgress(0)\n  }, [totBuildNumber])\n\n  // Provides a function to cancel the work\n  const cancelToken = useRef(() => { })\n  //terminate worker when component unmounts\n  useEffect(() => () => cancelToken.current(), [])\n  const generateBuilds = useCallback(async () => {\n    if (!characterKey || !optimizationTarget || !split || !setPerms) return\n    const teamData = await getTeamData(database, characterKey, mainStatAssumptionLevel, [])\n    if (!teamData) return\n    const workerData = uiDataForTeam(teamData.teamData, characterKey)[characterKey as CharacterKey]?.target.data![0]\n    if (!workerData) return\n    Object.assign(workerData, mergeData([workerData, dynamicData])) // Mark art fields as dynamic\n    let optimizationTargetNode = objPathValue(workerData.display ?? {}, optimizationTarget) as NumNode | undefined\n    if (!optimizationTargetNode) return\n    const targetNode = optimizationTargetNode\n    const valueFilter: { value: NumNode, minimum: number }[] = Object.entries(statFilters).map(([key, value]) => {\n      if (key.endsWith(\"_\")) value = value / 100 // TODO: Conversion\n      return { value: input.total[key], minimum: value }\n    }).filter(x => x.value && x.minimum > -Infinity)\n\n    const t1 = performance.now()\n    setgeneratingBuilds(true)\n    setchartData(undefined)\n    setgenerationDuration(0)\n    setgenerationProgress(0)\n    setgenerationSkipped(0)\n\n    const cancelled = new Promise<void>(r => cancelToken.current = r)\n\n    let nodes = [...valueFilter.map(x => x.value), optimizationTargetNode], arts = split!\n    const origCount = totBuildNumber, minimum = [...valueFilter.map(x => x.minimum), -Infinity]\n    if (plotBase) {\n      nodes.push(input.total[plotBase])\n      minimum.push(-Infinity)\n    }\n\n    nodes = optimize(nodes, workerData, ({ path: [p] }) => p !== \"dyn\");\n    ({ nodes, arts } = pruneAll(nodes, minimum, arts, maxBuildsToShow,\n      new Set(setFilters.map(x => x.key as ArtifactSetKey)), {\n      reaffine: true, pruneArtRange: true, pruneNodeRange: true, pruneOrder: true\n    }))\n    // Can be further folded after pruning\n    nodes = optimize(nodes, workerData, ({ path: [p] }) => p !== \"dyn\");\n\n    const plotBaseNode = plotBase ? nodes.pop() : undefined\n    optimizationTargetNode = nodes.pop()!\n\n    // polyDebug(optimizationTargetNode, arts)\n    // console.log(arts)\n\n    let wrap = {\n      buildCount: 0, failedCount: 0, skippedCount: origCount,\n      buildValues: Array(maxBuildsToShow).fill(0).map(_ => -Infinity)\n    }\n    setPerms.forEach(filter => wrap.skippedCount -= countBuilds(filterArts(arts, filter)))\n\n    const setPerm = splitFiltersBySet(arts, setPerms,\n      maxWorkers === 1\n        // Don't split for single worker\n        ? Infinity\n        // 8 perms / worker, up to 1M builds / perm\n        : Math.min(origCount / maxWorkers / 4, 1_000_000))[Symbol.iterator]()\n\n    function fetchWork(): Request | undefined {\n      const { done, value } = setPerm.next()\n      return done ? undefined : {\n        command: \"request\",\n        threshold: wrap.buildValues[maxBuildsToShow - 1], filter: value,\n      }\n    }\n\n    const filters = nodes\n      .map((value, i) => ({ value, min: minimum[i] }))\n      .filter(x => x.min > -Infinity)\n\n    const finalizedList: Promise<FinalizeResult>[] = []\n    for (let i = 0; i < maxWorkers; i++) {\n      const worker = new Worker()\n\n      const setup: Setup = {\n        command: \"setup\",\n        id: `${i}`,\n        arts,\n        optimizationTarget: optimizationTargetNode,\n        plotBase: plotBaseNode,\n        maxBuilds: maxBuildsToShow,\n        filters\n      }\n      worker.postMessage(setup, undefined)\n      let finalize: (_: FinalizeResult) => void\n      const finalized = new Promise<FinalizeResult>(r => finalize = r)\n      worker.onmessage = async ({ data }: { data: WorkerResult }) => {\n        switch (data.command) {\n          case \"interim\":\n            wrap.buildCount += data.buildCount\n            wrap.failedCount += data.failedCount\n            wrap.skippedCount += data.skippedCount\n            if (data.buildValues) {\n              wrap.buildValues.push(...data.buildValues)\n              wrap.buildValues.sort((a, b) => b - a).splice(maxBuildsToShow)\n            }\n            break\n          case \"request\":\n            const work = fetchWork()\n            if (work) {\n              worker.postMessage(work)\n            } else {\n              const finalizeCommand: Finalize = { command: \"finalize\" }\n              worker.postMessage(finalizeCommand)\n            }\n            break\n          case \"finalize\":\n            worker.terminate()\n            finalize(data);\n            break\n          default: console.log(\"DEBUG\", data)\n        }\n      }\n\n      cancelled.then(() => worker.terminate())\n      finalizedList.push(finalized)\n    }\n\n    const buildTimer = setInterval(() => {\n      setgenerationProgress(wrap.buildCount)\n      setgenerationSkipped(wrap.skippedCount)\n      setgenerationDuration(performance.now() - t1)\n    }, 100)\n    const results = await Promise.any([Promise.all(finalizedList), cancelled])\n    clearInterval(buildTimer)\n    cancelToken.current = () => { }\n\n    if (!results) {\n      setgenerationDuration(0)\n      setgenerationProgress(0)\n      setgenerationSkipped(0)\n    } else {\n      if (plotBase) {\n        const plotData = mergePlot(results.map(x => x.plotData!))\n        const plotBaseNode = input.total[plotBase] as NumNode\n        let data = Object.values(plotData)\n        if (KeyMap.unit(targetNode.info?.key) === \"%\")\n          data = data.map(({ value, plot }) => ({ value: value * 100, plot })) as Build[]\n        if (KeyMap.unit(plotBaseNode!.info?.key) === \"%\")\n          data = data.map(({ value, plot }) => ({ value, plot: (plot ?? 0) * 100 })) as Build[]\n        setchartData({\n          valueNode: targetNode,\n          plotNode: plotBaseNode,\n          data\n        })\n      }\n      const builds = mergeBuilds(results.map(x => x.builds), maxBuildsToShow)\n      if (process.env.NODE_ENV === \"development\") console.log(\"Build Result\", builds)\n      buildSettingsDispatch({ builds: builds.map(build => build.artifactIds), buildDate: Date.now() })\n      const totalDuration = performance.now() - t1\n\n      setgenerationProgress(wrap.buildCount)\n      setgenerationSkipped(wrap.skippedCount)\n      setgenerationDuration(totalDuration)\n    }\n    setgeneratingBuilds(false)\n  }, [characterKey, database, totBuildNumber, mainStatAssumptionLevel, maxBuildsToShow, optimizationTarget, plotBase, setPerms, split, buildSettingsDispatch, setFilters, statFilters, maxWorkers])\n\n  const characterName = characterSheet?.name ?? \"Character Name\"\n\n  const setPlotBase = useCallback(plotBase => {\n    buildSettingsDispatch({ plotBase })\n    setchartData(undefined)\n  }, [buildSettingsDispatch])\n  const dataContext: dataContextObj | undefined = useMemo(() => {\n    return data && characterSheet && character && teamData && {\n      data,\n      characterSheet,\n      character,\n      mainStatAssumptionLevel,\n      teamData,\n      characterDispatch\n    }\n  }, [data, characterSheet, character, teamData, characterDispatch, mainStatAssumptionLevel])\n\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n    {noArtifact && <Alert severity=\"warning\" variant=\"filled\"> Opps! It looks like you haven't added any artifacts to GO yet! You should go to the <Link component={RouterLink} to=\"/artifact\">Artifacts</Link> page and add some!</Alert>}\n    {/* Build Generator Editor */}\n    {dataContext && <DataContext.Provider value={dataContext}>\n\n      <Grid container spacing={1} >\n        {/* 1*/}\n        <Grid item xs={12} sm={6} lg={3} display=\"flex\" flexDirection=\"column\" gap={1}>\n          {/* character card */}\n          <Box><CharacterCard characterKey={characterKey} /></Box>\n        </Grid>\n\n        {/* 2 */}\n        <Grid item xs={12} sm={6} lg={3}>\n          <CardLight>\n            <CardContent  >\n              <Typography gutterBottom>Main Stat</Typography>\n              <BootstrapTooltip placement=\"top\" title={<Typography><strong>Level Assumption</strong> changes mainstat value to be at least a specific level. Does not change substats.</Typography>}>\n                <Box>\n                  <AssumeFullLevelToggle mainStatAssumptionLevel={mainStatAssumptionLevel} setmainStatAssumptionLevel={mainStatAssumptionLevel => buildSettingsDispatch({ mainStatAssumptionLevel })} disabled={generatingBuilds} />\n                </Box>\n              </BootstrapTooltip>\n            </CardContent>\n            {/* main stat selector */}\n            <MainStatSelectionCard\n              mainStatKeys={mainStatKeys}\n              onChangeMainStatKey={onChangeMainStatKey}\n              disabled={generatingBuilds}\n            />\n          </CardLight>\n        </Grid>\n\n        {/* 3 */}\n        <Grid item xs={12} sm={6} lg={3} display=\"flex\" flexDirection=\"column\" gap={1}>\n\n          {/*Minimum Final Stat Filter */}\n          <StatFilterCard statFilters={statFilters} setStatFilters={sFs => buildSettingsDispatch({ statFilters: sFs })} disabled={generatingBuilds} />\n\n          <BonusStatsCard />\n\n          {/* use excluded */}\n          <UseExcluded disabled={generatingBuilds} useExcludedArts={useExcludedArts} buildSettingsDispatch={buildSettingsDispatch} artsDirty={artsDirty} />\n\n          {/* use equipped */}\n          <UseEquipped disabled={generatingBuilds} useEquippedArts={useEquippedArts} buildSettingsDispatch={buildSettingsDispatch} />\n\n          { /* Level Filter */}\n          <CardLight>\n            <CardContent sx={{ py: 1 }}>\n              Artifact Level Filter\n            </CardContent>\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\n              setLow={levelLow => buildSettingsDispatch({ levelLow })}\n              setHigh={levelHigh => buildSettingsDispatch({ levelHigh })}\n              setBoth={(levelLow, levelHigh) => buildSettingsDispatch({ levelLow, levelHigh })}\n              disabled={generatingBuilds}\n            />\n          </CardLight>\n        </Grid>\n\n        {/* 4 */}\n        <Grid item xs={12} sm={6} lg={3} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <ArtifactSetConditional disabled={generatingBuilds} />\n\n          {/* Artifact set pickers */}\n          {setFilters.map((setFilter, index) => (index <= setFilters.filter(s => s.key).length) && <ArtifactSetPicker key={index} index={index} setFilters={setFilters}\n            disabled={generatingBuilds} onChange={(index, key, num) => buildSettingsDispatch({ type: 'setFilter', index, key, num })} />)}\n        </Grid>\n\n      </Grid>\n      {/* Footer */}\n      <Grid container spacing={1}>\n        <Grid item flexGrow={1} >\n          <ButtonGroup>\n            <Button\n              disabled={!characterKey || generatingBuilds || !optimizationTarget || !totBuildNumber || !objPathValue(data?.getDisplay(), optimizationTarget)}\n              color={(characterKey && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\n              onClick={generateBuilds}\n              startIcon={<FontAwesomeIcon icon={faCalculator} />}\n            >Generate Builds</Button>\n            <DropdownButton disabled={generatingBuilds || !characterKey}\n              title={<span><b>{maxBuildsToShow}</b> {maxBuildsToShow === 1 ? \"Build\" : \"Builds\"}</span>}>\n              <MenuItem>\n                <Typography variant=\"caption\" color=\"info.main\">\n                  Decreasing the number of generated build will decrease build calculation time for large number of builds.\n                </Typography>\n              </MenuItem>\n              <Divider />\n              {maxBuildsToShowList.map(v => <MenuItem key={v}\n                onClick={() => buildSettingsDispatch({ maxBuildsToShow: v })}>{v} {v === 1 ? \"Build\" : \"Builds\"}</MenuItem>)}\n            </DropdownButton>\n            <DropdownButton disabled={generatingBuilds || !characterKey}\n              title={<span><b>{maxWorkers}</b> {maxWorkers === 1 ? \"Thread\" : \"Threads\"}</span>}>\n              <MenuItem>\n                <Typography variant=\"caption\" color=\"info.main\">\n                  Increasing the number of threads will speed up build time, but will use more CPU power.\n                </Typography>\n              </MenuItem>\n              <Divider />\n              {range(1, defThreads).reverse().map(v => <MenuItem key={v}\n                onClick={() => setMaxWorkers(v)}>{v} {v === 1 ? \"Thread\" : \"Threads\"}</MenuItem>)}\n            </DropdownButton>\n            <Button\n              disabled={!generatingBuilds}\n              color=\"error\"\n              onClick={() => cancelToken.current()}\n              startIcon={<Close />}\n            >Cancel</Button>\n          </ButtonGroup>\n        </Grid>\n        <Grid item>\n          <span>Optimization Target: </span>\n          {<OptimizationTargetSelector\n            optimizationTarget={optimizationTarget}\n            setTarget={target => buildSettingsDispatch({ optimizationTarget: target })}\n            disabled={!!generatingBuilds}\n          />}\n        </Grid>\n      </Grid>\n\n      {!!characterKey && <Box >\n        <BuildAlert {...{ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }} />\n      </Box>}\n      {tcMode && <Box >\n        <ChartCard disabled={generatingBuilds} chartData={chartData} plotBase={plotBase} setPlotBase={setPlotBase} />\n      </Box>}\n      <CardLight>\n        <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1} >\n            <Typography sx={{ flexGrow: 1 }}>\n              {builds ? <span>Showing <strong>{builds.length}</strong> Builds generated for {characterName}. {!!buildDate && <span>Build generated on: <strong>{(new Date(buildDate)).toLocaleString()}</strong></span>}</span>\n                : <span>Select a character to generate builds.</span>}\n            </Typography>\n            <Button disabled={!builds.length} color=\"error\" onClick={() => buildSettingsDispatch({ builds: [], buildDate: 0 })} >Clear Builds</Button>\n          </Box>\n          <Grid container display=\"flex\" spacing={1}>\n            <Grid item><HitModeToggle size=\"small\" /></Grid>\n            <Grid item><ReactionToggle size=\"small\" /></Grid>\n            <Grid item flexGrow={1} />\n            <Grid item><SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\n              <ToggleButton value={false} disabled={!compareData}>\n                <small>Show New artifact Stats</small>\n              </ToggleButton>\n              <ToggleButton value={true} disabled={compareData}>\n                <small>Compare against equipped artifacts</small>\n              </ToggleButton>\n            </SolidToggleButtonGroup></Grid>\n          </Grid>\n        </CardContent>\n      </CardLight>\n      <BuildList {...{ buildsArts, character, characterKey, characterSheet, data, compareData, mainStatAssumptionLevel, characterDispatch, disabled: !!generatingBuilds }} />\n    </DataContext.Provider>}\n  </Box>\n}\nfunction BuildList({ buildsArts, character, characterKey, characterSheet, data, compareData, mainStatAssumptionLevel, characterDispatch, disabled }: {\n  buildsArts: ICachedArtifact[][],\n  character?: ICachedCharacter,\n  characterKey?: \"\" | CharacterKey,\n  characterSheet?: CharacterSheet,\n  data?: UIData,\n  compareData: boolean,\n  mainStatAssumptionLevel: number,\n  characterDispatch: (action: characterReducerAction) => void\n  disabled: boolean,\n}) {\n  // Memoize the build list because calculating/rendering the build list is actually very expensive, which will cause longer optimization times.\n  const list = useMemo(() => <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n    {buildsArts?.map((build, index) => character && characterKey && characterSheet && data && <DataContextWrapper\n      key={index + build.join()}\n      characterKey={characterKey}\n      character={character}\n      build={build}\n      characterSheet={characterSheet}\n      oldData={data}\n      mainStatAssumptionLevel={mainStatAssumptionLevel}\n      characterDispatch={characterDispatch} >\n      <BuildDisplayItem index={index} compareBuild={compareData} disabled={disabled} />\n    </DataContextWrapper>\n    )}\n  </Suspense>, [buildsArts, character, characterKey, characterSheet, data, compareData, mainStatAssumptionLevel, characterDispatch, disabled])\n  return list\n}\n\ntype Prop = {\n  children: React.ReactNode\n  characterKey: CharacterKey,\n  character: ICachedCharacter,\n  build: ICachedArtifact[],\n  mainStatAssumptionLevel?: number, characterSheet: CharacterSheet, oldData: UIData,\n  characterDispatch: (action: characterReducerAction) => void\n}\nfunction DataContextWrapper({ children, characterKey, character, build, characterDispatch, mainStatAssumptionLevel = 0, characterSheet, oldData }: Prop) {\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel, build)\n  if (!teamData) return null\n  return <DataContext.Provider value={{ characterSheet, character, characterDispatch, mainStatAssumptionLevel, data: teamData[characterKey]!.target, teamData, oldData }}>\n    {children}\n  </DataContext.Provider>\n}\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Favorite, FavoriteBorder } from \"@mui/icons-material\";\nimport { Badge, Box, Button, CardActionArea, CardContent, Divider, Grid, IconButton, Typography } from \"@mui/material\";\nimport React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport Assets from \"../../../Assets/Assets\";\nimport ArtifactCardNano from \"../../../Components/Artifact/ArtifactCardNano\";\nimport CardLight from \"../../../Components/Card/CardLight\";\nimport ColorText from \"../../../Components/ColoredText\";\nimport { NodeFieldDisplay } from \"../../../Components/FieldDisplay\";\nimport ImgIcon from \"../../../Components/Image/ImgIcon\";\nimport { Stars } from \"../../../Components/StarDisplay\";\nimport StatIcon from \"../../../Components/StatIcon\";\nimport WeaponCardNano from \"../../../Components/Weapon/WeaponCardNano\";\nimport CharacterSheet from \"../../../Data/Characters/CharacterSheet\";\nimport { DataContext } from \"../../../DataContext\";\nimport { uiInput as input } from \"../../../Formula\";\nimport { ReadNode } from \"../../../Formula/type\";\nimport KeyMap, { valueString } from \"../../../KeyMap\";\nimport { amplifyingReactions, transformativeReactions } from \"../../../KeyMap/StatConstants\";\nimport useCharacterReducer from \"../../../ReactHooks/useCharacterReducer\";\nimport { TalentSheetElementKey } from \"../../../Types/character\";\nimport { allElementsWithPhy, allSlotKeys, ElementKey } from \"../../../Types/consts\";\nimport { range } from \"../../../Util/Util\";\nimport CharacterCardPico from \"../../../Components/Character/CharacterCardPico\";\nimport StatInput from \"../../../Components/StatInput\";\n\nexport default function TabOverview() {\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const navigate = useNavigate()\n  const { t } = useTranslation(\"page_character\")\n  const charEle = data.get(input.charEle).value as ElementKey\n  const weaponTypeKey = characterSheet.weaponTypeKey\n  const level = data.get(input.lvl).value\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  const tlvl = {\n    auto: data.get(input.total.auto).value,\n    skill: data.get(input.total.skill).value,\n    burst: data.get(input.total.burst).value,\n  }\n  const tBoost = {\n    auto: data.get(input.bonus.auto).value,\n    skill: data.get(input.bonus.skill).value,\n    burst: data.get(input.bonus.burst).value,\n  }\n  return <Grid container spacing={1} sx={{ justifyContent: \"center\" }}>\n    <Grid item xs={8} sm={5} md={4} lg={2.5}  >\n      {/* Image card with star and name and level */}\n      <CardLight >\n        <Box src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\n        <CardContent>\n          <Typography variant=\"h5\" >\n            {characterSheet.name}&nbsp;\n            <ImgIcon sx={{ pr: 0.5 }} src={Assets.weaponTypes?.[weaponTypeKey]} />\n            {StatIcon[charEle]}\n            <IconButton sx={{ p: 0.5, mt: -0.5 }} onClick={() => characterDispatch({ favorite: !character.favorite })}>\n              {character.favorite ? <Favorite /> : <FavoriteBorder />}\n            </IconButton>\n          </Typography>\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\n          <CardActionArea sx={{ p: 1 }} onClick={() => navigate(\"talent\")}>\n            <Grid container spacing={1} mt={-1}>\n              {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\n                <Grid item xs={4} key={tKey}>\n                  <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\n                    overlap=\"circular\"\n                    anchorOrigin={{\n                      vertical: 'bottom',\n                      horizontal: 'right',\n                    }}\n                    sx={{\n                      width: \"100%\",\n                      height: \"100%\",\n                      \"& > .MuiBadge-badge\": {\n                        fontSize: \"1.25em\",\n                        padding: \".25em .4em\",\n                        borderRadius: \".5em\",\n                        lineHeight: 1,\n                        height: \"1.25em\"\n                      }\n                    }}>\n                    <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\n                  </Badge>\n                </Grid>)}\n            </Grid>\n          </CardActionArea>\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\n          <Grid container spacing={1}>\n            {range(1, 6).map(i =>\n              <Grid item xs={4} key={i}>\n                <CardActionArea onClick={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}>\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i}` as TalentSheetElementKey, charEle)?.img}\n                    sx={{\n                      ...(constellation >= i ? {} : { filter: \"brightness(50%)\" })\n                    }}\n                    width=\"100%\" height=\"auto\" />\n                </CardActionArea>\n              </Grid>)}\n          </Grid>\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{t(\"teammates\")}</Typography>\n          <CardActionArea sx={{ p: 1 }} onClick={() => navigate(\"teambuffs\")}>\n            <Grid container columns={3} spacing={1}>\n              {range(0, 2).map(i => <Grid key={i} item xs={1} height=\"100%\"><CharacterCardPico characterKey={character.team[i]} index={i} /></Grid>)}\n            </Grid>\n          </CardActionArea>\n        </CardContent>\n      </CardLight>\n    </Grid>\n    <Grid item xs={12} sm={7} md={8} lg={9.5} sx={{\n      display: \"flex\", flexDirection: \"column\", gap: 1\n    }} >\n      <Grid container spacing={1} columns={{ xs: 2, sm: 2, md: 3, lg: 4, xl: 6 }}>\n        <Grid item xs={1}>\n          <WeaponCardNano weaponId={character.equippedWeapon} BGComponent={CardLight} onClick={() => navigate(\"equip\")} />\n        </Grid>\n        {allSlotKeys.map(slotKey =>\n          <Grid item key={slotKey} xs={1} >\n            <ArtifactCardNano artifactId={data.get(input.art[slotKey].id).value} slotKey={slotKey} BGComponent={CardLight} onClick={() => navigate(\"equip\")} />\n          </Grid>)}\n      </Grid>\n      <MainStatsCards />\n    </Grid>\n  </Grid >\n}\nconst EDIT = \"Edit Stats\"\nconst EXIT = \"EXIT\"\n\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\n\nconst otherStatReadNodes = [\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\n]\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\n\nconst miscStatReadNodes = [\n  input.total.all_dmg_,\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\n  input.total.normal_dmg_, input.total.normal_critRate_,\n  input.total.charged_dmg_, input.total.charged_critRate_,\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\n  input.total.skill_dmg_, input.total.skill_critRate_,\n  input.total.burst_dmg_, input.total.burst_critRate_,\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x]),\n  input.total.dmgRed_\n]\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\n\nconst statBreakpoint = {\n  xs: 12, sm: 12, md: 6, lg: 4,\n} as const\n\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\n  const { data, oldData } = useContext(DataContext)\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\n    {nodes.map(rn => <Grid item key={rn.info?.key} {...statBreakpoint} >\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\n    </Grid>)}\n    {extra}\n  </Grid>\n}\n\nfunction MainStatsCards() {\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const specialNode = data.get(input.special)\n\n  return <>\n    <StatDisplayCard\n      title=\"Main Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <span><b>Special:</b> <ColorText color={specialNode.info.variant}>{specialNode.info.key && StatIcon[specialNode.info.key]} {specialNode.info.key && KeyMap.get(specialNode.info.key)}</ColorText></span>\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\n        </Grid>}\n      />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {mainEditKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Other Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {otherStatKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              defaultValue={undefined}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Misc Stats\"\n      content={<StatDisplayContent statBreakpoint={{\n        xs: 12, sm: 12, md: 6,\n      }} nodes={miscStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {miscStatkeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n  </>\n}\nfunction StatDisplayCard({ title, content, editContent }) {\n  const [edit, setedit] = useState(false)\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle1\">{title}</Typography>\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\n        </Button>\n      </Box>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      {edit ? editContent : content}\n    </CardContent>\n  </CardLight>\n}\n","import { Box, CardActionArea, CardContent, Grid, MenuItem, Typography, useMediaQuery } from \"@mui/material\";\nimport { useTheme } from \"@mui/system\";\nimport React, { useCallback, useContext, useMemo } from 'react';\nimport CardDark from \"../../../Components/Card/CardDark\";\nimport CardLight from \"../../../Components/Card/CardLight\";\nimport ConditionalWrapper from \"../../../Components/ConditionalWrapper\";\nimport DocumentDisplay from \"../../../Components/DocumentDisplay\";\nimport DropdownButton from \"../../../Components/DropdownMenu/DropdownButton\";\nimport { NodeFieldDisplay } from \"../../../Components/FieldDisplay\";\nimport { DataContext } from '../../../DataContext';\nimport { uiInput as input } from \"../../../Formula\";\nimport { NumNode } from \"../../../Formula/type\";\nimport { NodeDisplay } from '../../../Formula/uiData';\nimport useCharacterReducer from \"../../../ReactHooks/useCharacterReducer\";\nimport { TalentSheetElementKey } from \"../../../Types/character\";\nimport { ElementKey } from \"../../../Types/consts\";\nimport { DocumentSection } from \"../../../Types/sheet\";\nimport { range } from \"../../../Util/Util\";\n\nconst talentSpacing = {\n  xs: 12,\n  sm: 6,\n  md: 4\n}\n\nexport default function CharacterTalentPane() {\n  const { data, character, characterSheet } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n\n  const theme = useTheme();\n  const grlg = useMediaQuery(theme.breakpoints.up('lg'));\n  const constellationCards = useMemo(() => range(1, 6).map(i =>\n    <SkillDisplayCard\n      talentKey={`constellation${i}` as TalentSheetElementKey}\n      subtitle={`Constellation Lv. ${i}`}\n      onClickTitle={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}\n    />), [constellation, characterDispatch])\n  return <>\n    <ReactionDisplay />\n    <Grid container spacing={1}>\n      {/* constellations for 4column */}\n      {grlg && <Grid item xs={12} md={12} lg={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\n        <CardLight><CardContent><Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography></CardContent></CardLight>\n        {constellationCards.map((c, i) => <Box key={i} sx={{ opacity: constellation >= (i + 1) ? 1 : 0.5 }} >{c}</Box>)}\n      </Grid>}\n      <Grid item xs={12} md={12} lg={9} container spacing={1} >\n        {/* auto, skill, burst */}\n        {skillBurstList.map(([tKey, tText]) =>\n          <Grid item key={tKey} {...talentSpacing} >\n            <SkillDisplayCard\n              talentKey={tKey}\n              subtitle={tText}\n            />\n          </Grid>)}\n        {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item {...talentSpacing} >\n          <SkillDisplayCard\n            talentKey=\"sprint\"\n            subtitle=\"Alternative Sprint\"\n          />\n        </Grid>}\n        {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item {...talentSpacing} >\n          <SkillDisplayCard\n            talentKey=\"passive\"\n            subtitle=\"Passive\"\n          />\n        </Grid>}\n        {/* passives */}\n        {passivesList.map(([tKey, tText, asc]) => {\n          let enabled = ascension >= asc\n          if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\n          return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} {...talentSpacing} >\n            <SkillDisplayCard\n              talentKey={tKey}\n              subtitle={tText}\n            />\n          </Grid>\n        })}\n      </Grid>\n      {/* constellations for < 4 columns */}\n      {!grlg && <Grid item xs={12} md={12} lg={3} container spacing={1} >\n        <Grid item xs={12}>\n          <CardLight><CardContent><Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography></CardContent></CardLight>\n        </Grid>\n        {constellationCards.map((c, i) => <Grid item key={i} sx={{ opacity: constellation >= (i + 1) ? 1 : 0.5 }} {...talentSpacing} >{c}</Grid>)}\n      </Grid>}\n    </Grid>\n  </>\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return <CardLight sx={{ mb: 1 }}>\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(reaction).map(([key, node]) => {\n          return <Grid item key={key}>\n            <CardDark><CardContent sx={{ p: 1, \"&:last-child\": { pb: 1 } }}>\n              <NodeFieldDisplay node={node} />\n            </CardContent></CardDark>\n          </Grid>\n        })}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey,\n  subtitle: string,\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\n\n  const actionWrapeprFunc = useCallback(\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\n    [onClickTitle],\n  )\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\n      talent[tKey] = newTalentLevelKey\n      characterDispatch({ talent })\n    }\n    header = <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"} sx={{ borderRadius: 0 }}>\n      {range(1, talentLimits[asc]).map(i =>\n        <MenuItem key={i} selected={talent[talentKey] === (i)} disabled={talent[talentKey] === (i)} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost}</MenuItem>)}\n    </DropdownButton>\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\n\n  // Hide header if the header matches the current talent\n  const hideHeader = (section: DocumentSection): boolean => {\n    let headerAction = section.header?.action\n    if (headerAction && (typeof headerAction !== \"string\")) {\n      const key: string = headerAction.props.children.props.key18\n      return key.includes(talentKey)\n    }\n    return false\n  }\n\n  return <CardLight sx={{ height: \"100%\" }}>\n    {header}\n    <CardContent>\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item>\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\n          </Grid>\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\n          </Grid>\n        </Grid>\n      </ConditionalWrapper>\n      {/* Display document sections */}\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} hideDesc hideHeader={hideHeader} /> : null}\n    </CardContent>\n  </CardLight>\n}\n","import { PersonAdd } from \"@mui/icons-material\";\nimport { CardContent, CardHeader, Divider, Grid, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useContext, useMemo } from 'react';\nimport CardLight from \"../../../Components/Card/CardLight\";\nimport CharacterCard from \"../../../Components/Character/CharacterCard\";\nimport CharacterAutocomplete from \"../../../Components/Character/CharacterAutocomplete\";\nimport DocumentDisplay from \"../../../Components/DocumentDisplay\";\nimport { NodeFieldDisplay } from \"../../../Components/FieldDisplay\";\nimport InfoTooltip from \"../../../Components/InfoTooltip\";\nimport { ArtifactSheet } from \"../../../Data/Artifacts/ArtifactSheet\";\nimport { resonanceSheets } from \"../../../Data/Resonance\";\nimport { DataContext, dataContextObj } from \"../../../DataContext\";\nimport { uiInput as input } from \"../../../Formula\";\nimport { NodeDisplay } from \"../../../Formula/uiData\";\nimport useCharacterReducer from \"../../../ReactHooks/useCharacterReducer\";\nimport useCharSelectionCallback from \"../../../ReactHooks/useCharSelectionCallback\";\nimport usePromise from \"../../../ReactHooks/usePromise\";\nimport { ElementKey } from \"../../../Types/consts\";\nimport { objPathValue, range } from \"../../../Util/Util\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function TabTeambuffs() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n    <Grid container spacing={1}>\n      <Grid item xs={12} md={6} lg={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <TeamBuffDisplay />\n        <ResonanceDisplay />\n      </Grid>\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={3} key={i}>\n        <TeammateDisplay index={i} />\n      </Grid>)}\n    </Grid>\n  </Box>\n}\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"total\", key], node]))\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"premod\", key], node]))\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"enemy\", key], node]))\n  if (!nodes.length) return null\n  return <CardLight>\n    <CardContent>\n      Team Buffs\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container>\n        {nodes.map(([path, n], i) => n && <Grid item xs={12} key={n.info.key} >\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\n        </Grid>)}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction ResonanceDisplay() {\n  const { data } = useContext(DataContext)\n  return <>\n    {resonanceSheets.map((res, i) => {\n      const icon = <InfoTooltip title={<Typography>{res.desc}</Typography>} />\n      const title = <span>{res.name} {icon}</span>\n      return <CardLight key={i} sx={{ opacity: res.canShow(data) ? 1 : 0.5, }}>\n        <CardHeader title={title} action={res.icon} titleTypographyProps={{ variant: \"subtitle2\" }} />\n        {res.canShow(data) && <Divider />}\n        {res.canShow(data) && <CardContent>\n          <DocumentDisplay sections={res.sections} teamBuffOnly hideDesc />\n        </CardContent>}\n      </CardLight>\n    })}\n  </>\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const dataContext = useContext(DataContext)\n  const { t } = useTranslation(\"page_character\")\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\n  const activeCharacterKey = active.key\n  const characterKey = active.team[index]\n  const characterDispatch = useCharacterReducer(characterKey)\n  const onClickHandler = useCharSelectionCallback()\n\n  const dataBundle = teamData[characterKey]\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && {\n    character: dataBundle.character,\n    characterSheet: dataBundle.characterSheet,\n    data: dataBundle.target,\n    teamData: teamData,\n    mainStatAssumptionLevel: 0,\n    characterDispatch\n  }\n  return <CardLight>\n    <CardContent>\n      <CharacterAutocomplete fullWidth value={characterKey}\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\n        disable={ck => ck === activeCharacterKey || active.team.includes(ck)}\n        labelText={t(\"teammate\", { count: index + 1 })}\n        defaultText={t(\"none\")}\n        defaultIcon={<PersonAdd />}\n        showDefault\n      />\n    </CardContent>\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\n      <CharacterCard characterKey={characterKey}\n        onClickHeader={onClickHandler}\n        artifactChildren={<CharArtifactCondDisplay />}\n        weaponChildren={<CharWeaponCondDisplay />}\n        characterChildren={<CharTalentCondDisplay />}\n        isTeammateCard\n      />\n    </DataContext.Provider>}\n  </CardLight>\n\n}\nfunction CharArtifactCondDisplay() {\n  const { data, } = useContext(DataContext)\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const sections = useMemo(() => artifactSheets &&\n    Object.entries(ArtifactSheet.setEffects(artifactSheets, data))\n      .flatMap(([setKey, setNums]) =>\n        setNums.flatMap(sn => artifactSheets[setKey]!.setEffectDocument(sn)!))\n    , [artifactSheets, data])\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\nfunction CharWeaponCondDisplay() {\n  const { teamData, character: { key: charKey } } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n  if (!weaponSheet.document) return null\n  return <DocumentDisplay sections={weaponSheet.document} teamBuffOnly={true} />\n}\nfunction CharTalentCondDisplay() {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\n","import { Calculate, Checkroom, ExpandMore, FactCheck, Groups, Person } from '@mui/icons-material';\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, ButtonGroup, Card, CardContent, CardHeader, Collapse, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, Typography } from '@mui/material';\nimport { Suspense, useCallback, useContext, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link as RouterLink, Navigate, Route, Routes, useMatch, useNavigate, useParams } from 'react-router-dom';\nimport CardDark from '../../Components/Card/CardDark';\nimport CardLight from '../../Components/Card/CardLight';\nimport { CharacterSelectionModal } from '../../Components/Character/CharacterSelectionModal';\nimport ThumbSide from '../../Components/Character/ThumbSide';\nimport CloseButton from '../../Components/CloseButton';\nimport ColorText from '../../Components/ColoredText';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../Components/CustomNumberInput';\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton';\nimport { EnemyExpandCard } from '../../Components/EnemyEditor';\nimport ExpandButton from '../../Components/ExpandButton';\nimport { HitModeToggle, InfusionAuraDropdown, ReactionToggle } from '../../Components/HitModeEditor';\nimport ImgIcon from '../../Components/Image/ImgIcon';\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../../Data/LevelData';\nimport { sgt } from '../../Data/SheetUtil';\nimport { DataContext, dataContextObj, TeamData } from '../../DataContext';\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil';\nimport { DisplaySub } from '../../Formula/type';\nimport { NodeDisplay } from '../../Formula/uiData';\nimport KeyMap, { valueString } from '../../KeyMap';\nimport useCharacterReducer from '../../ReactHooks/useCharacterReducer';\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback';\nimport usePromise from '../../ReactHooks/usePromise';\nimport useTeamData from '../../ReactHooks/useTeamData';\nimport useTitle from '../../ReactHooks/useTitle';\nimport { allCharacterKeys, CharacterKey } from '../../Types/consts';\nimport { clamp } from '../../Util/Util';\nimport TabEquip from './Tabs/TabEquip';\nimport TabBuild from './Tabs/TabOptimize';\nimport TabOverview from './Tabs/TabOverview';\nimport TabTalent from './Tabs/TabTalent';\nimport TabTeambuffs from './Tabs/TabTeambuffs';\n\nexport default function CharacterDisplay() {\n  const navigate = useNavigate();\n  let { characterKey } = useParams<{ characterKey?: CharacterKey }>();\n  const invalidKey = !allCharacterKeys.includes(characterKey as any ?? \"\")\n  if (invalidKey)\n    return <Navigate to=\"/characters\" />\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n    {characterKey && <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\n      <CharacterDisplayCard characterKey={characterKey} onClose={() => navigate(\"/characters\")} />\n    </Suspense>}\n  </Box>\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey,\n  newteamData?: TeamData,\n  mainStatAssumptionLevel?: number,\n  onClose?: (any) => void,\n}\nfunction CharacterDisplayCard({ characterKey, newteamData, mainStatAssumptionLevel = 0, onClose }: CharacterDisplayCardProps) {\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\n  let { params: { tab = \"overview\" } } = useMatch({ path: \"/characters/:charKey/:tab\", end: false }) ?? { params: { tab: \"overview\" } }\n  const { t } = useTranslation()\n  useTitle(`${t(`char_${characterKey}_gen:name`)} - ${t(`page_character:tabs.${tab}`)}`)\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\n  const { compareData } = character ?? {}\n\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\n    if (!teamData || !character || !characterSheet || !charUIData) return undefined\n    return {\n      character,\n      characterSheet,\n      mainStatAssumptionLevel,\n      data: (newteamData ? newteamData[characterKey]!.target : charUIData),\n      teamData: (newteamData ? newteamData : teamData),\n      oldData: (compareData && newteamData) ? charUIData : undefined,\n      characterDispatch\n    }\n  }, [character, characterSheet, mainStatAssumptionLevel, newteamData, charUIData, teamData, characterDispatch, characterKey, compareData])\n\n  if (!teamData || !character || !characterSheet || !charUIData || !dataContextValue) return <></>\n\n  return <CardDark >\n    <DataContext.Provider value={dataContextValue}>\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            <CharSelectDropdown />\n          </Grid>\n          <Grid item flexGrow={1} />\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\n          {!!onClose && <Grid item>\n            <CloseButton onClick={onClose} />\n          </Grid>}\n        </Grid>\n        <CardLight>\n          <TabNav tab={tab} />\n        </CardLight>\n        <FormulaCalcCard />\n        <EnemyExpandCard />\n        <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\n          <Routes>\n            {/* Character Panel */}\n            <Route index element={<TabOverview />} />\n            <Route path=\"/talent\" element={<TabTalent />} />\n            <Route path=\"/equip\" element={<TabEquip />} />\n            <Route path=\"/teambuffs\" element={<TabTeambuffs />} />\n            <Route path=\"/optimize\" element={<TabBuild />} />\n          </Routes>\n        </Suspense>\n        <CardLight>\n          <TabNav tab={tab} />\n        </CardLight>\n      </CardContent>\n    </DataContext.Provider>\n  </CardDark>\n}\nfunction TabNav({ tab }: { tab: string }) {\n  const { t } = useTranslation(\"page_character\")\n  return <Tabs\n    value={tab}\n    variant=\"scrollable\"\n    allowScrollButtonsMobile\n    sx={{\n      \"& .MuiTab-root:hover\": {\n        transition: \"background-color 0.25s ease\",\n        backgroundColor: \"rgba(255,255,255,0.1)\"\n      },\n    }}\n  >\n    <Tab sx={{ minWidth: \"20%\" }} value=\"overview\" label={t(\"tabs.overview\")} icon={<Person />} component={RouterLink} to=\"\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"talent\" label={t(\"tabs.talent\")} icon={<FactCheck />} component={RouterLink} to=\"talent\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"equip\" label={t(\"tabs.equip\")} icon={<Checkroom />} component={RouterLink} to=\"equip\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"teambuffs\" label={t(\"tabs.teambuffs\")} icon={<Groups />} component={RouterLink} to=\"teambuffs\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"optimize\" label={t(\"tabs.optimize\")} icon={<Calculate />} component={RouterLink} to=\"optimize\" />\n  </Tabs>\n}\n\nfunction CharSelectDropdown() {\n  const { t } = useTranslation(\"page_character\")\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\n  const [showModal, setshowModal] = useState(false)\n  const setCharacter = useCharSelectionCallback()\n  const setLevel = useCallback((level) => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    characterDispatch({ level, ascension })\n  }, [characterDispatch])\n  const setAscension = useCallback(() => {\n    if (!character) return\n    const { level = 1, ascension = 0 } = character\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\n    else characterDispatch({ ascension: lowerAscension })\n  }, [characterDispatch, character])\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\n  return <>\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\n    <Grid container spacing={1}>\n      <Grid item>\n        <Button color=\"info\" onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? t(\"selectCharacter\")}</Button>\n      </Grid>\n      <Grid item>\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\n          </DropdownButton>}\n          <CustomNumberInputButtonGroupWrapper >\n            <CustomNumberInput onChange={setLevel} value={level}\n              startAdornment=\"Lv. \"\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n              disabled={!characterSheet} />\n          </CustomNumberInputButtonGroupWrapper>\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n          <DropdownButton title={t(\"selectLevel\")} disabled={!characterSheet}>\n            {milestoneLevels.map(([lv, as]) => {\n              const sameLevel = lv === ascensionMaxLevel[as]\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n              const selected = lv === level && as === ascension\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n            })}\n          </DropdownButton>\n        </ButtonGroup>\n      </Grid>\n    </Grid>\n  </>\n}\n\nfunction FormulaCalcCard() {\n  const { t } = useTranslation(\"page_character\")\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  return <CardLight>\n    <CardContent sx={{ display: \"flex\", gap: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item><HitModeToggle size=\"small\" /></Grid>\n        <Grid item><InfusionAuraDropdown /></Grid>\n        <Grid item><ReactionToggle size=\"small\" /></Grid>\n      </Grid>\n      <Box display=\"flex\" gap={1} >\n        <Box>\n          <Typography variant='subtitle2' >{t(\"formulas\")} {\"&\"}</Typography>\n          <Typography variant='subtitle2' >{t(\"calculations\")}</Typography>\n        </Box>\n        <ExpandButton\n          expand={expanded}\n          onClick={toggle}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n          size=\"small\"\n          sx={{ p: 0 }}\n        >\n          <ExpandMore />\n        </ExpandButton>\n      </Box>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <CalculationDisplay />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nfunction CalculationDisplay() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\n    <Box sx={{ mr: -1, mb: -1 }}>\n      {sections.map(([key, Nodes]) =>\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Box>\n  </Suspense>\n}\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  if (!header) return null\n  if (Object.entries(displayNs).every(([_, node]) => node.isEmpty)) return null\n  const { title, icon, action } = header\n  return <CardDark sx={{ mb: 1 }}>\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([key, node]) =>\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\n          <AccordionSummary expandIcon={<ExpandMore />}>\n            <Typography><ColorText color={node.info.variant}>{KeyMap.get(node.info.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\n          </AccordionDetails>\n        </Accordion>)}\n    </CardContent>\n  </CardDark>\n}\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { BusinessCenter, Lock, LockOpen } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, IconButton, Skeleton, Tooltip, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Assets from \"../Assets/Assets\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterAutocomplete from '../Components/Character/CharacterAutocomplete'\nimport LocationName from \"../Components/Character/LocationName\"\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport StatIcon from \"../Components/StatIcon\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\nimport { DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\nimport KeyMap, { valueString } from \"../KeyMap\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport { CharacterKey } from \"../Types/consts\"\n\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean, extraButtons?: JSX.Element }\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false, extraButtons }: WeaponCardProps) {\n  const { t } = useTranslation([\"page_weapon\", \"ui\"]);\n  const { database } = useContext(DatabaseContext)\n  const databaseWeapon = useWeapon(weaponId)\n  const weapon = databaseWeapon\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\n\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n\n  const wrapperFunc = useCallback(children => <CardActionArea onClick={() => onClick?.(weaponId)} >{children}</CardActionArea>, [onClick, weaponId],)\n  const falseWrapperFunc = useCallback(children => <Box >{children}</Box>, [])\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\n\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n\n  if (!weapon || !weaponSheet || !UIData) return null;\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\" }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={wrapperFunc} falseWrapper={falseWrapperFunc}>\n        <Box className={`grad-${weaponSheet.rarity}star`} sx={{ position: \"relative\", pt: 2, px: 2, }}>\n          {!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)} sx={{ position: \"absolute\", right: 0, bottom: 0, zIndex: 2 }}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>}\n          <Box sx={{ position: \"relative\", zIndex: 1 }}>\n            <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1, mb: 1 }}>\n              <ImgIcon sx={{ fontSize: \"1.5em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />\n              <Typography noWrap sx={{ textAlign: \"center\", backgroundColor: \"rgba(100,100,100,0.35)\", borderRadius: \"1em\", px: 1 }}><strong>{weaponSheet.name}</strong></Typography>\n            </Box>\n            <Typography component=\"span\" variant=\"h5\">Lv. {level}</Typography>\n            <Typography component=\"span\" variant=\"h5\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\n            <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\n            <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\n          </Box>\n          <Box sx={{ height: \"100%\", position: \"absolute\", right: 0, top: 0 }}>\n            <Box\n              component=\"img\"\n              src={img ?? \"\"}\n              width=\"auto\"\n              height=\"100%\"\n              sx={{ float: \"right\" }}\n            />\n          </Box>\n        </Box>\n        <CardContent>\n          {stats.map(node => {\n            if (!node.info.key) return null\n            const displayVal = valueString(node.value, node.unit, !node.unit ? 0 : undefined)\n            return <Box key={node.info.key} sx={{ display: \"flex\" }}>\n              <Typography flexGrow={1}>{StatIcon[node.info.key!]} {KeyMap.get(node.info.key)}</Typography>\n              <Typography>{displayVal}</Typography>\n            </Box>\n          })}\n        </CardContent>\n      </ConditionalWrapper>\n      <Box sx={{ p: 1, display: \"flex\", gap: 1, justifyContent: \"space-between\", alignItems: \"center\" }}>\n        {canEquip\n          ? <CharacterAutocomplete size=\"small\" sx={{ flexGrow: 1 }}\n            showDefault defaultIcon={<BusinessCenter />} defaultText={t(\"inventory\")}\n            value={location} onChange={equipOnChar} filter={filter} />\n          : <LocationName location={location} />}\n        <ButtonGroup>\n          {!!onEdit && <Tooltip title={<Typography>{t`page_weapon:edit`}</Typography>} placement=\"top\" arrow>\n            <Button color=\"info\" onClick={() => onEdit(id)} >\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n            </Button>\n          </Tooltip>}\n          {!!onDelete && <Button color=\"error\" onClick={() => onDelete(id)} disabled={!!location || lock} >\n            <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n          </Button>}\n          {extraButtons}\n        </ButtonGroup>\n      </Box>\n    </CardLight>\n  </Suspense>\n}\n","import { useMediaQuery, useTheme } from \"@mui/material\";\n\nexport default function useMediaQueryUp() {\n  const theme = useTheme();\n  const sm = useMediaQuery(theme.breakpoints.up('sm'));\n  const md = useMediaQuery(theme.breakpoints.up('md'));\n  const lg = useMediaQuery(theme.breakpoints.up('lg'));\n  const xl = useMediaQuery(theme.breakpoints.up('xl'));\n  if (xl) return \"xl\"\n  if (lg) return \"lg\"\n  if (md) return \"md\"\n  if (sm) return \"sm\"\n  return \"xs\"\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useWeapon(weaponID: string | undefined = \"\") {\n  const { database } = useContext(DatabaseContext)\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\n  useEffect(() =>\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\n    [weaponID, setWeapon, database])\n  return weapon\n}\n","import { strPadLeft } from \"./Util\"\n\nexport const SECOND_MS = 1000\nexport const MINUTE_MS = 60 * SECOND_MS\nexport const HOUR_MS = 60 * MINUTE_MS\nexport const DAY_MS = 24 * HOUR_MS\n\nexport function msToUnits(ms: number) {\n  let milliseconds = ms % 1000\n  let seconds = Math.floor((ms / 1000) % 60)\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\n  return { hours, minutes, seconds, milliseconds }\n}\nexport function timeString(ms: number) {\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\n  let { hours, minutes, seconds } = msToUnits(ms)\n  let timeText = \"Minutes\"\n  if (hours) timeText = \"Hours\"\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\n}\nexport function timeStringMs(ms: number) {\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms)\n  let timeText = \"Minutes\"\n  if (hours) timeText = \"Hours\"\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\n}\n","import { WeaponKey } from \"../Types/consts\";\nimport { ICachedWeapon } from \"../Types/weapon\";\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\nexport const weaponSortKeys = [\"level\", \"rarity\"]\nexport type WeaponSortKey = typeof weaponSortKeys[number]\n\nexport function weaponSortConfigs(weaponSheets: Record<WeaponKey, WeaponSheet>): SortConfigs<WeaponSortKey, ICachedWeapon> {\n  return {\n    level: {\n      getValue: wp => wp.level ?? 0,\n      tieBreaker: \"rarity\"\n    },\n    rarity: {\n      getValue: wp => weaponSheets?.[wp.key]?.rarity,\n      tieBreaker: \"level\"\n    }\n  }\n}\nexport function weaponFilterConfigs(weaponSheets: Record<WeaponKey, WeaponSheet>): FilterConfigs<\"rarity\" | \"weaponType\", ICachedWeapon> {\n  return {\n    rarity: (wp, filter) => filter.includes(weaponSheets?.[wp.key]?.rarity),\n    weaponType: (wp, filter) => !filter || (filter === weaponSheets?.[wp.key]?.weaponType),\n  }\n}\n"],"names":["ArtifactMultiAutocomplete","allArtifactKeys","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","props","theme","useTheme","options","useMemo","map","key","autoHighlight","multiple","value","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","variant","InputLabelProps","style","color","palette","text","primary","length","type","renderOption","image","isSelected","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSets","nameRaw","defIcon","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","KeyMap","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","flattenCorners","concat","newValue","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","allArtSetKeys","artSetKey","setArtSetKey","ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","disabled","showLevelText","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","TypeError","l","h","useEffect","sx","width","display","alignItems","bgcolor","val","clamp","px","pl","inputProps","textAlign","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","defaultSortKeys","CharacterSelectionModal","show","onHide","onSelect","filter","newFirst","sortKeys","database","useContext","DatabaseContext","sortBy","setsortBy","ascending","setascending","elementalFilter","setelementalFilter","weaponFilter","setweaponFilter","characterSheets","CharacterSheet","useForceUpdate","favesDirty","setFavesDirty","followAnyChar","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","sortConfigs","characterSortConfigs","filterConfigs","characterFilterConfigs","ownedCharacterKeyList","allCharacterKeys","cKey","_getChar","characterKeyList","filterFunction","weaponType","favorite","name","sort","sortFunction","open","onClose","justifyContent","py","container","spacing","item","height","size","autoFocus","target","onChangeAsc","onClick","characterKey","xs","md","lg","CharacterBtn","characterSheet","teamData","useTeamData","characterDispatch","useCharacterReducer","data","rarity","Suspense","fallback","position","alignSelf","zIndex","p","component","src","thumbImg","className","elementKey","Assets","weaponTypeKey","get","input","stars","colored","ExpandButton","styled","expand","other","transform","marginLeft","transition","transitions","create","duration","shortest","SortByButton","gap","i18nKey","title","startIcon","faSortAmountDownAlt","faSortAmountUp","DisabledButton","Button","backgroundColor","secondary","TextButton","children","ToggleButton","shouldForwardProp","prop","baseColor","selectedColor","main","contrastText","ElementToggle","cb","newVal","ToggleButtonGroup","exclusive","allElements","Box","fontSize","lineHeight","uncoloredEleIcons","WeaponToggle","allWeaponTypeKeys","wt","artifactSortKeys","artifactSortKeysTC","initialFilterOption","allArtifactRarities","slotKeys","allSlotKeys","substats","location","exclusion","locked","initialArtifactSortFilter","filterOption","sortType","artifactSortConfigs","effFilterSet","probabilityFilter","getValue","art","tieBreaker","level","artsetkey","setKey","efficiency","Artifact","currentEfficiency","mefficiency","maxEfficiency","probability","Object","keys","prob","artifactFilterConfigs","exclude","lock","slotKey","mainStatKey","filterKey","some","substat","FlexButtonGroup","ButtonGroup","StatInput","placeholder","defaultValue","onValueChange","percent","onReset","restProps","whiteSpace","CustomNumberInput","flexBasis","float","endAdornment","Replay","EnemyExpandCard","DataContext","expanded","setexpanded","toggle","eLvlNode","eDefRed","eDefIgn","CardLight","CardContent","Grid","Chip","info","Typography","EnemyResText","valueString","unit","ExpandMore","Collapse","in","timeout","unmountOnExit","pt","EnemyEditor","node","content","isFinite","bsProps","enemyOverride","character","eLvl","enemyLevel","enemyDefIgn_","enemyDefRed_","fullWidth","href","rel","contentLight","statKey","eleKey","elementImmunity","Number","MAX_VALUE","Infinity","faCheckSquare","faSquare","StatDisplayComponent","sections","getDisplaySections","mr","mb","Masonry","columns","sm","xl","Nodes","Section","displayNs","sectionKey","oldData","header","getDisplayHeader","displayNsReads","objectMap","n","nodeKey","customRead","CardDark","action","CardHeader","avatar","ImgIcon","m","titleTypographyProps","Divider","entries","oldValue","useBoolState","initial","bool","setBool","onTrue","onFalse","ArtifactCardNano","artifactId","pSlotKey","mainStatAssumptionLevel","showLocation","BGComponent","useArtifact","sheet","actionWrapperFunc","CardActionArea","opacity","mainStatLevel","Math","mainStatUnit","levelVariant","floor","alpha","ConditionalWrapper","condition","wrapper","flexDirection","ArtifactSetSlotTooltip","slotIcons","maxHeight","maxWidth","pointerEvents","LocationIcon","overflow","bottom","BootstrapTooltip","placement","disableInteractive","cacheValueString","stat","i","SubstatDisplay","numRolls","rolls","rollColor","alignContent","thumbImgSide","marginTop","BusinessCenter","WeaponCardNano","weaponId","weapon","useWeapon","weaponSheet","WeaponSheet","UIData","computeUIData","dataObjForWeapon","Skeleton","refinement","WeaponNameTooltip","img","hasRefinement","WeaponStat","BuildDisplayItem","compareBuild","extraButtons","dataContext","newOld","setNewOld","close","equipBuild","window","confirm","newBuild","fromEntries","s","id","equipArtifacts","setWeaponLocation","currentlyEquipped","statProviderContext","setToSlots","set","push","CompareArtifactModal","pb","flexWrap","SqBadge","slotarr1","slotarr","artifactSlotIcon","oldId","equippedArtifacts","newId","ModalWrapper","containerProps","ArtifactCard","disableEditSetSlot","canExclude","canEquip","ChevronRight","CompareBuildButton","artId","onShow","build","newArt","_getArt","artmap","slot","values","_getWeapon","Close","Tooltip","arrow","Difference","numToShowMap","ArtifactFilterDisplay","lazy","ArtifactSwapModal","onChangeId","clickHandler","filterOptionReducer","state","useReducer","filterOptionDispatch","dbDirty","forceUpdate","followAnyArt","brPt","useMediaQueryUp","artIdList","filterFunc","_getArts","slice","CloseButton","mt","WeaponSwapModal","followAnyWeapon","weaponSheets","weaponFilterConfigs","weaponSortConfigs","setRarity","weaponIdList","_getWeapons","SolidToggleButtonGroup","allRarities","star","WeaponCard","WeaponEditor","equippedWeapon","setweaponId","showWeapon","hideWeapon","updateArt","hasEquipped","unequipArts","objectKeyMap","setEffects","grxl","useMediaQuery","breakpoints","up","artifactFields","setNumKeyArr","setNumKey","SetEffectDisplay","weaponDoc","document","DocumentDisplay","footer","LargeWeaponSwapButton","onEdit","WeaponSwapButton","ArtifactSwapButton","editor","ArtSwapCard","onOpen","minHeight","setArtLocation","borderRadius","SwapHoriz","Worker_fn","Worker","ArtifactSetPicker","setFilters","setNum","num","artifactSets","setsNumArr","artsAccountedOther","reduce","accu","cur","ind","every","parseInt","artsAccounted","setFilter","DropdownButton","MenuItem","setNKey","setNkey","levels","AssumeFullLevelToggle","setmainStatAssumptionLevel","lvl","BonusStatsCard","bonusStatsKeys","bonusStats","nodes","k","warningBuildNumber","Monospace","fontFamily","BorderLinearProgress","LinearProgress","BuildAlert","totBuildNumber","generatingBuilds","generationSkipped","generationProgress","generationDuration","characterName","maxBuildsToShow","totalBuildNumberString","toLocaleString","totalUnskipped","generationProgressString","generationSkippedString","totalUnskippedString","generationSkippedText","subtitle","progress","timeStringMs","round","Alert","severity","toFixed","ChartCard","chartData","plotBase","setPlotBase","showDownload","setshowDownload","showMin","setshowMin","statKeys","displayData","downloadData","increasingX","y","x","plot","a","b","minimumData","point","last","pop","forEach","minimum","allData","sKey","Info","CheckBox","CheckBoxOutlineBlank","Download","DataDisplay","Chart","plotNode","valueNode","TextArea","resize","readOnly","JSON","stringify","selectionStart","selectionEnd","plotBaseUnit","valueUnit","ResponsiveContainer","ComposedChart","CartesianGrid","strokeDasharray","XAxis","dataKey","scale","domain","tick","fill","tickFormatter","YAxis","allowDecimals","ZAxis","range","Legend","Scatter","line","lineType","isAnimationActive","Line","stroke","connectNulls","strokeWidth","artifactsSlotsToSelectMainStats","MainStatSelectionCard","onChangeMainStatKey","numSel","cursor","defThreads","navigator","hardwareConcurrency","initialTabOptimizeDBState","equipmentPriority","threads","useOptimizeDBState","useDBState","UseEquipped","useEquippedArts","buildSettingsDispatch","tempEquipmentPriority","setOptimizeDBState","Set","ck","setPrio","setPrioRank","fromIndex","toIndex","arr","splice","removePrio","addPrio","resetPrio","numAbove","indexOf","numUseEquippedChar","_getCharKeys","numUnlisted","Trans","gutterBottom","SelectItem","rank","maxRank","setRank","onRemove","NewItem","onAdd","list","count","flexShrink","Settings","useCharacter","KeyboardDoubleArrowUp","KeyboardArrowUp","KeyboardArrowDown","KeyboardDoubleArrowDown","CharacterCardPico","WeaponCardPico","aId","ArtifactCardPico","artifactObj","char","Add","UseExcluded","useExcludedArts","artsDirty","numExcludedArt","TabBuild","initGlobalSettings","tcMode","setgeneratingBuilds","setgenerationProgress","setgenerationDuration","setgenerationSkipped","setchartData","setArtsDirty","maxWorkers","setMaxWorkers","buildSettings","initialBuildSettings","statFilters","optimizationTarget","builds","buildDate","buildsArts","compareData","noArtifact","buildSettingsReducer","cantTakeList","arts","mainStats","split","compactArtifacts","setPerms","artSetPerm","perm","countBuilds","filterArts","cancelToken","useRef","current","generateBuilds","fetchWork","setPerm","next","done","command","threshold","wrap","buildValues","getTeamData","workerData","uiDataForTeam","assign","mergeData","dynamicData","optimizationTargetNode","objPathValue","targetNode","valueFilter","endsWith","t1","performance","now","cancelled","Promise","r","origCount","optimize","path","pruneAll","reaffine","pruneArtRange","pruneNodeRange","pruneOrder","plotBaseNode","buildCount","failedCount","skippedCount","Array","splitFiltersBySet","Symbol","iterator","filters","finalizedList","worker","setup","maxBuilds","postMessage","finalize","finalized","onmessage","work","finalizeCommand","terminate","console","log","then","buildTimer","setInterval","any","all","results","clearInterval","plotData","mergePlot","mergeBuilds","artifactIds","Date","totalDuration","Link","RouterLink","to","CharacterCard","StatFilterCard","setStatFilters","sFs","ArtifactSetConditional","getDisplay","faCalculator","maxBuildsToShowList","reverse","OptimizationTargetSelector","setTarget","BuildList","DataContextWrapper","join","TabOverview","navigate","useNavigate","charEle","ascension","constellation","tlvl","auto","skill","burst","tBoost","cardImg","pr","IconButton","Favorite","FavoriteBorder","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","padding","getTalentOfKey","constellationName","team","MainStatsCards","mainSubKeys","mainReadNodes","mainEditKeys","otherStatReadNodes","otherStatKeys","miscStatReadNodes","transformativeReactions","amplifyingReactions","miscStatkeys","statBreakpoint","StatDisplayContent","extra","columnSpacing","rowSpacing","rn","specialNode","StatDisplayCard","editContent","statName","edit","setedit","faSave","faEdit","talentSpacing","CharacterTalentPane","grlg","constellationCards","SkillDisplayCard","talentKey","onClickTitle","ReactionDisplay","c","tText","asc","enabled","reaction","talentLimits","talent","actionWrapeprFunc","levelBoost","newTalentLevelKey","talentSheet","hideDesc","hideHeader","section","headerAction","key18","TabTeambuffs","TeamBuffDisplay","ResonanceDisplay","TeammateDisplay","teamBuffs","getTeamBuff","total","isEmpty","premod","enemy","resonanceSheets","res","InfoTooltip","desc","canShow","teamBuffOnly","active","activeCharacterDispatch","activeCharacterKey","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","CharacterAutocomplete","charKey","labelText","PersonAdd","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","isTeammateCard","flatMap","sn","setEffectDocument","getTalent","sheets","sts","CharacterDisplay","useParams","my","CharacterDisplayCard","newteamData","charUIData","useMatch","end","tab","useTitle","dataContextValue","CharSelectDropdown","Card","warning","TabNav","FormulaCalcCard","Tabs","allowScrollButtonsMobile","Tab","minWidth","Person","FactCheck","Checkroom","Groups","Calculate","showModal","setshowModal","setCharacter","setLevel","ascensionMaxLevel","ascenML","setAscension","lowerAscension","ThumbSide","contentDark","sgt","talents","ambiguousLevel","milestoneLevels","lv","as","lvlstr","CalculationDisplay","FormulaCalc","Accordion","AccordionSummary","expandIcon","AccordionDetails","formulas","subform","onDelete","cs","wrapperFunc","falseWrapperFunc","equipOnChar","stats","imgAwaken","falseWrapper","updateWeapon","right","noWrap","top","displayVal","faTrashAlt","weaponID","setWeapon","followWeapon","SECOND_MS","MINUTE_MS","HOUR_MS","DAY_MS","msToUnits","ms","milliseconds","seconds","minutes","hours","timeString","timeText","strPadLeft","weaponSortKeys","wp"],"sourceRoot":""}