{"version":3,"file":"static/js/916.179196a5.chunk.js","mappings":"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","sources":["Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/DropdownMenu/DropdownButton.tsx","GlobalSettings.tsx","Database/exim.ts","Database/exports/good.ts","PageSettings/DownloadCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/TCToggleCard.tsx","../node_modules/@mui/icons-material/esm/Upload.js","Database/imports/good.ts","Database/imports/merge.ts","Database/imports/mona.ts","PageSettings/UploadCard.tsx","PageSettings/index.tsx","ReactHooks/useDBState.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { Card, styled } from \"@mui/material\";\n\nconst CardDark = styled(Card)(({ theme }) => ({\n  backgroundColor: theme.palette.contentDark.main\n}));\n\nexport default CardDark","import { Card, styled } from \"@mui/material\";\n\nconst CardLight = styled(Card)(({ theme }) => ({\n  backgroundColor: theme.palette.contentLight.main\n}));\n\nexport default CardLight","import { KeyboardArrowDown } from \"@mui/icons-material\";\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\nimport { Suspense, useCallback, useState } from \"react\";\n\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\n  title: React.ReactNode,\n  id?: string,\n  children: React.ReactNode\n}\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\n    [setAnchorEl],\n  )\n  const handleClose = useCallback(\n    () => setAnchorEl(null),\n    [setAnchorEl],\n  )\n\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\n    <Button\n      {...props}\n      id={id}\n      aria-controls=\"basic-menu\"\n      aria-haspopup=\"true\"\n      aria-expanded={open ? 'true' : undefined}\n      onClick={handleClick}\n      endIcon={<KeyboardArrowDown />}\n    >\n      {title}\n    </Button>\n    <Menu\n      id=\"basic-menu\"\n      anchorEl={anchorEl}\n      open={open}\n      onClose={handleClose}\n      MenuListProps={{\n        'aria-labelledby': id,\n      }}\n      onClick={handleClose}\n    >\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\n        {children}\n      </Suspense>\n    </Menu>\n  </Suspense>\n}","\nexport function initGlobalSettings() {\n  return { tcMode: false }\n}\n","import type { IArtifact } from \"../Types/artifact\"\nimport type { ICharacter } from \"../Types/character\"\nimport type { IWeapon } from \"../Types/weapon\"\nimport type { DBStorage } from \"./DBStorage\"\n\nexport const GOSource = \"Genshin Optimizer\" as const\n\nexport function newCounter<T>(): ImportResultCounter<T> {\n  return { total: 0, invalid: [], new: [], updated: [], unchanged: [], removed: [], }\n}\n\nexport type IGOOD = {\n  format: \"GOOD\"\n  source: string\n  version: 1\n  characters?: any[]\n  artifacts?: any[]\n  weapons?: any[]\n}\nexport type IGO = {\n  dbVersion: number\n  source: typeof GOSource\n  states?: object[]\n  buildSettings?: object[]\n}\n\nexport type ImportResultCounter<T> = {\n  total: number, // total # in file\n  new: T[],\n  updated: T[], // Use new object\n  unchanged: T[], // Use new object\n  removed: T[],\n  invalid: T[],\n}\nexport type ImportResult = {\n  type: \"GOOD\",\n  storage: DBStorage,\n  source: string,\n  artifacts?: ImportResultCounter<IArtifact>,\n  weapons?: ImportResultCounter<IWeapon>,\n  characters?: ImportResultCounter<ICharacter>,\n}\n","import { DBStorage } from \"../DBStorage\";\nimport { GOSource, IGO, IGOOD } from \"../exim\";\nimport { currentDBVersion } from \"../imports/migrate\";\n\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\n  return {\n    format: \"GOOD\",\n    dbVersion: currentDBVersion,\n    source: GOSource,\n    version: 1,\n    characters: storage.entries\n      .filter(([key]) => key.startsWith(\"char_\"))\n      .map(([_, value]) => {\n        // Invalidate build results since we won't use it on imports either\n        const result = JSON.parse(value)\n        if (result.buildSettings) {\n          result.buildSettings.builds = []\n          result.buildSettings.buildDate = 0\n        }\n        return result\n      }),\n    artifacts: storage.entries\n      .filter(([key]) => key.startsWith(\"artifact_\"))\n      .map(([_, value]) => JSON.parse(value)),\n    weapons: storage.entries\n      .filter(([key]) => key.startsWith(\"weapon_\"))\n      .map(([_, value]) => JSON.parse(value)),\n\n    states: storage.entries\n      .filter(([key]) => key.startsWith(\"state_\"))\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\n    buildSettings: storage.entries\n      .filter(([key]) => key.startsWith(\"buildSetting_\"))\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"buildSetting_\")[1] })),\n  }\n}\n","import { faClipboard, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Download } from '@mui/icons-material'\nimport { Button, CardContent, Divider, Grid, Typography } from '@mui/material'\nimport { useCallback, useContext } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardLight from '../Components/Card/CardLight'\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\nimport { exportGOOD } from '../Database/exports/good'\n\nexport default function DownloadCard() {\n  const { database, setDatabase } = useContext(DatabaseContext)\n  const { t } = useTranslation([\"settings\"]);\n  const numChar = database._getCharKeys().length\n  const numArt = database._getArts().length\n  const numWeapon = database._getWeapons().length\n  const downloadValid = Boolean(numChar || numArt)\n  const deleteDB = useCallback(() => {\n    database.storage.clear()\n    setDatabase(new ArtCharDatabase(database.storage))\n  }, [database, setDatabase])\n  const copyToClipboard = useCallback(\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\n      .then(() => alert(\"Copied database to clipboard.\"))\n      .catch(console.error),\n    [database],\n  )\n  const download = useCallback(\n    () => {\n      const date = new Date()\n      const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\n      const JSONStr = JSON.stringify(exportGOOD(database.storage))\n      const filename = `go-data_${dateStr}.json`\n      const contentType = \"application/json;charset=utf-8\"\n      const a = document.createElement('a');\n      a.download = filename\n      a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\n      a.target = \"_blank\"\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n    },\n    [database],\n  )\n\n\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Typography variant=\"subtitle1\">\n        <Trans t={t} i18nKey=\"downloadCard.databaseDownload\" />\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container mb={2} spacing={2}>\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.chars\" /> {numChar}</Typography></Grid>\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.arts\" /> {numArt}</Typography></Grid>\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.weapons\" /> {numWeapon}</Typography></Grid>\n      </Grid>\n    </CardContent>\n    <Divider />\n    <CardContent sx={{ py: 1 }}>\n      <Grid container spacing={2}>\n        <Grid item><Button disabled={!downloadValid} onClick={download} startIcon={<Download />}><Trans t={t} i18nKey=\"downloadCard.button.download\" /></Button></Grid>\n        <Grid item flexGrow={1} ><Button disabled={!downloadValid} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeIcon icon={faClipboard} />}><Trans t={t} i18nKey=\"downloadCard.button.copy\" /></Button></Grid>\n        <Grid item><Button disabled={!downloadValid} color=\"error\" onClick={deleteDB} startIcon={<FontAwesomeIcon icon={faTrashAlt} />}><Trans t={t} i18nKey=\"downloadCard.button.delete\" /></Button></Grid>\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n","import { CardContent, Divider, MenuItem } from '@mui/material'\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardLight from '../Components/Card/CardLight'\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\nimport SqBadge from '../Components/SqBadge'\nimport { languageCodeList } from \"../i18n\"\nexport default function LanguageCard() {\n  const { t } = useTranslation();\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <LanguageDropdown />\n    </CardContent>\n  </CardLight>\n}\n\nconst nativeLanguages = {\n  \"chs\": \"中文 正体字\",\n  \"cht\": \"中文 繁體字\",\n  \"de\": \"Deutsch\",\n  \"en\": \"English\",\n  \"es\": \"español\",\n  \"fr\": \"français\",\n  \"id\": \"Bahasa Indonesia\",\n  \"ja\": \"日本語\",\n  \"ko\": \"한국어\",\n  \"pt\": \"Português\",\n  \"ru\": \"Русский язык\",\n  \"th\": \"ภาษาไทย\",\n  \"vi\": \"Tiếng Việt\"\n}\nexport function LanguageDropdown() {\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\n  const currentLang = i18n.languages[0];\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\n      <Trans i18nKey={`languages:${lang}`} />\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\n    </MenuItem>)}\n  </DropdownButton>\n}\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\nimport { Button, CardContent, Typography } from \"@mui/material\";\nimport CardLight from \"../Components/Card/CardLight\";\nimport { initGlobalSettings } from \"../GlobalSettings\";\nimport useDBState from \"../ReactHooks/useDBState\";\n\nexport default function TCToggleCard() {\n  const [{ tcMode }, setGlobalSettings] = useDBState(\"GlobalSettings\", initGlobalSettings)\n\n  return <CardLight>\n    <CardContent>\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\n      <Button fullWidth\n        onClick={() => setGlobalSettings({ tcMode: !tcMode })}\n        color={tcMode ? \"success\" : \"primary\"}\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\n        Theorycrafting Mode\n      </Button>\n    </CardContent>\n  </CardLight>\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import { ArtCharDatabase } from \"../Database\";\nimport { SandboxStorage } from \"../DBStorage\";\nimport { GOSource, IGO, IGOOD, ImportResult, newCounter } from \"../exim\";\nimport { setDBVersion } from \"../utils\";\nimport { merge } from \"./merge\";\nimport { migrate } from \"./migrate\";\nimport { parseArtifact, parseCharacter, parseWeapon } from \"./parse\";\n\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\n\nexport function importGOOD(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\n  switch (data.version) {\n    case 1: return importGOOD1(data, oldDatabase)\n  }\n}\n\n// TODO: Remove this function or move it somewhere else\nfunction importGOOD1(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\n  const result = parseImport(data)\n  if (!result) return\n  // TODO\n  // Handle the error thrown when the `storage` uses unsupported DB version.\n  migrate(result.storage)\n  // TODO\n  // The `merging` part can be separated into another step in DB migration.\n  // We can let the user select finer grain migration options, such as\n  // weapon-only migration.\n  merge(result, oldDatabase)\n  return result\n}\n\n/**\n * Parse GOODv1 data format into a parsed data of the version specified in `data`.\n * If the DB version is not specified, the default version is used.\n */\nfunction parseImport(data: IGOOD): ImportResult | undefined {\n  const source = data.source, storage = new SandboxStorage()\n  const result: ImportResult = { type: \"GOOD\", storage, source }\n\n  if (data.artifacts) {\n    result.artifacts = newCounter()\n    const counter = result.artifacts\n    counter.total = data.artifacts.length\n\n    data.artifacts.forEach((a, i) => {\n      const parsed = parseArtifact(a)\n      if (!parsed) counter.invalid.push(a)\n      else storage.set(`artifact_${i}`, a)\n    })\n  }\n  if (data.weapons) {\n    result.weapons = newCounter()\n    const counter = result.weapons\n    counter.total = data.weapons!.length\n\n    data.weapons.forEach((w, i) => {\n      const parsed = parseWeapon(w)\n      if (!parsed) counter.invalid.push(w)\n      else storage.set(`weapon_${i}`, w)\n      return parsed ? [parsed] : []\n    })\n\n    result.weapons = counter\n  }\n  if (data.characters) {\n    result.characters = newCounter()\n    const counter = result.characters\n    counter.total = data.characters.length\n\n    data.characters.forEach(c => {\n      const parsed = parseCharacter(c)\n      if (!parsed) counter.invalid.push(c)\n\n      // We invalidate build results here because we need to do\n      // it regardless of whether the file has character/art data.\n      if (c.buildSettings) {\n        c.buildSettings.builds = []\n        c.buildSettings.buildDate = 0\n      }\n\n      storage.set(`char_${c.key}`, c);\n    })\n  }\n  if (source === GOSource) {\n    const { dbVersion, states, buildSettings } = data as unknown as IGO\n    if (dbVersion < 8) return // Something doesn't look right here\n    setDBVersion(storage, dbVersion)\n    states && states.forEach(s => {\n      const { key, ...state } = s as any\n      if (!key) return\n      storage.set(`state_${key}`, state)\n    });\n    buildSettings && buildSettings.forEach(b => {\n      const { key, ...state } = b as any\n      if (!key) return\n      storage.set(`buildSetting_${key}`, state)\n    })\n  } else {\n    // DO NOT CHANGE THE DB VERSION\n    // Update this ONLY when it has been verified that base GOODv1 is a valid GO\n    // of that particular version. Any missing/extra keys could crash the system.\n    setDBVersion(storage, 8)\n  }\n  return result\n}\n","import { IArtifact, ICachedArtifact } from \"../../Types/artifact\";\nimport { ICharacter } from \"../../Types/character\";\nimport { ICachedWeapon, IWeapon } from \"../../Types/weapon\";\nimport { ArtCharDatabase } from \"../Database\";\nimport { ImportResult } from \"../exim\";\n\n/**\n * Merge the parsed storage (`result`) of the current DB version with existing\n * database (`base`) to create a new (parsed) storage. If the data for art/char/weapon\n * exists in `result`, it will be merged with `base` on best-effort basis. The\n * information in `result` takes precedence when the data exists in both locations.\n *\n * `result` must be using the latest DB format, i.e., it must already be `migrate`d.\n *\n * TODO:\n * This can be easily extended to include options whether to merge\n * each category (art/char/weapon) or to force the `result` data or `base` data.\n */\nexport function merge(result: ImportResult, base: ArtCharDatabase) {\n  const { artifacts: artCounter, weapons: weaponCounter, characters: charCounter, storage } = result\n\n  // Match artifacts for counter, metadata, and locations\n  if (artCounter) {\n    const arts = storage.entries.filter(([k]) => k.startsWith(\"artifact_\")).map(([key, v]) => [key, JSON.parse(v) as IArtifact] as const)\n    const idsToRemove = new Set(base._getArts().map(a => a.id))\n    const hasLocations = arts.some(a => a[1].location)\n\n    for (const [key, art] of arts) {\n      let { duplicated, upgraded } = base.findDuplicates(art)\n\n      // Don't reuse dups/upgrades\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\n\n      // Prefer dups over upgrades\n      const match: ICachedArtifact | undefined = duplicated[0] ?? upgraded[0]\n      if (match) {\n        idsToRemove.delete(match.id)\n        for (const key in match) {\n          if (!(key in art) && key !== \"location\")\n            art[key] = match[key]\n        }\n        if (!hasLocations)\n          art.location = match.location\n      }\n\n      if (duplicated.length) artCounter.unchanged.push(art)\n      else if (upgraded.length) artCounter.updated.push(art)\n      else artCounter.new.push(art)\n      storage.set(key, art)\n    }\n    artCounter.removed = [...idsToRemove].map(id => base._getArt(id)!)\n  } else\n    base._getArts().forEach((x, i) => storage.set(`artifact_${i}`, x))\n\n  // Match weapons for counter, metadata, and locations\n  if (weaponCounter) {\n    const weapons = storage.entries.filter(([k]) => k.startsWith(\"weapon_\")).map(([key, v]) => [key, JSON.parse(v) as IWeapon] as const)\n    const idsToRemove = new Set(base._getWeapons().map(w => w.id))\n    const hasLocations = weapons.some(weapon => weapon[1].location)\n\n    for (const [key, weapon] of weapons) {\n      let { duplicated, upgraded } = base.findDuplicateWeapons(weapon)\n\n      // Don't reuse dups/upgrades\n      duplicated = duplicated.filter(w => idsToRemove.has(w.id))\n      upgraded = upgraded.filter(w => idsToRemove.has(w.id))\n\n      // Prefer dups over upgrades\n      const match = (duplicated[0] ?? upgraded[0]) as ICachedWeapon | undefined\n      if (match) {\n        idsToRemove.delete(match.id)\n        for (const key in match) {\n          if (!(key in weapon) && key !== \"location\")\n            weapon[key] = match[key]\n        }\n        if (!hasLocations)\n          weapon.location = match.location\n      }\n\n      if (duplicated.length) weaponCounter.unchanged.push(weapon)\n      else if (upgraded.length) weaponCounter.updated.push(weapon)\n      else weaponCounter.new.push(weapon)\n      storage.set(key, weapon)\n    }\n    weaponCounter.removed = [...idsToRemove].map(id => base._getWeapon(id)!)\n  } else\n    base._getWeapons().forEach((x, i) => storage.set(`weapon_${i}`, x))\n\n  if (charCounter) {\n    const newCharEntries = storage.entries.filter(([k]) => k.startsWith(\"char_\")).map(([key, value]) => [key.slice(5), JSON.parse(value) as ICharacter] as const)\n    const newCharKeys = new Set(newCharEntries.map(([k]) => k))\n    const oldCharKeys = new Set(base._getCharKeys() as string[])\n\n    charCounter.updated = []\n    charCounter.new = []\n\n    const hasTeamData = newCharEntries.some(([_, char]) => char.team.some(x => x))\n\n    for (const [key, char] of newCharEntries) {\n      const match = base._getChar(key as any)\n      if (match) {\n        charCounter.updated.push(char)\n      } else {\n        charCounter.new.push(char)\n        continue\n      }\n\n      for (const key in match)\n        if (!(key in char))\n          char[key] = match[key]\n      if (!hasTeamData)\n        char.team = match.team\n\n      storage.set(`char_${key}`, char)\n    }\n\n    charCounter.removed = [...oldCharKeys].filter(([k]) => newCharKeys.has(k)).map(k => base._getChar(k as any)!)\n    charCounter.unchanged = []\n  } else\n    base._getCharKeys().forEach(k => storage.set(`char_${k}`, base._getChar(k)))\n\n  // Merge misc.\n  const newKeys = new Set(storage.keys)\n  for (const key of base.storage.keys)\n    if (!newKeys.has(key) && !key.startsWith(\"artifact_\") && !key.startsWith(\"weapon_\") && !key.startsWith(\"char_\"))\n      storage.setString(key, base.storage.getString(key)!)\n}\n","import { MainStatKey, SubstatKey } from '../../Types/artifact';\nimport { ArtifactSetKey, SlotKey } from \"../../Types/consts\";\nimport { ArtCharDatabase } from '../Database';\nimport { importGOOD } from './good';\n\nconst DefaultVersion = \"1\";\nconst GetConvertedArtifactsOfVersion: Dict<string, (data: any) => { artifacts: any[] }> = {\n  \"1\": importMona1\n};\n\nexport function importMona(dataObj: any, oldDatabase: ArtCharDatabase): ReturnType<typeof importGOOD> {\n  const version = dataObj.version ?? DefaultVersion\n  const converted = GetConvertedArtifactsOfVersion[version]?.(dataObj)\n\n  if (!converted)\n    return // TODO: Maybe add failure reason, or throws here\n\n  return importGOOD({\n    format: \"GOOD\",\n    source: \"mona-uranai\",\n    version: 1,\n    artifacts: converted.artifacts\n  }, oldDatabase)\n}\n\n// backup 0: https://github.com/wormtql/genshin_artifact/blob/main/src/assets/artifacts/data/*/index.js\n// backup 1: https://github.com/YuehaiTeam/cocogoat/blob/main/src/App/export/Mona.ts\n\nfunction importMona1(dataObj: any): { artifacts: any[] } {\n  const artifacts: any[] = []\n\n  for (const property in dataObj) {\n    if (!(property in ArtifactSlotKeyMap))\n      continue\n\n    for (const genshinArtArtifact of dataObj[property]) {\n      const { setName, star, level, position, mainTag } = genshinArtArtifact\n      const raw = {\n        setKey: ArtifactSetKeyMap[setName],\n        rarity: star,\n        level,\n        slotKey: ArtifactSlotKeyMap[position],\n        mainStatKey: ArtifactMainStatKeyMap[mainTag.name],\n        substats: genshinArtArtifact.normalTags.map(({ name, value }) => {\n          const key = ArtifactSubStatKeyMap[name]\n          return {\n            key,\n            value: key?.endsWith(\"_\") ?\n              Math.round(value * 1000) / 10 : // decimal to percentage\n              value,\n          }\n        }),\n      }\n      artifacts.push(raw)\n    }\n  }\n\n  return { artifacts }\n}\n\n// Referencing https://wormtql.gitbook.io/mona-uranai/ (they don't seem to update this anymore...)\n\nconst ArtifactSlotKeyMap: Dict<string, SlotKey> = {\n  \"flower\": \"flower\",\n  \"feather\": \"plume\",\n  \"sand\": \"sands\",\n  \"cup\": \"goblet\",\n  \"head\": \"circlet\",\n}\n\n// Referencing https://github.com/daydreaming666/Amenoma/blob/main/ArtScanner/ArtsInfo.py SetNamesGenshinArt\n\nconst ArtifactSetKeyMap: Dict<string, ArtifactSetKey> = {\n  \"adventurer\": \"Adventurer\",\n  \"archaicPetra\": \"ArchaicPetra\",\n  \"berserker\": \"Berserker\",\n  \"blizzardStrayer\": \"BlizzardStrayer\",\n  \"bloodstainedChivalry\": \"BloodstainedChivalry\",\n  \"braveHeart\": \"BraveHeart\",\n  \"crimsonWitch\": \"CrimsonWitchOfFlames\",\n  \"defenderWill\": \"DefendersWill\",\n  \"gambler\": \"Gambler\",\n  \"gladiatorFinale\": \"GladiatorsFinale\",\n  \"heartOfDepth\": \"HeartOfDepth\",\n  \"instructor\": \"Instructor\",\n  \"lavaWalker\": \"Lavawalker\",\n  \"luckyDog\": \"LuckyDog\",\n  \"maidenBeloved\": \"MaidenBeloved\",\n  \"martialArtist\": \"MartialArtist\",\n  \"noblesseOblige\": \"NoblesseOblige\",\n  \"prayersForDestiny\": \"PrayersForDestiny\",\n  \"prayersForIllumination\": \"PrayersForIllumination\",\n  \"prayersForWisdom\": \"PrayersForWisdom\",\n  \"prayersToSpringtime\": \"PrayersToSpringtime\",\n  \"resolutionOfSojourner\": \"ResolutionOfSojourner\",\n  \"retracingBolide\": \"RetracingBolide\",\n  \"scholar\": \"Scholar\",\n  \"exile\": \"TheExile\",\n  \"thunderingFury\": \"ThunderingFury\",\n  \"thunderSmoother\": \"Thundersoother\",\n  \"tinyMiracle\": \"TinyMiracle\",\n  \"travelingDoctor\": \"TravelingDoctor\",\n  \"viridescentVenerer\": \"ViridescentVenerer\",\n  \"wandererTroupe\": \"WanderersTroupe\",\n  \"tenacityOfTheMillelith\": \"TenacityOfTheMillelith\",\n  \"paleFlame\": \"PaleFlame\",\n  \"emblemOfSeveredFate\": \"EmblemOfSeveredFate\",\n  \"shimenawaReminiscence\": \"ShimenawasReminiscence\",\n  \"huskOfOpulentDreams\": \"HuskOfOpulentDreams\",\n  \"oceanHuedClam\": \"OceanHuedClam\",\n  \"EchoesOfAnOffering\": \"EchoesOfAnOffering\",\n  \"VermillionHereafter\": \"VermillionHereafter\",\n}\nconst ArtifactMainStatKeyMap: Dict<string, MainStatKey> = {\n  \"cureEffect\": \"heal_\",\n  \"lifeStatic\": \"hp\",\n  \"lifePercentage\": \"hp_\",\n  \"attackStatic\": \"atk\",\n  \"attackPercentage\": \"atk_\",\n  // \"defendStatic\": \"def\",\n  \"defendPercentage\": \"def_\",\n  \"critical\": \"critRate_\",\n  // // \"eCritical\": \"\",\n  \"criticalDamage\": \"critDMG_\",\n  \"elementalMastery\": \"eleMas\",\n  \"recharge\": \"enerRech_\",\n  \"thunderBonus\": \"electro_dmg_\",\n  \"fireBonus\": \"pyro_dmg_\",\n  \"waterBonus\": \"hydro_dmg_\",\n  \"iceBonus\": \"cryo_dmg_\",\n  \"windBonus\": \"anemo_dmg_\",\n  \"rockBonus\": \"geo_dmg_\",\n  // \"grassBonus\": \"dendro_dmg_\",  // the day will come...\n  \"physicalBonus\": \"physical_dmg_\",\n  // \"bonus\": \"\",\n  // \"aBonus\": \"\",\n  // \"bBonus\": \"\",\n  // \"eBonus\": \"\",\n  // \"qBonus\": \"\",\n}\nconst ArtifactSubStatKeyMap: Dict<string, SubstatKey> = {\n  \"lifeStatic\": \"hp\",\n  \"lifePercentage\": \"hp_\",\n  \"attackStatic\": \"atk\",\n  \"attackPercentage\": \"atk_\",\n  \"defendStatic\": \"def\",\n  \"defendPercentage\": \"def_\",\n  \"critical\": \"critRate_\",\n  \"criticalDamage\": \"critDMG_\",\n  \"elementalMastery\": \"eleMas\",\n  \"recharge\": \"enerRech_\",\n}\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Upload } from '@mui/icons-material'\nimport { Box, Button, CardContent, Divider, Grid, styled, Typography } from '@mui/material'\nimport { useContext, useMemo, useState } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\nimport { importGOOD } from '../Database/imports/good'\nimport { importMona } from '../Database/imports/mona'\n\nconst InvisInput = styled('input')({\n  display: 'none',\n});\n\nexport default function UploadCard() {\n  const { database } = useContext(DatabaseContext)\n  const { t } = useTranslation(\"settings\");\n  const [data, setdata] = useState(\"\")\n  const [filename, setfilename] = useState(\"\")\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\n  const dataObj: UploadData | undefined = useMemo(() => {\n    if (!data) return\n    let parsed: any\n    try {\n      parsed = JSON.parse(data)\n      if (typeof parsed !== \"object\") {\n        setErrorMsg(\"uploadCard.error.jsonParse\")\n        return\n      }\n    } catch (e) {\n      setErrorMsg(\"uploadCard.error.jsonParse\")\n      return\n    }\n    // Figure out the file format\n    if (parsed.version === \"1\" && [\"flower\", \"feather\", \"sand\", \"cup\", \"head\"].some(k => Object.keys(parsed).includes(k))) {\n      // Parse as mona format\n      const imported = importMona(parsed, database)\n      if (!imported) {\n        setErrorMsg(\"uploadCard.error.monaInvalid\")\n        return\n      }\n      return imported\n    } else if (parsed.format === \"GOOD\") {\n      // Parse as GOOD format\n      const imported = importGOOD(parsed, database)\n      if (!imported) {\n        setErrorMsg(\"uploadCard.error.goInvalid\")\n        return\n      }\n      return imported\n    }\n    setErrorMsg(\"uploadCard.error.unknown\")\n    return\n  }, [data, database])\n\n  const reset = () => {\n    setdata(\"\")\n    setfilename(\"\")\n  }\n  const onUpload = async e => {\n    const file = e.target.files[0]\n    e.target.value = null // reset the value so the same file can be uploaded again...\n    if (file) setfilename(file.name)\n    const reader = new FileReader()\n    reader.onload = () => setdata(reader.result as string)\n    reader.readAsText(file)\n  }\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\n    <CardContent>\n      <Grid container spacing={2} sx={{ mb: 1 }}>\n        <Grid item>\n          <label htmlFor=\"icon-button-file\">\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\n            <Button component=\"span\" startIcon={<Upload />}>Upload</Button>\n          </label>\n        </Grid>\n        <Grid item flexGrow={1}>\n          <CardDark sx={{ px: 2, py: 1 }}>\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\n          </CardDark>\n        </Grid>\n      </Grid>\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\n      {UploadInfo(dataObj) ?? errorMsg}\n    </CardContent>\n    {UploadAction(dataObj, reset)}\n  </CardLight>\n}\n\nfunction UploadInfo(data: UploadData | undefined) {\n  switch (data?.type) {\n    case \"GOOD\": return <GOODUploadInfo data={data} />\n  }\n}\nfunction UploadAction(data: UploadData | undefined, reset: () => void) {\n  switch (data?.type) {\n    case \"GOOD\": return <GOUploadAction data={data} reset={reset} />\n  }\n}\n\nfunction GOODUploadInfo({ data: { source, artifacts, characters, weapons }, data }: { data: ImportResult }) {\n  const { t } = useTranslation(\"settings\")\n  return <CardDark>\n    <CardContent sx={{ py: 1 }}>\n      <Typography>\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent >\n      <Grid container spacing={2}>\n        <Grid item flexGrow={1}>\n          <MergeResult result={artifacts} type=\"arts\" />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <MergeResult result={weapons} type=\"weapons\" />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <MergeResult result={characters} type=\"chars\" />\n        </Grid>\n      </Grid>\n    </CardContent>\n  </CardDark>\n}\nfunction MergeResult({ result, type }: { result?: ImportResultCounter<any>, type: string }) {\n  const { t } = useTranslation(\"settings\")\n  if (!result) return null\n  return <CardLight >\n    <CardContent sx={{ py: 1 }}>\n      <Typography>\n        <Trans t={t} i18nKey={`count.${type}`} /> {result.total ?? 0}\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {result.total}</Typography>\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.updated.length}</strong> / {result.total}</Typography>\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {result.total}</Typography>\n      <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.removed.length}</strong></Typography>\n      {!!result.invalid?.length && <div>\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {result.total}</Typography>\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\n      </div>}\n    </CardContent>\n  </CardLight>\n}\n\nfunction GOUploadAction({ data: { storage }, data, reset }: { data: ImportResult, reset: () => void }) {\n  const { database, setDatabase } = useContext(DatabaseContext)\n  const { t } = useTranslation(\"settings\")\n  const dataValid = data.characters?.total || data.artifacts?.total || data.weapons?.total\n  const replaceDB = () => {\n    database.storage.clear()\n    database.storage.copyFrom(storage)\n    setDatabase(new ArtCharDatabase(database.storage, true))\n    reset()\n  }\n\n  return <><Divider /><CardContent sx={{ py: 1 }}>\n    <Button color={dataValid ? \"success\" : \"error\"} disabled={!dataValid} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\n  </CardContent></>\n}\n\ntype UploadData = ImportResult\n","import { CardContent, Divider, Typography } from '@mui/material'\nimport ReactGA from 'react-ga4'\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardDark from '../Components/Card/CardDark'\nimport DownloadCard from './DownloadCard'\nimport LanguageCard from './LanguageCard'\nimport TCToggleCard from './TCToggleCard'\nimport UploadCard from './UploadCard'\n\nexport default function PageSettings() {\n  const { t } = useTranslation([\"settings\"]);\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\n\n  return <CardDark sx={{ my: 1 }}>\n    <CardContent sx={{ py: 1 }}>\n      <Typography variant=\"subtitle1\">\n        <Trans t={t} i18nKey=\"title\" />\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n      <LanguageCard />\n      <DownloadCard />\n      <UploadCard />\n      <TCToggleCard />\n    </CardContent>\n  </CardDark>\n}\n","import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\n  const { database } = useContext(DatabaseContext)\n  const [state, setState] = useState(database._getState<O>(key, init))\n\n  useEffect(() =>\n    key ? database.followState(key, setState) : undefined,\n    [key, setState, database])\n  const updateState = useCallback(\n    value => database.updateState(key, value),\n    [database, key],\n  )\n\n  return [state, updateState]\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","DropdownButton","title","children","id","props","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","initGlobalSettings","tcMode","GOSource","exportGOOD","storage","format","dbVersion","currentDBVersion","source","version","characters","entries","filter","startsWith","map","value","result","JSON","parse","buildSettings","builds","buildDate","artifacts","weapons","states","key","split","DownloadCard","useContext","DatabaseContext","database","setDatabase","t","useTranslation","numChar","_getCharKeys","length","numArt","_getArts","numWeapon","_getWeapons","downloadValid","deleteDB","clear","ArtCharDatabase","copyToClipboard","navigator","clipboard","writeText","stringify","then","alert","catch","console","error","download","dateStr","Date","toISOString","replace","replaceAll","JSONStr","filename","a","document","createElement","href","encodeURIComponent","target","body","appendChild","click","removeChild","CardContent","sx","py","Typography","variant","Trans","i18nKey","Divider","Grid","container","mb","spacing","item","xs","md","Button","disabled","startIcon","Download","flexGrow","color","icon","faClipboard","faTrashAlt","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","fullWidth","language","languageCodeList","MenuItem","selected","TCToggleCard","useDBState","setGlobalSettings","gutterBottom","CheckBox","CheckBoxOutlineBlank","createSvgIcon","_jsx","d","importGOOD","data","oldDatabase","SandboxStorage","type","total","invalid","new","updated","unchanged","removed","counter","forEach","i","parseArtifact","set","push","w","parsed","parseWeapon","c","parseCharacter","setDBVersion","s","state","b","parseImport","migrate","base","artCounter","weaponCounter","charCounter","arts","v","idsToRemove","Set","hasLocations","some","location","art","findDuplicates","duplicated","upgraded","has","match","delete","_getArt","x","weapon","findDuplicateWeapons","_getWeapon","newCharEntries","slice","newCharKeys","oldCharKeys","hasTeamData","team","char","_getChar","k","newKeys","keys","setString","getString","merge","importGOOD1","GetConvertedArtifactsOfVersion","dataObj","property","ArtifactSlotKeyMap","genshinArtArtifact","setName","star","level","position","mainTag","raw","setKey","ArtifactSetKeyMap","rarity","slotKey","mainStatKey","ArtifactMainStatKeyMap","name","substats","normalTags","ArtifactSubStatKeyMap","endsWith","Math","round","InvisInput","display","UploadCard","setdata","setfilename","errorMsg","setErrorMsg","useMemo","e","Object","includes","imported","converted","importMona","onUpload","file","files","reader","FileReader","onload","readAsText","htmlFor","accept","onChange","component","Upload","px","faFileCode","faArrowLeft","Box","fontFamily","minHeight","resize","UploadInfo","UploadAction","GOODUploadInfo","reset","GOUploadAction","MergeResult","dataValid","copyFrom","faFileUpload","PageSettings","ReactGA","hitType","page","my","flexDirection","gap","init","_getState","setState","useEffect","followState","updateState","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err"],"sourceRoot":""}