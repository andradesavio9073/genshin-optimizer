{"version":3,"file":"static/js/BackgroundWorker.220e8d1e.worker.js","mappings":"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,CAAC,SAAU,QAAS,QAAS,SAAU,cAEnC,CAAI,YAAJ,OADJ,CAAC,QAAS,MAAO,UAAW,QAAS,OAAQ,SA0P9C,UAzJQ,CAChC,kBACA,gBACA,sBACA,kBACA,YACA,gBACA,YACA,gBACA,kBACA,cACA,eACA,oBACA,kBACA,YACA,YACA,uBACA,uBACA,mBACA,iBACA,mBACA,cACA,gBACA,eACA,eACA,oBACA,gBACA,gBACA,WACA,uBAImC,CACnC,YACA,oBACA,yBACA,aACA,qBACA,gBACA,wBACA,cACA,mBACA,cACA,mBACA,cACA,uBACA,kBACA,wBACA,eACA,qBACA,eACA,uBACA,oBACA,UACA,cACA,mBACA,aACA,sBACA,mBAIkC,CAClC,qBACA,iBACA,cACA,kBACA,eACA,aACA,cACA,mBACA,qBACA,gBACA,UACA,YACA,mBACA,cACA,4BACA,uBACA,aACA,eACA,cACA,WACA,mBACA,kBACA,eAI8B,CAC9B,cACA,UACA,gBACA,mBACA,cACA,iBACA,iBACA,iBACA,WACA,aACA,YACA,oBACA,aACA,YACA,WACA,oBACA,WACA,aACA,WACA,OACA,iBACA,qBACA,oBACA,cACA,YACA,gBACA,qBACA,kBACA,gBAImC,CACnC,mBACA,kBACA,cACA,aACA,sBACA,kBACA,gBACA,cACA,eACA,gBACA,6BACA,aACA,YACA,eACA,eACA,oBACA,iBACA,iBACA,gBACA,uBACA,eACA,aACA,aACA,gCACA,eACA,yBCsGeC,IAAAA,EAAAA,IAAAA,KAoBAC,GA3TjB,SAASC,EAASC,EAAkBC,GAAmG,IAA5EC,EAA2E,wDAC9HC,EAAc,IAAI5F,IAAgB6F,EAAiB,IAAI7F,IAE7D,SAAS8F,EAAMC,EAAeC,GACxBA,EAAUJ,EAAYvF,IAAI0F,GACzBA,EAAK7G,SAAS1I,SAAQ,SAAAyP,GACzB,IAAMrB,EAAKqB,EACXL,EAAYxF,IAAIwE,IAAOiB,EAAexF,IAAIuE,MAI9C,IAAMsB,EAAU,IAAIlG,IA6BpB,GA3BAL,EAAa8F,GAAO,SAAAU,OAAU,SAAA1R,GAC5B,IAA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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Util/Util.ts","Formula/utils.ts","Formula/internal.ts","Formula/optimization.ts","Types/consts.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","PageCharacter/CharacterDisplay/Tabs/TabOptimize/ComputeWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BackgroundWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/SplitWorker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\";\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) {\n            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n          }\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\nexport function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\nexport function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Assumes that the object entries are all primitives + objects\n * shallow copy the object,\n * deep copy the\n * @param obj\n * @returns\n */\nexport function deepClone<T>(obj: T): T {\n  if (!obj) return obj\n  if (!Object.keys(obj).length) return {} as T\n  const ret = { ...obj }\n  Object.entries(obj).forEach(([k, v]: any) => {\n    if (typeof v !== \"object\") return\n    ret[k] = JSON.parse(JSON.stringify(v))\n  })\n  return ret\n}\n\nexport const clamp = (val, low, high) => {\n  if (val < low) return low;\n  if (val > high) return high;\n  return val\n}\nexport const getArrLastElement = (arr) =>\n  arr.length ? arr[arr.length - 1] : null\n\nexport const clamp01 = (val) => clamp(val, 0, 1)\nexport const clampPercent = (val) => clamp(val, 0, 100)\n\n//use to pretty print timestamps, or anything really.\nexport function strPadLeft(string, pad, length) {\n  return (new Array(length + 1).join(pad) + string).slice(-length);\n}\n\n//fuzzy compare strings. longer the distance, the higher the mismatch.\nexport function hammingDistance(str1, str2) {\n  var dist = 0;\n  str1 = str1.toLowerCase();\n  str2 = str2.toLowerCase();\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\n    let match = true\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\n      match = false\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\n      match = true\n    if (!match) dist++\n  }\n  return dist;\n}\n\n//multiplies every numerical value in the obj by a multiplier.\nexport function objMultiplication(obj, multi) {\n  if (multi === 1) return obj\n  Object.keys(obj).forEach((prop: any) => {\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\n  })\n  return obj\n}\n\n//assign obj.[keys...] = value\nexport function layeredAssignment(obj, keys: readonly string[], value) {\n  keys.reduce((accu, key, i, arr) => {\n    if (i === arr.length - 1) return (accu[key] = value)\n    if (!accu[key]) accu[key] = {}\n    return accu[key]\n  }, obj)\n  return obj\n}\n//get the value in a nested object, giving array of path\nexport function objPathValue(obj: object | undefined, keys: readonly string[]): any {\n  if (!obj || !keys) return undefined;\n  !Array.isArray(keys) && console.error(keys)\n  return keys.reduce((a, k) => a?.[k], obj)\n}\n//delete the value denoted by the path. Will also delete empty objects as well.\nexport function deletePropPath(obj, path) {\n  const tempPath = [...path]\n  const lastKey = tempPath.pop()\n  const objPathed = objPathValue(obj, tempPath)\n  delete objPathed?.[lastKey];\n}\n\nexport function objClearEmpties(o) {\n  for (const k in o) {\n    if (typeof o[k] !== \"object\") continue\n    objClearEmpties(o[k])\n    if (!Object.keys(o[k]).length) delete o[k];\n  }\n}\nexport function crawlObject(obj, keys, validate, cb) {\n  if (validate(obj)) cb(obj, keys)\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\n}\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\n\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\n  return typeof value === \"function\" ? (value as any)(arg) : value\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyMap<K extends string | number, V>(keys: readonly K[], map: (key: K, i: number) => V): StrictDict<`${K}`, V> {\n  return Object.fromEntries(keys.map((k, i) => [k, map(k, i)])) as any\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyValueMap<T, K extends string | number, V>(items: readonly T[], map: (item: T) => [K, V]): StrictDict<`${K}`, V> {\n  return Object.fromEntries(items.map(t => map(t))) as any\n}\n\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>>\nexport function objectMap<K extends string, V, T>(obj: Record<K, V>, fn: (value: V, key: `${K}`, index: number) => T): Record<K, T>\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>> {\n  return Object.fromEntries(Object.entries(obj).map(\n    ([k, v], i) => [k, fn(v, k, i)]\n  )) as any\n}\n\nconst rangeGen = function* (from: number, to: number): Iterable<number> {\n  for (let i = from; i <= to; i++) yield i;\n};\n\nexport function range(from: number, to: number): number[] {\n  return [...rangeGen(from, to)]\n}\n\nexport function assertUnreachable(value: never): never {\n  throw new Error(`Should not reach this with value ${value}`)\n}\n\n// cartesian product of list of arrays\nexport function cartesian<T>(...q: T[][]): T[][] {\n  return q.reduce((a, b) => a.flatMap(d => b.map(e => [d, [e]].flat())), [[]] as T[][])\n}\n","\nimport { objectKeyMap } from \"../Util/Util\"\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\n\ntype Num = number | NumNode\ntype Str = string | undefined | StrNode\ntype Any = Num | Str\n\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\nexport const one = percent(1), naught = percent(0)\n\nexport function constant(value: number, info?: Info): NumNode\nexport function constant(value: string | undefined, info?: Info): StrNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\n  return { operation: \"const\", operands: [], value, info }\n}\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\nexport function percent(value: number, info?: Info): NumNode {\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\n  return constant(value, { key: \"_\", ...info })\n}\n/** Inject `info` to the node in-place */\nexport function infoMut(node: NumNode, info: Info): NumNode\nexport function infoMut(node: StrNode, info: Info): StrNode\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\n  if (info) node.info = { ...node.info, ...info }\n  return node\n}\n\n/** `table[string] ?? defaultNode` */\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\n  return { operation: \"lookup\", operands, table, info }\n}\n\n/** min( x1, x2, ... ) */\nexport function min(...values: Num[]): NumNode {\n  return { operation: \"min\", operands: intoOps(values) }\n}\n/** max( x1, x2, ... ) */\nexport function max(...values: Num[]): NumNode {\n  return { operation: \"max\", operands: intoOps(values) }\n}\n/** x1 + x2 + ... */\nexport function sum(...values: Num[]): NumNode {\n  return { operation: \"add\", operands: intoOps(values) }\n}\n/** x1 * x2 * ... */\nexport function prod(...values: Num[]): NumNode {\n  return { operation: \"mul\", operands: intoOps(values) }\n}\n/** x / (x + c) */\nexport function frac(x: Num, c: Num): NumNode {\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\n}\nexport function res(base: Num): NumNode {\n  return { operation: \"res\", operands: intoOps([base]) }\n}\n\n/** v1 == v2 ? pass : 0 */\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\n}\n/** v1 == v2 ? pass : `undefined` */\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\n}\n/** v1 != v2 ? pass : 0 */\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\n}\n/** v1 >= v2 ? pass : 0 */\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 >= v2 ? pass : `undefined` */\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 < v2 ? pass : 0 */\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\n}\n\n/** v1 >= v2 ? pass : fail */\nexport function cmp(v1: Num, v2: Num, pass: Num, fail: Num, info?: Info): NumNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(fail)] as any\n  return { operation: \"threshold\", operands, info }\n}\n\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\n  if (nodeList.operation) {\n    if (nodeList.operation !== \"read\")\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\n    return { ...nodeList, path: prefix }\n  } else {\n    return objectKeyMap(Object.keys(nodeList), key =>\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\n  }\n}\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\n  return { operation: \"data\", operands: [base], data }\n}\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\n  return { operation: \"data\", operands: [base], data, reset: true, info }\n}\n\n\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\n}\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\n  return { operation: \"read\", operands: [], path, type: \"string\" }\n}\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\n}\n/**\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\n */\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\n}\nexport function stringPrio(...operands: Str[]): StrNode {\n  return { operation: \"prio\", operands: intoOps(operands) }\n}\n/** list[index] */\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\n  return { operation: \"subscript\", operands: [index], list, info }\n}\n\nfunction intoOps(values: Num[]): NumNode[]\nfunction intoOps(values: Str[]): StrNode[]\nfunction intoOps(values: Any[]): AnyNode[]\nfunction intoOps(values: Any[]): AnyNode[] {\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\n}\nfunction intoV(value: Num): NumNode\nfunction intoV(value: Str): StrNode\nfunction intoV(value: Num | Str): NumNode | StrNode\nfunction intoV(value: Any): AnyNode {\n  return (typeof value !== \"object\") ? constant(value) : value\n}\n\ntype _NodeList = {\n  [key: string]: NodeList\n} & {\n  operation?: never\n}\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\n\n/**\n * `v1` === `v2` ? `match` : `unmatch`\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\n */\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, StrNode>\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\n}\n\nexport function cmpNode(a: NumNode, b: NumNode): boolean {\n  if (a.operation !== b.operation) return false;\n  if (a.operands.length !== b.operands.length) return false;\n\n  switch (a.operation) {\n    case 'read':\n      if (b.operation !== a.operation) return false; // just doing this so typescript stops yelling at me\n      return a.path.every((ai, i) => ai === b.path[i])\n    case 'const':\n      if (b.operation !== a.operation) return false; // just doing this so typescript stops yelling at me\n      return a.value === b.value\n    case 'mul': case 'add': case 'min': case 'max':  // commutative ops.\n      if (b.operation !== a.operation) return false; // just doing this so typescript stops yelling at me\n      let used = [] as number[]\n      return a.operands.every((ai, i) => b.operands.some((bj, j) => {\n        if (used.includes(j)) return false\n        if (cmpNode(ai, bj)) {\n          used.push(j)\n          return true\n        }\n        return false\n      }))\n    default:\n      return a.operands.every((ai, i) => cmpNode(ai as NumNode, b.operands[i] as NumNode))\n  }\n}\n\n// Hash function pulled from StackOverflow\n//   https://stackoverflow.com/a/52171480\nconst cyrb53 = function (str: string, seed = 0) {\n  let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n\n// I made these numbers up; we might get better performance with different choice.\nexport function hashNode(n: NumNode): number {\n  let hsh = Math.imul(cyrb53(n.operation), 5234543537);\n  switch (n.operation) {\n    case 'const':\n      return hsh ^ cyrb53(n.value.toString(2))\n    case 'mul': case 'add': case 'min': case 'max':  // commutative ops.\n      return n.operands.reduce((hsh, ni) => hsh ^ hashNode(ni), hsh)\n    default:\n      return (n.operands as NumNode[]).reduce((hsh, ni) => Math.imul(hsh ^ hashNode(ni), 9923429423), hsh)\n  }\n}\n","import { AnyNode, NumNode, StrNode } from \"./type\"\nimport { constant } from \"./utils\"\n\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\n\n  function traverse(formula: (NumNode | StrNode)) {\n    if (visited.has(formula)) return\n\n    if (visiting.has(formula)) {\n      console.error(\"Found cyclical dependency during formula traversal\")\n      return\n    }\n    visiting.add(formula)\n\n    topDown(formula)\n\n    formula.operands.forEach(traverse)\n\n    bottomUp(formula)\n\n    visiting.delete(formula)\n    visited.add(formula)\n  }\n\n  formulas.forEach(traverse)\n}\n\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\n  const visiting = new Set<(NumNode | StrNode)>()\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    let topDown = topDownMapped.get(formula)\n    if (topDown) return topDown\n    topDown = topDownMap(formula)\n\n    let bottomUp = bottomUpMapped.get(topDown)\n    if (bottomUp) return bottomUp\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n    visiting.add(topDown)\n\n    bottomUp = bottomUpMap(traverse(topDown), formula)\n\n    visiting.delete(topDown)\n\n    topDownMapped.set(formula, bottomUp)\n    bottomUpMapped.set(topDown, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    const operands = formula.operands.map(check)\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\n  }\n\n  const result = formulas.map(check)\n  return arrayEqual(result, formulas) ? formulas : result\n}\n\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\n  const visiting = new Set<AnyNode>()\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\n    let topDownMapping = topDownByContext.get(parentContextId)\n    if (!topDownMapping) {\n      topDownMapping = new Map()\n      topDownByContext.set(parentContextId, topDownMapping)\n    }\n\n    let topDown = topDownMapping.get(formula)\n    if (topDown) return topDown\n    let topDownContextId: number\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\n    if (!bottomUpMapping) {\n      bottomUpMapping = new Map()\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\n    }\n\n    let bottomUp = bottomUpMapping.get(topDown)\n    if (bottomUp) return bottomUp\n\n    visiting.add(topDown)\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\n    visiting.delete(topDown)\n\n    bottomUpMapping.set(topDown, bottomUp)\n    topDownMapping.set(formula, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\n    const operands = formula.operands.map(f => check(f, contextId))\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\n  }\n\n  const result = formulas.map(f => check(f, baseContextId))\n  return arrayEqual(formulas, result) ? formulas : result\n}\n\ntype ContextID = number\n\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\n  if (a === undefined) return b === undefined\n  if (b === undefined) return false\n\n  return a.length === b.length && a.every((value, i) => value === b[i])\n}\n","import { assertUnreachable, objectKeyMap, objPathValue } from \"../Util/Util\"\nimport { forEachNodes, mapFormulas } from \"./internal\"\nimport { constant } from \"./utils\"\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode } from \"./type\"\n\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\n  min: (x: number[]): number => Math.min(...x),\n  max: (x: number[]): number => Math.max(...x),\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\n}\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\n  ...allCommutativeMonoidOperations,\n  res: ([res]: number[]): number => {\n    if (res < 0) return 1 - res / 2\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\n    return 1 - res\n  },\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\n}\n\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\n\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  formulas = constantFold(formulas, topLevelData, shouldFold)\n  formulas = flatten(formulas)\n  formulas = deduplicate(formulas)\n  return formulas\n}\nexport function precompute(formulas: NumNode[], binding: (readNode: ReadNode<number>) => string): [compute: () => Float64Array, mapping: Dict<string, number>, buffer: Float64Array] {\n  // TODO: Use min-cut to minimize the size of interim array\n  type Reference = string | number | { ins: Reference[] }\n\n  const uniqueReadStrings = new Set<string>()\n  const uniqueNumbers = new Set<number>()\n  const mapping = new Map<NumNode, Reference>()\n\n  forEachNodes(formulas, _ => { }, f => {\n    const { operation } = f\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || (f.accu && f.accu !== \"add\"))\n          throw new Error(`Unsupported ${operation} node in precompute`)\n        const name = binding(f)\n        uniqueReadStrings.add(name)\n        mapping.set(f, name)\n        break\n      case \"add\": case \"min\": case \"max\": case \"mul\":\n      case \"threshold\": case \"res\": case \"sum_frac\":\n        mapping.set(f, { ins: f.operands.map(op => mapping.get(op)!) })\n        break\n      case \"const\":\n        if (typeof f.value !== \"number\")\n          throw new Error(\"Found string constant while precomputing\")\n        const value = f.value\n        uniqueNumbers.add(value)\n        mapping.set(f as ConstantNode<number>, value)\n        break\n      case \"match\": case \"lookup\": case \"subscript\":\n      case \"prio\": case \"small\":\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  /**\n   * [ Outputs , Input , Constants, Deduplicated Compute ]\n   *\n   * Note that only Compute nodes are deduplicated. Outputs are arranged\n   * in the same order as formulas even when they are duplicated. Inputs\n   * are arranged in the same order as the read strings, even when they\n   * overlap with outputs. If an output is a constant or a compute node,\n   * only put the data in the output region.\n   */\n  const locations = new Map<NumNode | number | string, number>()\n\n  const readStrings = [...uniqueReadStrings], readOffset = formulas.length\n  const constValues = [...uniqueNumbers]\n  const computations: { out: number, ins: number[], op: (_: number[]) => number, buff: number[] }[] = []\n\n  formulas.forEach((f, i) => {\n    locations.set(f, i)\n    if (f.operation === \"const\") locations.set(f.value, i)\n  })\n  // After this line, if some outputs are also read node, `locations`\n  // will point to the one in the read node portion instead.\n  readStrings.forEach((str, i) => locations.set(str, i + formulas.length))\n  let offset = formulas.length + readStrings.length\n  constValues.forEach(value => locations.has(value) || locations.set(value, offset++))\n\n  // `locations` is stable from this point on. We now only append new values.\n  // There is no change to existing values.\n  //\n  // DO NOT read from `location` prior to this line.\n  mapping.forEach((ref, node) => {\n    if (typeof ref !== \"object\") {\n      locations.set(node, locations.get(ref)!)\n      return\n    }\n    if (!locations.has(node)) locations.set(node, offset++)\n    computations.push({\n      out: locations.get(node)!,\n      ins: node.operands.map(op => locations.get(op)!),\n      op: allOperations[node.operation],\n      buff: Array(node.operands.length).fill(0),\n    })\n  })\n\n  const buffer = new Float64Array(offset).fill(0)\n  uniqueNumbers.forEach(number => buffer[locations.get(number)!] = number)\n\n  // Copy target for when some outputs are duplicated\n  const copyList = formulas.map((node, i) => {\n    const src = locations.get(node)!\n    return src !== i ? [src, i] : undefined!\n  }).filter(x => x)\n  const copyFormula = copyList.length ? () => {\n    copyList.forEach(([src, dst]) => buffer[dst] = buffer[src])\n  } : undefined\n\n  return [() => {\n    computations.forEach(({ out, ins, op, buff }) => {\n      ins.forEach((i, j) => buff[j] = buffer[i])\n      buffer[out] = op(buff)\n    })\n    copyFormula?.()\n    return buffer\n  }, objectKeyMap(readStrings, (_, i) => readOffset + i), buffer]\n}\n\nfunction flatten(formulas: NumNode[]): NumNode[] {\n  return mapFormulas(formulas, f => f, _formula => {\n    let result = _formula\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\n      const formula = _formula as ComputeNode\n      const { operation } = formula\n\n      let flattened = false\n      const operands = formula.operands.flatMap(dep =>\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\n      result = flattened ? { ...formula, operands } : formula\n    }\n\n    return result\n  })\n}\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\n    const result = new Map<T, number>()\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\n    return result\n  }\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\n  }\n\n  const wrap = {\n    common: {\n      counts: new Map<NumNode, number>(),\n      formulas: new Set<NumNode>(),\n      operation: \"add\" as Operation\n    }\n  }\n\n  while (true) {\n    let next: typeof wrap.common | undefined\n\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\n\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\n      candidatesByOperation.set(operation, [])\n\n    formulas = mapFormulas(formulas, _formula => {\n      if (wrap.common.formulas.has(_formula as NumNode)) {\n        const formula = _formula as ComputeNode\n        const remainingCounts = new Map(wrap.common.counts)\n        const operands = formula.operands.filter(dep => {\n          const count = remainingCounts.get(dep)\n          if (count) {\n            remainingCounts.set(dep, count - 1)\n            return false\n          }\n          return true\n        })\n\n        if (!operands.length)\n          return factored\n        operands.push(factored)\n        return { ...formula, operands }\n      }\n      return _formula\n    }, _formula => {\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\n      const formula = _formula as ComputeNode\n\n      if (next) {\n        if (next.operation === formula.operation) {\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\n          const nextCounts = next.counts\n          let total = 0\n\n          for (const [dependency, currentCount] of currentCounts.entries()) {\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\n            if (commonCount) {\n              commonCounts.set(dependency, commonCount)\n              total += commonCount\n            } else commonCounts.delete(dependency)\n          }\n          if (total > 1) {\n            next.counts = commonCounts\n            next.formulas.add(formula)\n          }\n        }\n      } else {\n        const candidates = candidatesByOperation.get(formula.operation)!\n        const counts = elementCounts(formula.operands)\n\n        for (const [candidate, candidateCounts] of candidates) {\n          let total = 0\n\n          const commonCounts = new Map<NumNode, number>()\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\n            if (count) {\n              commonCounts.set(dependency, count)\n              total += count\n            }\n          }\n          if (total > 1) {\n            next = {\n              counts: commonCounts,\n              formulas: new Set([formula, candidate]),\n              operation: formula.operation\n            }\n            candidatesByOperation.clear()\n            break\n          }\n        }\n        if (!next) candidates.push([formula, counts])\n      }\n\n      return formula\n    })\n\n    if (next) wrap.common = next\n    else break\n  }\n\n  return formulas\n}\n\n/**\n * Replace nodes with known values with appropriate constants,\n * avoiding removal of any nodes that pass `isFixed` predicate\n */\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\n  const origin: Context = { data: [], processed: new Map() }\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\n\n  function fold(formula: StrNode, context: Context): StrNode\n  function fold(formula: NumNode, context: Context): NumNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\n    const old = context.processed.get(formula)\n    if (old) return old\n\n    const { operation } = formula\n    let result: NumNode | StrNode\n    switch (operation) {\n      case \"const\": return formula\n      case \"add\": case \"mul\": case \"max\": case \"min\":\n        const f = allOperations[operation]\n        const numericOperands: number[] = []\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\n          const folded = fold(formula, context)\n          return (folded.operation === \"const\")\n            ? (numericOperands.push(folded.value), false)\n            : true\n        }).map(x => fold(x, context))\n        const numericValue = f(numericOperands)\n\n        // Fold degenerate cases. This may incorrectly compute NaN\n        // results, which shouldn't appear under expected usage.\n        // - zero\n        //   - 0 * ... = 0\n        // - infinity\n        //   - max(infinity, ...) = infinity\n        //   - infinity + ... = infinity\n        // - (-infinity)\n        //   - min(-infinity, ...) - infinity\n        //   - (-infinity) + ... = -infinity\n        // - NaN\n        //   - operation(NaN, ...) = NaN\n        if (!isFinite(numericValue)) {\n          if ((operation !== \"mul\") &&\n            (operation !== \"max\" || numericValue > 0) &&\n            (operation !== \"min\" || numericValue < 0)) {\n            result = constant(numericValue)\n            break\n          }\n        } else if (operation === \"mul\" && numericValue === 0) {\n          result = constant(numericValue)\n          break\n        }\n\n        if (numericValue !== f([])) // Skip vacuous values\n          formulaOperands.push(constant(numericValue))\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\n        else result = { operation, operands: formulaOperands }\n        break\n      case \"res\": case \"sum_frac\": {\n        const operands = formula.operands.map(x => fold(x, context))\n        const f = allOperations[operation]\n        if (operands.every(x => x.operation === \"const\"))\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\n        else result = { ...formula, operands }\n        break\n      }\n      case \"lookup\": {\n        const index = fold(formula.operands[0], context)\n        if (index.operation === \"const\") {\n          const selected = formula.table[index.value!] ?? formula.operands[1]\n          if (selected) {\n            result = fold(selected, context)\n            break\n          }\n        }\n        throw new Error(`Unsupported ${operation} node while folding`)\n      }\n      case \"prio\": {\n        const first = formula.operands.find(op => {\n          const folded = fold(op, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          return folded.value !== undefined\n        })\n        result = first ? fold(first, context) : constant(undefined)\n        break\n      }\n      case \"small\": {\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\n        for (const operand of formula.operands) {\n          const folded = fold(operand, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\n            smallest = folded\n        }\n        result = smallest ?? constant(undefined)\n        break\n      }\n      case \"match\": {\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\n          throw new Error(`Unsupported ${operation} node while folding`)\n        result = (v1.value === v2.value) ? match : unmatch\n        break\n      }\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\n        if (value.operation === \"const\" && threshold.operation === \"const\")\n          result = value.value >= threshold.value ? pass : fail\n        else\n          result = { ...formula, operands: [value, threshold, pass, fail] }\n        break\n      }\n      case \"subscript\": {\n        const [index] = formula.operands.map(x => fold(x, context))\n        result = (index.operation === \"const\")\n          ? constant(formula.list[index.value])\n          : { ...formula, operands: [index] }\n        break\n      }\n      case \"read\": {\n        const operands = context.data\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\n          .filter(x => x)\n\n        if (operands.length === 0) {\n          if (shouldFold(formula)) {\n            const { accu } = formula\n            if (accu === undefined || accu === \"small\")\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\n            else result = constant(allOperations[accu]([]))\n          } else result = formula\n        } else if (formula.accu === undefined || operands.length === 1)\n          result = fold(operands[operands.length - 1], context)\n        else\n          result = fold({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\n        break\n      }\n      case \"data\":\n        if (formula.reset) context = origin\n        const map = nextContextMap.get(context)!\n        let nextContext = map.get(formula.data)\n        if (!nextContext) {\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\n          nextContextMap.set(nextContext, new Map())\n          map.set(formula.data, nextContext)\n        }\n        result = fold(formula.operands[0], nextContext)\n        break\n      default: assertUnreachable(operation)\n    }\n\n    context.processed.set(formula, result)\n    return result\n  }\n\n  const context = { data: [topLevelData], processed: new Map() }\n  nextContextMap.set(context, new Map())\n  nextContextMap.get(origin)!.set(topLevelData, context)\n  return formulas.map(x => fold(x, context))\n}\n\nexport const testing = {\n  constantFold, flatten, deduplicate\n}\n","export const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\nexport const allRegions = [\"mondstadt\", \"liyue\", \"inazuma\", \"sumeru\", \"fontaine\", \"natlan\", \"snezhnaya\", \"khaenriah\"] as const\nexport const allReactionModes = [\"hydro_vaporize\", \"pyro_vaporize\", \"pyro_melt\", \"cryo_melt\",] as const\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\nexport const allRarities = [5, 4, 3, 2, 1] as const\nexport const allArtifactRarities = [5, 4, 3] as const\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo'] as const\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\nexport const allArtifactSets = [\n  \"Adventurer\",\n  \"ArchaicPetra\",\n  \"Berserker\",\n  \"BlizzardStrayer\",\n  \"BloodstainedChivalry\",\n  \"BraveHeart\",\n  \"CrimsonWitchOfFlames\",\n  \"DefendersWill\",\n  \"EchoesOfAnOffering\",\n  \"EmblemOfSeveredFate\",\n  \"Gambler\",\n  \"GladiatorsFinale\",\n  \"HeartOfDepth\",\n  \"HuskOfOpulentDreams\",\n  \"Instructor\",\n  \"Lavawalker\",\n  \"LuckyDog\",\n  \"MaidenBeloved\",\n  \"MartialArtist\",\n  \"NoblesseOblige\",\n  \"OceanHuedClam\",\n  \"PaleFlame\",\n  \"PrayersForDestiny\",\n  \"PrayersForIllumination\",\n  \"PrayersForWisdom\",\n  \"PrayersToSpringtime\",\n  \"ResolutionOfSojourner\",\n  \"RetracingBolide\",\n  \"Scholar\",\n  \"ShimenawasReminiscence\",\n  \"TenacityOfTheMillelith\",\n  \"TheExile\",\n  \"ThunderingFury\",\n  \"Thundersoother\",\n  \"TinyMiracle\",\n  \"TravelingDoctor\",\n  \"VermillionHereafter\",\n  \"ViridescentVenerer\",\n  \"WanderersTroupe\",\n] as const\nexport const allCharacterKeys = [\n  \"Albedo\",\n  \"Amber\",\n  \"Barbara\",\n  \"Beidou\",\n  \"Bennett\",\n  \"Chongyun\",\n  \"Diluc\",\n  \"Diona\",\n  \"Fischl\",\n  \"Ganyu\",\n  \"HuTao\",\n  \"Jean\",\n  \"Kaeya\",\n  \"Keqing\",\n  \"Klee\",\n  \"KujouSara\",\n  \"Lisa\",\n  \"Mona\",\n  \"Ningguang\",\n  \"Noelle\",\n  \"Qiqi\",\n  \"Razor\",\n  \"Sucrose\",\n  \"Tartaglia\",\n  \"Traveler\",\n  \"RaidenShogun\",\n  \"Venti\",\n  \"Xiangling\",\n  \"Xiao\",\n  \"Xingqiu\",\n  \"Xinyan\",\n  \"Rosaria\",\n  \"Yanfei\",\n  \"Eula\",\n  \"KaedeharaKazuha\",\n  \"KamisatoAyaka\",\n  \"Sayu\",\n  \"Shenhe\",\n  \"Yoimiya\",\n  \"Aloy\",\n  \"SangonomiyaKokomi\",\n  \"Thoma\",\n  \"Gorou\",\n  \"AratakiItto\",\n  \"YaeMiko\",\n  \"YunJin\",\n  \"Zhongli\",\n  \"KamisatoAyato\",\n  \"Yelan\",\n  // \"KukiShinobu\"\n] as const\n\nexport const allWeaponSwordKeys = [\n  \"AmenomaKageuchi\",\n  \"AquilaFavonia\",\n  \"BlackcliffLongsword\",\n  \"CinnabarSpindle\",\n  \"CoolSteel\",\n  \"DarkIronSword\",\n  \"DullBlade\",\n  \"FavoniusSword\",\n  \"FesteringDesire\",\n  \"FilletBlade\",\n  \"FreedomSworn\",\n  \"HaranGeppakuFutsu\",\n  \"HarbingerOfDawn\",\n  \"IronSting\",\n  \"LionsRoar\",\n  \"MistsplitterReforged\",\n  \"PrimordialJadeCutter\",\n  \"PrototypeRancour\",\n  \"RoyalLongsword\",\n  \"SacrificialSword\",\n  \"SilverSword\",\n  \"SkyriderSword\",\n  \"SkywardBlade\",\n  \"SummitShaper\",\n  \"SwordOfDescension\",\n  \"TheAlleyFlash\",\n  \"TheBlackSword\",\n  \"TheFlute\",\n  \"TravelersHandySword\",\n] as const\nexport type WeaponSwordKey = typeof allWeaponSwordKeys[number]\n\nexport const allWeaponClaymoreKeys = [\n  \"Akuoumaru\",\n  \"BlackcliffSlasher\",\n  \"BloodtaintedGreatsword\",\n  \"DebateClub\",\n  \"FavoniusGreatsword\",\n  \"FerrousShadow\",\n  \"KatsuragikiriNagamasa\",\n  \"LithicBlade\",\n  \"LuxuriousSeaLord\",\n  \"OldMercsPal\",\n  \"PrototypeArchaic\",\n  \"Rainslasher\",\n  \"RedhornStonethresher\",\n  \"RoyalGreatsword\",\n  \"SacrificialGreatsword\",\n  \"SerpentSpine\",\n  \"SkyriderGreatsword\",\n  \"SkywardPride\",\n  \"SnowTombedStarsilver\",\n  \"SongOfBrokenPines\",\n  \"TheBell\",\n  \"TheUnforged\",\n  \"WasterGreatsword\",\n  \"Whiteblind\",\n  \"WhiteIronGreatsword\",\n  \"WolfsGravestone\",\n] as const\nexport type WeaponClaymoreKey = typeof allWeaponClaymoreKeys[number]\n\nexport const allWeaponPolearmKeys = [\n  \"BeginnersProtector\",\n  \"BlackcliffPole\",\n  \"BlackTassel\",\n  \"CalamityQueller\",\n  \"CrescentPike\",\n  \"Deathmatch\",\n  \"DragonsBane\",\n  \"DragonspineSpear\",\n  \"EngulfingLightning\",\n  \"FavoniusLance\",\n  \"Halberd\",\n  \"IronPoint\",\n  \"KitainCrossSpear\",\n  \"LithicSpear\",\n  \"PrimordialJadeWingedSpear\",\n  \"PrototypeStarglitter\",\n  \"RoyalSpear\",\n  \"SkywardSpine\",\n  \"StaffOfHoma\",\n  \"TheCatch\",\n  \"VortexVanquisher\",\n  \"WavebreakersFin\",\n  \"WhiteTassel\",\n] as const\nexport type WeaponPoleArmKey = typeof allWeaponPolearmKeys[number]\n\nexport const allWeaponBowKeys = [\n  \"AlleyHunter\",\n  \"AmosBow\",\n  \"AquaSimulacra\",\n  \"BlackcliffWarbow\",\n  \"CompoundBow\",\n  \"ElegyForTheEnd\",\n  \"FadingTwilight\",\n  \"FavoniusWarbow\",\n  \"Hamayumi\",\n  \"HuntersBow\",\n  \"Messenger\",\n  \"MitternachtsWaltz\",\n  \"MouunsMoon\",\n  \"PolarStar\",\n  \"Predator\",\n  \"PrototypeCrescent\",\n  \"RavenBow\",\n  \"RecurveBow\",\n  \"RoyalBow\",\n  \"Rust\",\n  \"SacrificialBow\",\n  \"SeasonedHuntersBow\",\n  \"SharpshootersOath\",\n  \"SkywardHarp\",\n  \"Slingshot\",\n  \"TheStringless\",\n  \"TheViridescentHunt\",\n  \"ThunderingPulse\",\n  \"WindblumeOde\",\n] as const\nexport type WeaponBowKey = typeof allWeaponBowKeys[number]\n\nexport const allWeaponCatalystKeys = [\n  \"ApprenticesNotes\",\n  \"BlackcliffAgate\",\n  \"DodocoTales\",\n  \"EmeraldOrb\",\n  \"EverlastingMoonglow\",\n  \"EyeOfPerception\",\n  \"FavoniusCodex\",\n  \"Frostbearer\",\n  \"HakushinRing\",\n  \"KagurasVerity\",\n  \"LostPrayerToTheSacredWinds\",\n  \"MagicGuide\",\n  \"MappaMare\",\n  \"MemoryOfDust\",\n  \"OathswornEye\",\n  \"OtherworldlyStory\",\n  \"PocketGrimoire\",\n  \"PrototypeAmber\",\n  \"RoyalGrimoire\",\n  \"SacrificialFragments\",\n  \"SkywardAtlas\",\n  \"SolarPearl\",\n  \"TheWidsith\",\n  \"ThrillingTalesOfDragonSlayers\",\n  \"TwinNephrite\",\n  \"WineAndSong\",\n] as const\nexport type WeaponCatalystKey = typeof allWeaponCatalystKeys[number]\n\nexport const allWeaponKeys = [\n  ...allWeaponSwordKeys,\n  ...allWeaponClaymoreKeys,\n  ...allWeaponPolearmKeys,\n  ...allWeaponBowKeys,\n  ...allWeaponCatalystKeys,\n] as const\nexport type WeaponKey = WeaponSwordKey | WeaponClaymoreKey | WeaponPoleArmKey | WeaponBowKey | WeaponCatalystKey\n\nexport const characterSpecializedStatKeys = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"] as const\n\nexport type HitModeKey = typeof allHitModes[number]\nexport type Region = typeof allRegions[number]\nexport type ReactionModeKey = typeof allReactionModes[number]\nexport type SetNum = typeof allArtifactSetCount[number]\nexport type Rarity = typeof allRarities[number]\nexport type ArtifactRarity = typeof allArtifactRarities[number]\nexport type SlotKey = typeof allSlotKeys[number]\nexport type ElementKey = typeof allElements[number]\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\nexport type ArtifactSetKey = typeof allArtifactSets[number]\nexport type CharacterKey = typeof allCharacterKeys[number]\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\nexport type CharacterSpecializedStatKey = typeof characterSpecializedStatKeys[number]\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\n","import { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\nimport { allOperations, constantFold } from \"../../../../Formula/optimization\";\nimport { ConstantNode, NumNode } from \"../../../../Formula/type\";\nimport { constant, customRead, max, min } from \"../../../../Formula/utils\";\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\nimport type { ArtSetExclusion } from \"./BuildSetting\";\n\ntype DynMinMax = { [key in string]: MinMax }\ntype MinMax = { min: number, max: number }\n\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\nexport function pruneAll(nodes: NumNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\n  }\n  let count = 0\n  while (Object.values(should).some(x => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, exclusion)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nfunction reaffine(nodes: NumNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  const affineNodes = new Set<NumNode>(), topLevelAffine = new Set<NumNode>()\n\n  function visit(node: NumNode, isAffine: boolean) {\n    if (isAffine) affineNodes.add(node)\n    else node.operands.forEach(_op => {\n      const op = _op as NumNode\n      affineNodes.has(op) && topLevelAffine.add(op)\n    })\n  }\n\n  const dynKeys = new Set<string>()\n\n  forEachNodes(nodes, _ => { }, f => {\n    const operation = f.operation\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || f.path[0] !== \"dyn\" || f.accu !== \"add\")\n          throw new Error(`Found unsupported ${operation} node at path ${f.path} when computing affine nodes`)\n        dynKeys.add(f.path[1])\n        visit(f, true)\n        break\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\n      case \"mul\": {\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\n        break\n      }\n      case \"const\":\n        if (typeof f.value === \"string\" || f.value === undefined)\n          throw new Error(`Found constant ${f.value} while compacting`)\n        visit(f as NumNode, true); break\n      case \"res\": case \"threshold\": case \"sum_frac\":\n      case \"max\": case \"min\": visit(f, false); break\n      case \"data\": case \"subscript\": case \"lookup\": case \"match\": case \"prio\": case \"small\":\n        throw new Error(`Found unsupported ${operation} node when computing affine nodes`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\n    Object.keys(arts.base).length === dynKeys.size)\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\n  const affineMap = new Map(affine.map(node => [node,\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\n      ? node\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\n  nodes = mapFormulas(nodes, f => affineMap.get(f as NumNode) ?? f, f => f)\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold([...affineMap.keys()], {\n      dyn: objectMap(stat, (value) => constant(value))\n    } as any, _ => true)\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\n  }\n  const result = {\n    nodes, arts: {\n      base: reaffineArt(arts.base),\n      values: objectKeyMap(allSlotKeys, slot =>\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\n    }\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets)\n        values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nexport function pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\n  let progress = false\n  const noRainbow = !exclusion.rainbow?.length\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\n  const values = objectKeyMap(allSlotKeys, slot => {\n    const list = arts.values[slot]\n    const newList = list.filter(art => {\n      let count = 0\n      return list.every(other => {\n        const greaterEqual = Object.entries(other.values).every(([k, o]) => o >= art.values[k])\n        const greater = Object.entries(other.values).some(([k, o]) => o > art.values[k])\n        if (greaterEqual && (greater || other.id > art.id) &&\n          ((noRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set))\n          count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(nodes: NumNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\n\n    let progress = false\n    const values = objectKeyMap(allSlotKeys, slot => {\n      const result = wrap.arts.values[slot].filter(art => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\n      })\n      if (result.length !== wrap.arts.values[slot].length)\n        progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: NumNode[], arts: ArtifactsBySlot): NumNode[] {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(nodes, f => {\n    const { operation } = f\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\n    switch (operation) {\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandRanges\n        if (value.min >= threshold.max) return f.operands[2]\n        else if (value.max < threshold.min) return constant(0)\n        if (pass.max === pass.min &&\n          fail.max === fail.min &&\n          pass.min === fail.min && isFinite(pass.min))\n          return constant(pass.max)\n        break\n      }\n      case \"min\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\n        })\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\n        break\n      }\n      case \"max\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every(op2 => op1.max >= op2.min)\n        })\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\n        break\n      }\n    }\n    return f\n  }, f => f)\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach(range => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}\n  if (arts.length) {\n    Object.keys(arts[0].values)\n      .filter(key => arts.every(art => art.values[key]))\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\n    arts.forEach(({ values }) => {\n      for (const [key, value] of Object.entries(values)) {\n        if (!result[key]) result[key] = { min: 0, max: value }\n        else {\n          if (result[key].max < value) result[key].max = value\n          if (result[key].min > value) result[key].min = value\n        }\n      }\n    })\n  }\n  return result\n}\nfunction computeNodeRange(nodes: NumNode[], reads: DynMinMax): Map<NumNode, MinMax> {\n  const range = new Map<NumNode, MinMax>()\n\n  forEachNodes(nodes, _ => { }, _f => {\n    const f = _f as NumNode\n    const { operation } = f\n    const operands = f.operands.map(op => range.get(op)!)\n    let current: MinMax\n    switch (operation) {\n      case \"read\":\n        if (f.path[0] !== \"dyn\")\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\n        break\n      case \"const\": current = computeMinMax([f.value]); break\n      case \"subscript\": current = computeMinMax(f.list); break\n      case \"add\": case \"min\": case \"max\":\n        current = {\n          min: allOperations[operation](operands.map(x => x.min)),\n          max: allOperations[operation](operands.map(x => x.max)),\n        }; break\n      case \"res\": current = {\n        min: allOperations[operation]([operands[0].max]),\n        max: allOperations[operation]([operands[0].min]),\n      }; break\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\n        accu.min * current.min, accu.min * current.max,\n        accu.max * current.min, accu.max * current.max,\n      ])); break\n      case \"threshold\":\n        if (operands[0].min >= operands[1].max) current = operands[2]\n        else if (operands[0].max < operands[1].min) current = computeMinMax([0])\n        else current = computeMinMax([0], [operands[2]])\n        break\n      case \"sum_frac\": {\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\n        if (sum.min <= 0 && sum.max >= 0)\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\n        else\n          // TODO: Check this\n          current = computeMinMax([\n            x.min / sum.min, x.min / sum.max,\n            x.max / sum.min, x.max / sum.max\n          ])\n        break\n      }\n      case \"data\": case \"lookup\": case \"match\":\n        throw new Error(`Unsupported ${operation} node`)\n      default: assertUnreachable(operation)\n    }\n    range.set(f, current)\n  })\n  return range\n}\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\n  return { min, max }\n}\n\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objectKeyMap(allSlotKeys, slot => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\n      }\n    })\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value)\n        result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\n}\n\n\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\n  filter_loop: for (const filter of filters) {\n    for (const [slot, f] of Object.entries(filter)) {\n      const available = artSets[slot]!\n      switch (f.kind) {\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\n        case \"id\": break\n      }\n    }\n    yield filter\n  }\n}\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\n  return new Set(exclusion?.includes(2)\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\n}\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\n  /**\n   * This generation algorithm is separated into two parts:\n   * - \"Shape\" generation\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\n   * - Shape filling\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\n   */\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\n  let shapes: number[][] = []\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\n    if (current.length === 5) {\n      if (allowedRainbows.has(rainbows.length))\n        shapes.push(current)\n      return\n    }\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\n  }\n  populateShapes([0], new Set([0]), [0])\n  function indexOfShape(shape: number[], replacing: number) {\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\n      return undefined\n    shape = [...shape]\n    shape[replacing] = 5\n    return shape.reduce((a, b) => a * 6 + b, 0)\n  }\n  for (let replacing = 4; replacing >= 0; replacing--) {\n    const required: Map<number, number> = new Map()\n    for (const shape of shapes) {\n      const id = indexOfShape(shape, replacing)\n      if (id === undefined) continue\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\n    }\n    for (const [id, remaining] of required.entries()) {\n      if (remaining === 0) {\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\n        shape[replacing] = 5\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\n        shapes.push(shape)\n      }\n    }\n  }\n\n  // Shapes are now calculated and merged, proceed to fill in the sets\n\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\n\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\n\n  function* check(shape: number[]) {\n    const used: Set<ArtifactSetKey> = new Set()\n    let groupped: number[][] = [], rainbows: number[] = []\n    for (const i of shape) {\n      groupped.push([])\n      if (i === 5) rainbows.push(groupped.length - 1)\n      else groupped[i].push(groupped.length - 1)\n    }\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\n    let usableRainbows = rainbows.length\n\n    // Inception.. because js doesn't like functions inside a for-loop\n    function* check(i: number) {\n      if (i === groupped.length)\n        return yield* check_free(0)\n\n      for (const set of artSets) {\n        if (used.has(set)) continue\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\n        let requiredRainbows = 0\n\n        if (allowedSet && !allowedSet.has(length)) {\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\n        }\n\n        used.add(set)\n        counts[set] = groupped[i].length\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\n        usableRainbows -= requiredRainbows\n\n        yield* check(i + 1)\n\n        usableRainbows += requiredRainbows\n        counts[set] = 0\n        used.delete(set)\n      }\n    }\n    // We separate filling rainbow slots from groupped slots because it has an entirely\n    // different set of rules regarding what can be filled and what states to be kept.\n    function* check_free(i: number) {\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\n      let required = 0\n      for (const set of artSets) {\n        const allowedSet = allowedCounts[set], count = counts[set]\n        if (!allowedSet) continue\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\n        else if (!allowedSet.has(count)) {\n          required += [...allowedSet].find(x => x > count)! - count\n          missing.push(set)\n        }\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\n      }\n      if (required > remaining) return\n      if (i === rainbows.length) {\n        yield { ...result }\n        return\n      }\n      if (required === remaining) {\n        for (const set of missing) {\n          counts[set]++\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n          yield* check_free(i + 1)\n          counts[set]--\n        }\n        return\n      }\n      for (const set of [...isolated, ...missing]) {\n        counts[set]++\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n        yield* check_free(i + 1)\n        counts[set]--\n      }\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\n      yield* check_free(i + 1)\n    }\n    yield* check(0)\n  }\n  for (const shape of shapes) yield* check(shape)\n}\n\nexport type RequestFilter = StrictDict<SlotKey,\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\n  { kind: \"id\", ids: Set<string> }\n>\n\nexport type DynStat = { [key in string]: number }\nexport type ArtifactBuildData = {\n  id: string\n  set?: ArtifactSetKey\n  values: DynStat\n}\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\n\nexport type PlotData = Dict<number, Build>\nexport interface Build {\n  value: number\n  plot?: number\n  artifactIds: string[]\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import { optimize, precompute } from '../../../../Formula/optimization';\nimport type { NumNode } from '../../../../Formula/type';\nimport type { InterimResult, Setup } from './BackgroundWorker';\nimport { ArtifactsBySlot, Build, countBuilds, filterArts, mergePlot, PlotData, pruneAll, RequestFilter } from './common';\n\nexport class ComputeWorker {\n  builds: Build[] = []\n  buildValues: number[] | undefined = undefined\n  plotData: PlotData | undefined\n  threshold: number = -Infinity\n  maxBuilds: number\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: NumNode[]\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, plotBase, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.maxBuilds = maxBuilds\n    this.callback = callback\n    this.nodes = filters.map(x => x.value)\n    this.nodes.push(optimizationTarget)\n    if (plotBase) {\n      this.plotData = {}\n      this.nodes.push(plotBase)\n    }\n  }\n\n  compute(newThreshold: number, filter: RequestFilter) {\n    if (this.threshold > newThreshold) this.threshold = newThreshold\n    const { min, interimReport } = this, self = this // `this` in nested functions means different things\n    let preArts = filterArts(this.arts, filter)\n    const totalCount = countBuilds(preArts)\n\n    let nodes = optimize(this.nodes, {}, _ => false);\n    ({ nodes, arts: preArts } = pruneAll(nodes, min, preArts, this.maxBuilds, {}, {\n      pruneArtRange: true, pruneNodeRange: true,\n    }))\n    const [compute, mapping, buffer] = precompute(nodes, f => f.path[1])\n    const arts = Object.values(preArts.values).sort((a, b) => a.length - b.length).map(arts => arts.map(art => ({\n      id: art.id, values: Object.entries(art.values)\n        .map(([key, value]) => ({ key: mapping[key]!, value, cache: 0 }))\n        .filter(({ key, value }) => key !== undefined && value !== 0)\n    })))\n\n    const ids: string[] = Array(arts.length).fill(\"\")\n    let count = { tested: 0, failed: 0, skipped: totalCount - countBuilds(preArts) }\n\n    function permute(i: number) {\n      if (i < 0) {\n        const result = compute()\n        if (min.every((m, i) => (m <= result[i]))) {\n          const value = result[min.length], { builds, plotData, threshold } = self\n          let build: Build | undefined\n          if (value >= threshold) {\n            build = { value, artifactIds: [...ids] }\n            builds.push(build)\n          }\n          if (plotData) {\n            const x = result[min.length + 1]\n            if (!plotData[x] || plotData[x]!.value < value) {\n              if (!build) build = { value, artifactIds: [...ids] }\n              build.plot = x\n              plotData[x] = build\n            }\n          }\n        }\n        else count.failed += 1\n        return\n      }\n      arts[i].forEach(art => {\n        ids[i] = art.id\n\n        for (const current of art.values) {\n          const { key, value } = current\n          current.cache = buffer[key]\n          buffer[key] += value\n        }\n\n        permute(i - 1)\n\n        for (const { key, cache } of art.values)\n          buffer[key] = cache\n      })\n      if (i === 0) {\n        count.tested += arts[0].length\n        if (count.tested > 8192)\n          interimReport(count)\n      }\n    }\n\n    for (const [key, value] of Object.entries(preArts.base)) {\n      const i = mapping[key]\n      if (i !== undefined)\n        buffer[i] = value\n    }\n\n    permute(arts.length - 1)\n    this.interimReport(count)\n  }\n\n  refresh(force: boolean): void {\n    const { maxBuilds } = this\n    if (Object.keys(this.plotData ?? {}).length >= 100000)\n      this.plotData = mergePlot([this.plotData!])\n\n    if (this.builds.length >= 100000 || force) {\n      this.builds = this.builds\n        .sort((a, b) => b.value - a.value)\n        .slice(0, maxBuilds)\n      this.buildValues = this.builds.map(x => x.value)\n      this.threshold = Math.max(this.threshold, this.buildValues[maxBuilds - 1] ?? -Infinity)\n    }\n  }\n  interimReport = (count: { tested: number, failed: number, skipped: number }) => {\n    this.refresh(false)\n    this.callback({ command: \"interim\", buildValues: this.buildValues, ...count })\n    this.buildValues = undefined\n    count.tested = 0\n    count.failed = 0\n    count.skipped = 0\n  }\n}\n","import { NumNode } from '../../../../Formula/type'\nimport { assertUnreachable } from '../../../../Util/Util'\nimport { ArtSetExclusion } from './BuildSetting'\nimport { ArtifactsBySlot, artSetPerm, Build, countBuilds, filterArts, filterFeasiblePerm, PlotData, RequestFilter } from \"./common\"\nimport { ComputeWorker } from \"./ComputeWorker\"\nimport { SplitWorker } from \"./SplitWorker\"\n\nlet id: number, splitWorker: SplitWorker, computeWorker: ComputeWorker\n\nonmessage = ({ data }: { data: WorkerCommand }) => {\n  const command = data.command\n  let result: WorkerResult\n  switch (command) {\n    case \"setup\":\n      id = data.id\n      const callback = (interim: InterimResult) => postMessage({ id, ...interim })\n      splitWorker = new SplitWorker(data, callback)\n      computeWorker = new ComputeWorker(data, callback)\n      result = { command: \"iterate\" }\n      break\n    case \"split\":\n      result = { command: \"split\", filter: splitWorker.split(data.threshold, data.minCount, data.filter) }\n      break\n    case \"iterate\":\n      const { threshold, filter } = data\n      computeWorker.compute(threshold, filter)\n      result = { command: \"iterate\" }\n      break\n    case \"finalize\":\n      computeWorker.refresh(true)\n      const { builds, plotData } = computeWorker\n      result = { command: \"finalize\", builds, plotData }\n      break\n    case \"count\":\n      {\n        const { exclusion } = data, arts = computeWorker.arts\n        const setPerm = filterFeasiblePerm(artSetPerm(exclusion, [...new Set(Object.values(arts.values).flatMap(x => x.map(x => x.set!)))]), arts)\n        let count = 0\n        for (const perm of setPerm)\n          count += countBuilds(filterArts(arts, perm))\n        result = { command: \"count\", count }\n        break\n      }\n    default: assertUnreachable(command)\n  }\n  postMessage({ id, ...result });\n}\n\nexport type WorkerCommand = Setup | Split | Iterate | Finalize | Count\nexport type WorkerResult = InterimResult | SplitResult | IterateResult | FinalizeResult | CountResult\n\nexport interface Setup {\n  command: \"setup\"\n\n  id: number\n  arts: ArtifactsBySlot\n\n  optimizationTarget: NumNode\n  filters: { value: NumNode, min: number }[]\n  plotBase: NumNode | undefined,\n  maxBuilds: number\n}\nexport interface Split {\n  command: \"split\"\n  threshold: number\n  minCount: number\n  filter?: RequestFilter\n}\nexport interface Iterate {\n  command: \"iterate\"\n  threshold: number\n  filter: RequestFilter\n}\n\nexport interface Finalize {\n  command: \"finalize\"\n}\nexport interface Count {\n  command: \"count\"\n  exclusion: ArtSetExclusion\n}\nexport interface SplitResult {\n  command: \"split\"\n  filter: RequestFilter | undefined\n}\nexport interface IterateResult {\n  command: \"iterate\"\n}\nexport interface FinalizeResult {\n  command: \"finalize\"\n  builds: Build[]\n  plotData?: PlotData\n}\nexport interface CountResult {\n  command: \"count\"\n  count: number\n}\nexport interface InterimResult {\n  command: \"interim\"\n  buildValues: number[] | undefined\n  /** The number of builds since last report, including failed builds */\n  tested: number\n  /** The number of builds that does not meet the min-filter requirement since last report */\n  failed: number\n  skipped: number\n}\n","import type { NumNode } from '../../../../Formula/type';\nimport { allSlotKeys } from '../../../../Types/consts';\nimport type { InterimResult, Setup } from './BackgroundWorker';\nimport { ArtifactsBySlot, countBuilds, filterArts, RequestFilter } from './common';\n\nexport class SplitWorker {\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: NumNode[]\n\n  filters: { count: number, filter: RequestFilter }[] = []\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.nodes = filters.map(x => x.value)\n    this.callback = callback\n\n    this.min.push(-Infinity)\n    this.nodes.push(optimizationTarget)\n  }\n  addFilter(filter: RequestFilter) {\n    const count = countBuilds(filterArts(this.arts, filter))\n    this.filters.push({ count, filter })\n  }\n  split(newThreshold: number, minCount: number, filter: RequestFilter | undefined): RequestFilter | undefined {\n    if (this.min[this.min.length - 1] > newThreshold) this.min[this.min.length - 1] = newThreshold\n    if (filter) this.addFilter(filter)\n\n    while (this.filters.length) {\n      const { count, filter } = this.filters.pop()!\n      if (count <= minCount) return filter\n      splitBySetOrID(this.arts, filter, minCount).forEach(filter => this.addFilter(filter))\n    }\n  }\n}\n\nfunction splitBySetOrID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\n  const arts = filterArts(_arts, filter)\n\n  const candidates = allSlotKeys\n    .map(slot => ({ slot, sets: new Set(arts.values[slot].map(x => x.set)) }))\n    .filter(({ sets }) => sets.size > 1)\n  if (!candidates.length)\n    return splitByID(arts, filter, limit)\n  const { sets, slot } = candidates.reduce((a, b) => a.sets.size < b.sets.size ? a : b)\n  return [...sets].map(set => ({ ...filter, [slot]: { kind: \"required\", sets: new Set([set]) } }))\n}\nfunction splitByID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\n  const arts = filterArts(_arts, filter)\n  const count = countBuilds(arts)\n\n  const candidates = allSlotKeys\n    .map(slot => ({ slot, length: arts.values[slot].length }))\n    .filter(x => x.length > 1)\n  const { slot, length } = candidates.reduce((a, b) => a.length < b.length ? a : b)\n\n  const numChunks = Math.ceil(count / limit)\n  const boundedNumChunks = Math.min(numChunks, length)\n  const chunk = Array(boundedNumChunks).fill(0).map(_ => new Set<string>())\n  arts.values[slot].forEach(({ id }, i) => chunk[i % boundedNumChunks].add(id))\n  return chunk.map(ids => ({ ...filter, [slot]: { kind: \"id\", ids } }))\n}\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","isArray","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","iter","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_typeof","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","undefined","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","_i","_s","_arr","_n","_d","objPathValue","console","reduce","a","k","objectKeyMap","map","fromEntries","objectMap","entries","v","rangeGen","to","range","assertUnreachable","constant","NaN","percent","operation","operands","Number","MAX_VALUE","Infinity","min","intoOps","max","customRead","path","forEachNodes","formulas","topDown","bottomUp","visiting","Set","visited","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","get","arrayEqual","set","b","every","allCommutativeMonoidOperations","x","Math","mul","allOperations","res","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","flatten","_formula","flattened","flatMap","dep","deduplicate","elementCounts","array","common","counts","factored","count","fill","candidatesByOperation","remainingCounts","currentCounts","commonCounts","nextCounts","total","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","constantFold","topLevelData","shouldFold","origin","data","processed","nextContextMap","fold","old","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","op","smallest","v1","v2","match","unmatch","list","accu","nextContext","allSlotKeys","filterFeasiblePerm","artSetPerm","reaffine","nodes","arts","forceRename","affineNodes","topLevelAffine","visit","node","isAffine","_op","dynKeys","_","nonConst","base","size","current","nextDynKey","affine","affineMap","reaffineArt","stat","dyn","slot","id","offsets","baseValue","pruneOrder","numTop","exclusion","progress","noRainbow","rainbow","noSwitchIn","noSwitchOut","includes","newList","art","other","greaterEqual","greater","some","pruneArtRange","minimum","baseRange","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","pruneNodeRange","nodeRange","operandRanges","newOperands","op1","op2","j","ranges","reads","_f","computeMinMax","c","sum","minMaxes","filterArts","filters","kind","ids","sets","countBuilds","_count","_artSets","artSets","available","exclusionToAllowed","populateShapes","indexOfShape","shape","check_free","remaining","rainbows","isolated","missing","rejected","required","allowedSet","allowedCounts","groupped","used","requiredRainbows","l","usableRainbows","sort","replacing","allowedRainbows","shapes","noFilter","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","splitWorker","computeWorker","ComputeWorker","callback","optimizationTarget","plotBase","maxBuilds","builds","buildValues","plotData","interimReport","refresh","command","tested","failed","skipped","newThreshold","preArts","totalCount","optimize","forced","should","deps","newArts","newNodes","pruneAll","binding","uniqueReadStrings","uniqueNumbers","mapping","ins","locations","readStrings","readOffset","constValues","computations","str","offset","ref","out","buff","buffer","Float64Array","number","copyList","src","copyFormula","dst","precompute","compute","cache","permute","m","build","artifactIds","plot","force","plots","scale","round","mergePlot","SplitWorker","minCount","addFilter","splitBySetOrID","_arts","limit","numChunks","ceil","boundedNumChunks","chunk","splitByID","onmessage","interim","postMessage","split"],"sourceRoot":""}