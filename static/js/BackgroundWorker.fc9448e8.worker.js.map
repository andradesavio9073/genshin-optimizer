{"version":3,"file":"static/js/BackgroundWorker.fc9448e8.worker.js","mappings":"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CHA,EAAc,CAAErB,KAAK,GAAD,SAAMnO,EAAQmO,MAAd,CAAoBrF,EAAQqF,OAAOC,UAAW,IAAI9E,KACtE+E,EAAe1E,IAAI6F,EAAa,IAAIlG,KACpClD,EAAIuD,IAAIb,EAAQqF,KAAMqB,IAExBrN,EAASmM,EAAKxF,EAAQpB,SAAS,GAAI8H,GACnC,MACF,QAASzI,EAAkBU,GAI7B,OADAzH,EAAQoO,UAAUzE,IAAIb,EAAS3G,GACxBA,EAGT,IAAMnC,EAAU,CAAEmO,KAAM,CAAC1D,GAAe2D,UAAW,IAAI9E,KAGvD,OAFA+E,EAAe1E,IAAI3J,EAAS,IAAIsJ,KAChC+E,EAAe5E,IAAIyE,GAASvE,IAAIc,EAAczK,GACvCuI,EAASnC,KAAI,SAAA0D,GAAC,OAAIwE,EAAKxE,EAAG9J,MAG5B,IC5ZMyP,EAAc,CAAC,SAAU,QAAS,QAAS,SAAU,cAEnC,CAAI,YAAJ,OADJ,CAAC,QAAS,MAAO,UAAW,QAAS,OAAQ,SA0P9C,UAzJQ,CAChC,kBACA,gBACA,sBACA,kBACA,YACA,gBACA,YACA,gBACA,kBACA,cACA,eACA,oBACA,kBACA,YACA,YACA,uBACA,uBACA,mBACA,iBACA,mBACA,cACA,gBACA,eACA,eACA,oBACA,gBACA,gBACA,WACA,uBAImC,CACnC,YACA,oBACA,yBACA,aACA,qBACA,gBACA,wBACA,cACA,mBACA,cACA,mBACA,cACA,uBACA,kBACA,wBACA,eACA,qBACA,eACA,uBACA,oBACA,UACA,cACA,mBACA,aACA,sBACA,mBAIkC,CAClC,qBACA,iBACA,cACA,kBACA,eACA,aACA,cACA,mBACA,qBACA,gBACA,UACA,YACA,mBACA,cACA,4BACA,uBACA,aACA,eACA,cACA,WACA,mBACA,kBACA,eAI8B,CAC9B,cACA,UACA,gBACA,mBACA,cACA,iBACA,iBACA,iBACA,WACA,aACA,YACA,oBACA,aACA,YACA,WACA,oBACA,WACA,aACA,WACA,OACA,iBACA,qBACA,oBACA,cACA,YACA,gBACA,qBACA,kBACA,gBAImC,CACnC,mBACA,kBACA,cACA,aACA,sBACA,kBACA,gBACA,cACA,eACA,gBACA,6BACA,aACA,YACA,eACA,eACA,oBACA,iBACA,iBACA,gBACA,uBACA,eACA,aACA,aACA,gCACA,eACA,yBCsGeC,IAAAA,EAAAA,IAAAA,KAoBAC,IA3WV,SAASC,EAASC,EAAkBC,EAAmBC,EAAuBC,EAAgBC,EAA4BC,GAU/H,IATA,IAAIC,EAASD,EAEPE,EACQ,CAAEC,gBAAgB,GAD1BD,EAEW,CAAEC,gBAAgB,GAF7BD,EAGY,CAAEE,UAAU,GAHxBF,EAIM,CAAEG,YAAY,EAAMC,eAAe,EAAMH,gBAAgB,GAEjElD,EAAQ,EACL/R,OAAOuG,OAAOwO,GAAQM,MAAK,SAAA3G,GAAC,OAAIA,MAAMqD,IAAU,IAAI,CACzD,GAAIgD,EAAOI,WAAY,QACdJ,EAAOI,WACd,IAAMG,EAAUH,EAAWR,EAAMC,EAAQC,GACrCF,IAASW,IACXX,EAAOW,EACPP,EAAM,OAAQA,GAAWC,IAG7B,GAAID,EAAOK,cAAe,QACjBL,EAAOK,cACd,IAAME,EAAUF,EAAcX,EAAOE,EAAMD,GACvCC,IAASW,IACXX,EAAOW,EACPP,EAAM,OAAQA,GAAWC,IAG7B,GAAID,EAAOE,eAAgB,QAClBF,EAAOE,eACd,IAAMM,EAAWN,EAAeR,EAAOE,GACnCF,IAAUc,IACZd,EAAQc,EACRR,EAAM,OAAQA,GAAWC,IAG7B,GAAID,EAAOG,SAAU,QACZH,EAAOG,SACd,MAA2CA,EAAST,EAAOE,GAA5CY,EAAf,EAAQd,MAAuBa,EAA/B,EAAyBX,KACrBF,IAAUc,GAAYZ,IAASW,IACjCb,EAAQc,EACRZ,EAAOW,EACPP,EAAM,OAAQA,GAAWC,KAI/B,MAAO,CAAEP,MAAAA,EAAOE,KAAAA,GAGlB,SAASO,EAAST,EAAkBE,GAAmG,IAA5Ea,EAA2E,wDAC9HC,EAAc,IAAIlI,IAAgBmI,EAAiB,IAAInI,IAE7D,SAASoI,EAAM/E,EAAegF,GACxBA,EAAUH,EAAY7H,IAAIgD,GACzBA,EAAKtE,SAASnJ,SAAQ,SAAA0S,GACzB,IAAM1F,EAAK0F,EACXJ,EAAY9H,IAAIwC,IAAOuF,EAAe9H,IAAIuC,MAI9C,IAAM2F,EAAU,IAAIvI,IA6BpB,GA3BAL,EAAauH,GAAO,SAAAzE,OAAU,SAAA3O,GAC5B,IAAMgL,EAAYhL,EAAEgL,UACpB,OAAQA,GACN,IAAK,OACH,GAAe,WAAXhL,EAAEyE,MAAmC,QAAdzE,EAAE2L,KAAK,IAA2B,QAAX3L,EAAE4O,KAClD,MAAM,IAAI/K,MAAJ,4BAA+BmH,EAA/B,yBAAyDhL,EAAE2L,KAA3D,iCACR8I,EAAQlI,IAAIvM,EAAE2L,KAAK,IACnB2I,EAAMtU,GAAG,GACT,MACF,IAAK,MAAOsU,EAAMtU,EAAGA,EAAEiL,SAASkC,OAAM,SAAA2B,GAAE,OAAIsF,EAAY9H,IAAIwC,OAAO,MACnE,IAAK,MACH,IAAM4F,EAAW1U,EAAEiL,SAAS5J,QAAO,SAAAyN,GAAE,MAAqB,UAAjBA,EAAG9D,aAC5CsJ,EAAMtU,EAAuB,IAApB0U,EAASvW,QAAqC,IAApBuW,EAASvW,QAAgBiW,EAAY9H,IAAIoI,EAAS,KACrF,MAEF,IAAK,QACH,GAAuB,kBAAZ1U,EAAEH,YAAkCoG,IAAZjG,EAAEH,MACnC,MAAM,IAAIgE,MAAJ,yBAA4B7D,EAAEH,MAA9B,sBACRyU,EAAMtU,GAAc,GAAO,MAC7B,IAAK,MAAO,IAAK,YAAa,IAAK,WACnC,IAAK,MAAO,IAAK,MAAOsU,EAAMtU,GAAG,GAAQ,MACzC,IAAK,OAAQ,IAAK,YAAa,IAAK,SAAU,IAAK,QAAS,IAAK,OAAQ,IAAK,QAC5E,MAAM,IAAI6D,MAAJ,4BAA+BmH,EAA/B,sCACR,QAASV,EAAkBU,OAI3B,EAAIqJ,GAAgBlH,OAAM,gBAAGnC,EAAH,EAAGA,UAAH,MAAiC,SAAdA,GAAsC,UAAdA,MACvErM,OAAOuC,KAAKoS,EAAKqB,MAAMxW,SAAWsW,EAAQG,KAC1C,MAAO,CAAExB,MAAAA,EAAOE,KAAAA,GAElB,IAAIuB,GAAW,EACf,SAASC,IACP,KAAOL,EAAQnI,IAAR,YAAiBuI,MACxB,MAAM,GAAN,OAAUA,GAGZzB,EAAMtR,SAAQ,SAAAyN,GAAI,OAAI6E,EAAY9H,IAAIiD,IAAS8E,EAAe9H,IAAIgD,MAClE,IAAMwF,EAAS,EAAIV,GAAgBhT,QAAO,SAAArB,GAAC,MAAoB,UAAhBA,EAAEgL,aAC3CgK,EAAY,IAAInI,IAAIkI,EAAOpL,KAAI,SAAA4F,GAAI,MAAI,CAACA,EAC3C4E,GAAkC,SAAnB5E,EAAKvE,WAAyC,QAAjBuE,EAAK5D,KAAK,GAAvD,OAESD,EAAW,CAAC,MAAD,UAAWoJ,QAF/B,IAEiDlG,KAAM,QADnDW,OAIN,SAAS0F,EAAYC,GACnB,IAAMhQ,EAASmJ,EAAa,EAAI2G,EAAU9T,QAAS,CACjDiU,IAAKnL,EAAUkL,GAAM,SAACrV,GAAD,OAAWgL,EAAShL,QACjC,SAAA8O,GAAC,OAAI,KACf,OAAOhQ,OAAOiL,YAAY,EAAIoL,EAAU9P,UAAUyE,KAAI,SAACO,EAAG9L,GAAJ,MAAU,CAAC8L,EAAEyB,KAAK,GAAKzG,EAAO9G,GAA4ByB,WAUlH,IARA,IAAM6F,EAAS,CACb0N,MATFA,EAAQ3G,EAAY2G,GAAO,SAAApT,GAAC,uBAAIgV,EAAUhI,IAAIhN,UAAlB,QAAmCA,KAAG,SAAAA,GAAC,OAAIA,KAS9DsT,KAAM,CACXqB,KAAMM,EAAY3B,EAAKqB,MACvBzP,OAAQwE,EAAasJ,GAAa,SAAAoC,GAAI,OACpC9B,EAAKpO,OAAOkQ,GAAMzL,KAAI,kBAA0B,CAAE0L,GAA5B,EAAGA,GAA6BnI,IAAhC,EAAOA,IAA8BhI,OAAQ+P,EAA7C,EAAY/P,iBAGlCoQ,EAAU3W,OAAOsL,QAAQgL,EAAY,KAC3C,MAAmBtW,OAAOuG,OAAOQ,EAAO4N,KAAKpO,QAA7C,gBAAK,IAAL,EAAWoO,EAAI,KAAf,IAC2BA,GAD3B,IACE,2BACE,OADWpO,EACX,QADWA,OACX,IAA+BoQ,GAA/B,+BACE,WAAAzV,MAAA,GADUa,EACV,KADe6U,EACf,KAAArQ,EAAOxE,IAAQ6U,GADjB,0BAAAvV,MAFJ,0BAAAA,KAIA,OAAO0F,EAGF,SAASoO,EAAWR,EAAuBC,EAAgBC,GAA8C,IAAD,EACzGgC,GAAW,EACTC,IAAY,UAACjC,EAAUkC,eAAX,OAAC,EAAmBvX,QAChCwX,EAAa,IAAIzJ,IAAIvN,OAAOsL,QAAQuJ,GAAWnS,QAAO,0CAAclD,UAAQwL,KAAI,iCAChFiM,EAAc,IAAI1J,IAAIvN,OAAOsL,QAAQuJ,GAAWnS,QAAO,yBAAK6I,GAAL,kBAAYA,EAAE2L,SAAS,KAAO3L,EAAE2L,SAAS,MAAIlM,KAAI,iCACxGzE,EAASwE,EAAasJ,GAAa,SAAAoC,GACvC,IAAMtC,EAAOQ,EAAKpO,OAAOkQ,GACnBU,EAAUhD,EAAKzR,QAAO,SAAA0U,GAC1B,IAAIrF,EAAQ,EACZ,OAAOoC,EAAK3F,OAAM,SAAA6I,GAChB,IAAMC,EAAetX,OAAOsL,QAAQ+L,EAAM9Q,QAAQiI,OAAM,yBAAE1D,EAAF,kBAAiBsM,EAAI7Q,OAAOuE,MAC9EyM,EAAUvX,OAAOsL,QAAQ+L,EAAM9Q,QAAQ8O,MAAK,yBAAEvK,EAAF,iBAAgBsM,EAAI7Q,OAAOuE,MAI7E,OAHIwM,IAAiBC,GAAWF,EAAMX,GAAKU,EAAIV,MAC3CI,IAAcE,EAAWrJ,IAAI0J,EAAM9I,OAAU0I,EAAYtJ,IAAIyJ,EAAI7I,MAAU6I,EAAI7I,MAAQ8I,EAAM9I,MAC/FwD,IACKA,EAAQ6C,QAInB,OADIuC,EAAQ3X,SAAW2U,EAAK3U,SAAQqX,GAAW,GACxCM,KAET,OAAON,EAAW,CAAEb,KAAMrB,EAAKqB,KAAMzP,OAAAA,GAAWoO,EAGlD,SAASS,EAAcX,EAAkBE,EAAuBD,GAG9D,IAFA,IAAM8C,EAAYxX,OAAOiL,YAAYjL,OAAOsL,QAAQqJ,EAAKqB,MAAMhL,KAAI,yBAAEjJ,EAAF,KAAO2M,EAAP,WAAc,CAAC3M,EAAK,CAAE2K,IAAKgC,EAAG9B,IAAK8B,QAChGvK,EAAO,CAAEwQ,KAAAA,GAFmF,aAIhG,IAAM8C,EAAY1M,EAAasJ,GAAa,SAAAoC,GAAI,OAAIiB,EAAgBvT,EAAKwQ,KAAKpO,OAAOkQ,OAC/EkB,EAAiB5M,EAAasJ,GAAa,SAAAtS,GAAG,OAClD6V,EAAY5X,OAAOsL,QAAQmM,GAAWzM,KAAI,SAAAH,GAAC,OAAIA,EAAE,KAAO9I,EAAMyV,EAAY3M,EAAE,MAAInI,QAAO,SAAAgM,GAAC,OAAIA,SAE1FmI,GAAW,EACTtQ,EAASwE,EAAasJ,GAAa,SAAAoC,GACvC,IAAM1P,EAAS5C,EAAKwQ,KAAKpO,OAAOkQ,GAAM/T,QAAO,SAAA0U,GAC3C,IAAMS,EAAOD,EAAY,CAACF,EAAgB,CAACN,IAAOO,EAAelB,KAC3DqB,EAAWC,EAAiBtD,EAAOoD,GACzC,OAAOpD,EAAMjG,OAAM,SAACoC,EAAMnR,GAAP,aAAaqY,EAASzJ,IAAIuC,GAAOhE,MAApB,UAA4B8H,EAAQjV,UAApC,SAA2CgN,WAI7E,OAFI1F,EAAOvH,SAAW2E,EAAKwQ,KAAKpO,OAAOkQ,GAAMjX,SAC3CqX,GAAW,GACN9P,KAET,IAAK8P,EAAU,cACf1S,EAAKwQ,KAAO,CAAEqB,KAAM7R,EAAKwQ,KAAKqB,KAAMzP,OAAAA,MAjBzB,kBAgBI,MAGjB,OAAOpC,EAAKwQ,KAEd,SAASM,EAAeR,EAAkBE,GACxC,IAEMqD,EAAYD,EAAiBtD,EADrBmD,EAAY,CADR5X,OAAOiL,YAAYjL,OAAOsL,QAAQqJ,EAAKqB,MAAMhL,KAAI,yBAAEjJ,EAAF,KAAO2M,EAAP,WAAc,CAAC3M,EAAK,CAAE2K,IAAKgC,EAAG9B,IAAK8B,SAC7E,SAAgB1O,OAAOuG,OAAOoO,EAAKpO,QAAQyE,KAAI,SAAAzE,GAAM,OAAImR,EAAgBnR,UAGlG,OAAOuH,EAAY2G,GAAO,SAAApT,GACxB,IAAQgL,EAAchL,EAAdgL,UACF4L,EAAgB5W,EAAEiL,SAAStB,KAAI,SAAA0D,GAAC,OAAIsJ,EAAU3J,IAAIK,MACxD,OAAQrC,GACN,IAAK,YACH,QAAuC4L,EAAvC,GAAO/W,EAAP,KAAc8N,EAAd,KAAyBC,EAAzB,KAA+BC,EAA/B,KACA,GAAIhO,EAAMwL,KAAOsC,EAAUpC,IAAK,OAAOvL,EAAEiL,SAAS,GAC7C,GAAIpL,EAAM0L,IAAMoC,EAAUtC,IAAK,OAAOR,EAAS,GACpD,GAAI+C,EAAKrC,MAAQqC,EAAKvC,KACpBwC,EAAKtC,MAAQsC,EAAKxC,KAClBuC,EAAKvC,MAAQwC,EAAKxC,KAAO8G,SAASvE,EAAKvC,KACvC,OAAOR,EAAS+C,EAAKrC,KACvB,MAEF,IAAK,MACH,IAAMsL,EAAc7W,EAAEiL,SAAS5J,QAAO,SAACsN,EAAGvQ,GACxC,IAAM0Y,EAAMF,EAAcxY,GAC1B,OAAOwY,EAAczJ,OAAM,SAAC4J,EAAK7G,GAAN,OAAY4G,EAAIzL,KAAO0L,EAAIxL,UAExD,GAAIsL,EAAY1Y,OAASyY,EAAczY,OAAQ,OAAOkN,EAAAA,WAAA,IAAOwL,IAC7D,MAEF,IAAK,MACH,IAAMA,EAAc7W,EAAEiL,SAAS5J,QAAO,SAACsN,EAAGvQ,GACxC,IAAM0Y,EAAMF,EAAcxY,GAC1B,OAAOwY,EAAczJ,OAAM,SAAA4J,GAAG,OAAID,EAAIvL,KAAOwL,EAAI1L,UAEnD,GAAIwL,EAAY1Y,OAASyY,EAAczY,OAAQ,OAAOoN,EAAAA,WAAA,IAAOsL,IAIjE,OAAO7W,KACN,SAAAA,GAAC,OAAIA,KAEV,SAASuW,EAAYS,GACnB,IAAMtR,EAAoB,GAS1B,OARAsR,EAAOlV,SAAQ,SAAAuI,GACb1L,OAAOsL,QAAQI,GAAOvI,SAAQ,YAAmB,IAAD,SAAhBpB,EAAgB,KAAXb,EAAW,KAC1C6F,EAAOhF,IACTgF,EAAOhF,GAAK2K,KAAOxL,EAAMwL,IACzB3F,EAAOhF,GAAK6K,KAAO1L,EAAM0L,KACpB7F,EAAOhF,GAAP,KAAmBb,SAGvB6F,EAET,SAAS2Q,EAAgB/C,GACvB,IAAM5N,EAAoB,GAe1B,OAdI4N,EAAKnV,SACPQ,OAAOuC,KAAKoS,EAAK,GAAGpO,QACjB7D,QAAO,SAAAX,GAAG,OAAI4S,EAAKnG,OAAM,SAAA4I,GAAG,OAAIA,EAAI7Q,OAAOxE,SAC3CoB,SAAQ,SAAApB,GAAG,OAAIgF,EAAOhF,GAAO,CAAE2K,IAAKiI,EAAK,GAAGpO,OAAOxE,GAAM6K,IAAK+H,EAAK,GAAGpO,OAAOxE,OAChF4S,EAAKxR,SAAQ,YACX,IAD4B,IAAdoD,EAAa,EAAbA,OACd,MAA2BvG,OAAOsL,QAAQ/E,GAA1C,eAAmD,CAA9C,gBAAOxE,EAAP,KAAYb,EAAZ,KACE6F,EAAOhF,IAENgF,EAAOhF,GAAK6K,IAAM1L,IAAO6F,EAAOhF,GAAK6K,IAAM1L,GAC3C6F,EAAOhF,GAAK2K,IAAMxL,IAAO6F,EAAOhF,GAAK2K,IAAMxL,IAH/B6F,EAAOhF,GAAO,CAAE2K,IAAK,EAAGE,IAAK1L,QAQ9C6F,EAET,SAASgR,EAAiBtD,EAAkB6D,GAC1C,IAAM5M,EAAQ,IAAIwC,IAmDlB,OAjDAhB,EAAauH,GAAO,SAAAzE,OAAU,SAAAuI,GAAO,IAAD,EAI9BrC,EAHE7U,EAAIkX,EACFlM,EAAchL,EAAdgL,UACFC,EAAWjL,EAAEiL,SAAStB,KAAI,SAAAmF,GAAE,OAAIzE,EAAM2C,IAAI8B,MAEhD,OAAQ9D,GACN,IAAK,OACH,GAAkB,QAAdhL,EAAE2L,KAAK,GACT,MAAM,IAAI9H,MAAJ,6BAAgC7D,EAAE2L,KAAlC,2BACRkJ,EAAO,UAAGoC,EAAMjX,EAAE2L,KAAK,WAAhB,QAAuB,CAAEN,IAAK,EAAGE,IAAK,GAC7C,MACF,IAAK,QAASsJ,EAAUsC,EAAc,CAACnX,EAAEH,QAAS,MAClD,IAAK,YAAagV,EAAUsC,EAAcnX,EAAE8S,MAAO,MACnD,IAAK,MAAO,IAAK,MAAO,IAAK,MAC3B+B,EAAU,CACRxJ,IAAKmC,EAAcxC,GAAWC,EAAStB,KAAI,SAAA0D,GAAC,OAAIA,EAAEhC,QAClDE,IAAKiC,EAAcxC,GAAWC,EAAStB,KAAI,SAAA0D,GAAC,OAAIA,EAAE9B,SACjD,MACL,IAAK,MAAOsJ,EAAU,CACpBxJ,IAAKmC,EAAcxC,GAAW,CAACC,EAAS,GAAGM,MAC3CA,IAAKiC,EAAcxC,GAAW,CAACC,EAAS,GAAGI,OAC1C,MACH,IAAK,MAAOwJ,EAAU5J,EAAS1B,QAAO,SAACqF,EAAMiG,GAAP,OAAmBsC,EAAc,CACrEvI,EAAKvD,IAAMwJ,EAAQxJ,IAAKuD,EAAKvD,IAAMwJ,EAAQtJ,IAC3CqD,EAAKrD,IAAMsJ,EAAQxJ,IAAKuD,EAAKrD,IAAMsJ,EAAQtJ,SACxC,MACL,IAAK,YACqCsJ,EAApC5J,EAAS,GAAGI,KAAOJ,EAAS,GAAGM,IAAeN,EAAS,GAClDA,EAAS,GAAGM,IAAMN,EAAS,GAAGI,IAAe8L,EAAc,CAAC,IACtDA,EAAc,CAAC,GAAI,CAAClM,EAAS,KAC5C,MACF,IAAK,WACH,QAAeA,EAAf,GAAOoC,EAAP,KAAU+J,EAAV,KAAyB5L,EAAM,CAAEH,IAAKgC,EAAEhC,IAAM+L,EAAE/L,IAAKE,IAAK8B,EAAE9B,IAAM6L,EAAE7L,KAElEsJ,EADErJ,EAAIH,KAAO,GAAKG,EAAID,KAAO,EAClB8B,EAAEhC,KAAO,GAAKgC,EAAE9B,KAAO,EAAK,CAAEF,IAAKP,IAAKS,IAAKT,KAAQ,CAAEO,KAAMD,IAAUG,IAAKH,KAG7E+L,EAAc,CACtB9J,EAAEhC,IAAMG,EAAIH,IAAKgC,EAAEhC,IAAMG,EAAID,IAC7B8B,EAAE9B,IAAMC,EAAIH,IAAKgC,EAAE9B,IAAMC,EAAID,MAEjC,MAEF,IAAK,OAAQ,IAAK,SAAU,IAAK,QAC/B,MAAM,IAAI1H,MAAJ,sBAAyBmH,EAAzB,UACR,QAASV,EAAkBU,GAE7BX,EAAM6C,IAAIlN,EAAG6U,MAERxK,EAET,SAAS8M,EAAcjS,GAAsE,IAA3CmS,EAA0C,uDAAZ,GACxE9L,EAAM+B,KAAK/B,IAAL,MAAA+B,KAAI,EAAQpI,GAAR,SAAmBmS,EAAS1N,KAAI,SAAA0D,GAAC,OAAIA,EAAE9B,UACjDF,EAAMiC,KAAKjC,IAAL,MAAAiC,KAAI,EAAQpI,GAAR,SAAmBmS,EAAS1N,KAAI,SAAA0D,GAAC,OAAIA,EAAEhC,UACvD,MAAO,CAAEA,IAAAA,EAAKE,IAAAA,GAGT,SAAS+L,EAAWhE,EAAuBiE,GAChD,MAAO,CACL5C,KAAMrB,EAAKqB,KACXzP,OAAQwE,EAAasJ,GAAa,SAAAoC,GAChC,IAAM/T,EAASkW,EAAQnC,GACvB,OAAQ/T,EAAOmW,MACb,IAAK,KAAM,OAAOlE,EAAKpO,OAAOkQ,GAAM/T,QAAO,SAAA0U,GAAG,OAAI1U,EAAOoW,IAAInL,IAAIyJ,EAAIV,OACrE,IAAK,UAAW,OAAO/B,EAAKpO,OAAOkQ,GAAM/T,QAAO,SAAA0U,GAAG,OAAK1U,EAAOqW,KAAKpL,IAAIyJ,EAAI7I,QAC5E,IAAK,WAAY,OAAOoG,EAAKpO,OAAOkQ,GAAM/T,QAAO,SAAA0U,GAAG,OAAI1U,EAAOqW,KAAKpL,IAAIyJ,EAAI7I,aA0B7E,SAASyK,EAAYrE,GAC1B,OAAON,EAAYzJ,QAAO,SAACqO,EAAQxC,GAAT,OAAkBwC,EAAStE,EAAKpO,OAAOkQ,GAAMjX,SAAQ,GAI1E,SAAU8U,EAAmBsE,EAAkCM,GAA/D,mFACCC,EAAU9N,EAAU6N,EAAS3S,QAAQ,SAAAA,GAAM,OAAI,IAAIgH,IAAIhH,EAAOyE,KAAI,SAAAO,GAAC,OAAIA,EAAEgD,WAD1E,IAE6BqK,GAF7B,yDAEmBlW,EAFnB,qBAGE,gBAAO+T,EAAP,KAAapV,EAAb,KACG+X,EAAYD,EAAQ1C,GAC1B,OAAQpV,EAAEwX,MACR,IAAK,WAAY,GAAI,EAAIxX,EAAE0X,MAAMvK,OAAM,SAAAxN,GAAC,OAAKoY,EAAUzL,IAAI3M,MAAK,6BAAsB,MACtF,IAAK,UAAW,GAAI,EAAIoY,GAAW5K,OAAM,SAAAxN,GAAC,OAAIK,EAAE0X,KAAKpL,IAAI3M,MAAM,+BAPhE,MAGqBhB,OAAOsL,QAAQ5I,GAHpC,4JAWH,OAXG,UAWGA,EAXH,sHAAArB,IAAA,yEAcA,SAASgY,EAAmBxE,GACjC,OAAO,IAAItH,IAAa,OAATsH,QAAS,IAATA,GAAAA,EAAWqC,SAAS,GAC/BrC,EAAUqC,SAAS,GAAK,CAAC,EAAG,GAAK,CAAC,EAAG,EAAG,EAAG,GAClC,OAATrC,QAAS,IAATA,GAAAA,EAAWqC,SAAS,GAAK,CAAC,EAAG,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAGvD,SAAU3C,GAAWM,EAA4BqE,GAAjD,YAaII,EAUAC,EAvBJ,YAuDKnL,EAvDL,uEA8BL,IAyBUA,EAvDL,SAuDWoL,GAvDX,sBAmEOpL,EA6BAqL,EAhGP,iEAgGOA,EAhGP,SAgGkBha,GAhGlB,iGAiGKia,EAAYC,EAASna,OAASC,EAAGma,EAA6B,GAAIC,EAA4B,GAAIC,EAA6B,GACjIC,EAAW,EAlGd,IAmGiBZ,GAnGjB,0BAmGU5K,EAnGV,QAoGOyL,EAAaC,EAAc1L,GAAMwD,EAAQF,EAAOtD,GACtD,IAAKyL,EAAY,iBACbtO,EAAM,EAAGgO,GAAWlL,OAAM,SAAA+C,GAAC,OAAKyI,EAAWrM,IAAIoE,EAAQR,MAAKuI,EAASjX,KAAK0L,GACpEyL,EAAWrM,IAAIoE,GAIhBrG,EAAM,EAAGgO,GAAWrE,MAAK,SAAA9D,GAAC,OAAKyI,EAAWrM,IAAIoE,EAAQR,OAAKqI,EAAS/W,KAAK0L,IAHhFwL,GAAY,EAAIC,GAAYnG,MAAK,SAAAnF,GAAC,OAAIA,EAAIqD,KAAUA,EACpD8H,EAAQhX,KAAK0L,KAzGhB,0OAAAlN,IAAA,0BA6GG0Y,EAAWL,GA7Gd,sDA8GGja,IAAMka,EAASna,OA9GlB,iBA+GC,OA/GD,UA+GC,KAAWuH,GA/GZ,6CAkHGgT,IAAaL,EAlHhB,qBAmHmBG,GAnHnB,2DAsHG,OAHStL,EAnHZ,QAoHGsD,EAAOtD,KACPxH,EAAOsN,EAAYsF,EAASla,KAAO,CAAEoZ,KAAM,WAAYE,KAAM,IAAIxL,IAAI,CAACgB,KACtE,gBAAOkL,EAAWha,EAAI,GAAtB,SAtHH,QAuHGoS,EAAOtD,KAvHV,wHAAAlN,IAAA,uEA2HqBuY,EAAaC,GA3HlC,0CA8HC,OAHStL,EA3HV,KA4HCsD,EAAOtD,KACPxH,EAAOsN,EAAYsF,EAASla,KAAO,CAAEoZ,KAAM,WAAYE,KAAM,IAAIxL,IAAI,CAACgB,KACtE,gBAAOkL,EAAWha,EAAI,GAAtB,SA9HD,QA+HCoS,EAAOtD,KA/HR,oCAkID,OADAxH,EAAOsN,EAAYsF,EAASla,KAAO,CAAEoZ,KAAM,UAAWE,KAAM,IAAIxL,IAAJ,UAAYsM,EAAYC,EAAaF,KACjG,gBAAOH,EAAWha,EAAI,GAAtB,SAlIC,2EAmEO2O,EAnEP,SAmEa3O,GAnEb,8EAoEGA,IAAMya,EAAS1a,OApElB,gBAqEQ,uBAAOia,EAAW,GAAlB,QArER,iDAuEiBN,GAvEjB,oHAuEU5K,EAvEV,SAwEK4L,EAAKxM,IAAIY,GAxEd,+DAyEO/O,EAAS0a,EAASza,GAAGD,OAAQwa,EAAaC,EAAc1L,GAC1D6L,EAAmB,GAEnBJ,GAAeA,EAAWrM,IAAInO,GA5EnC,sBA8EG4a,GAAmB,UAAC1O,EAAMlM,EAAS,EAAG,GAAGqU,MAAK,SAAAwG,GAAC,OAAIL,EAAWrM,IAAI0M,aAA/C,QAAsD,GAAK7a,GACvD8a,GA/E1B,4DAuFC,OALAH,EAAKvM,IAAIW,GACTsD,EAAOtD,GAAO2L,EAASza,GAAGD,OAC1B0a,EAASza,GAAG0D,SAAQ,SAAAoO,GAAC,OAAIxK,EAAOsN,EAAY9C,IAAM,CAAEsH,KAAM,WAAYE,KAAM,IAAIxL,IAAI,CAACgB,QACrF+L,GAAkBF,EAElB,gBAAOhM,EAAM3O,EAAI,GAAjB,SAvFD,QAyFC6a,GAAkBF,EAClBvI,EAAOtD,GAAO,EACd4L,EAAKtM,OAAOU,GA3Fb,gUAAAlN,IAAA,qFAmEO+M,GAnEP,WAgGOqL,GAxCJU,EAA4B,IAAI5M,IAClC2M,EAAuB,GAAIP,EAAqB,GAzDjD,IA0DaH,GA1Db,IA0DH,2BAAW/Z,EAAY,QACrBya,EAASrX,KAAK,IACJ,IAANpD,EAASka,EAAS9W,KAAKqX,EAAS1a,OAAS,GACxC0a,EAASza,GAAGoD,KAAKqX,EAAS1a,OAAS,GA7DvC,0BAAA6B,IAoIH,OArEA6Y,EAAWA,EAASxX,QAAO,SAAA6I,GAAC,OAAIA,EAAE/L,UAAQ+a,MAAK,SAAC1P,EAAGiB,GAAJ,OAAUA,EAAEtM,OAASqL,EAAErL,UAClE8a,EAAiBX,EAASna,OAoE9B,gBAAO4O,EAAM,GAAb,SApIG,yCAuBImL,EAvBJ,SAuBiBC,EAAiBgB,GACrC,IAAI9O,EAAM8O,EAAY,EAAG,GAAGnF,MAAK,SAAA5V,GAAC,OAAiB,IAAb+Z,EAAM/Z,MAI5C,OAFA+Z,EAAK,EAAOA,IACNgB,GAAa,EACZhB,EAAM5O,QAAO,SAACC,EAAGiB,GAAJ,OAAc,EAAJjB,EAAQiB,IAAG,IAflCwN,EAbJ,SAamBpD,EAAmB/B,EAAmBwF,GAC5D,GAAuB,IAAnBzD,EAAQ1W,OAAZ,CADgF,UAMhE2U,GANgE,yBAMrE1U,EANqE,QAM1D6Z,EAAe,GAAD,SAAKpD,GAAL,CAAczW,IAAI0U,EAAMwF,EAASjX,QAAO,SAAA6O,GAAC,OAAIA,IAAM9R,OAAvF,2BAAsB,IAN0D,8BAOhF6Z,EAAe,GAAD,SAAKpD,GAAL,CAAcA,EAAQ1W,SAAS,IAAI+N,IAAJ,YAAY4G,GAAZ,CAAkB+B,EAAQ1W,UAAzD,YAAuEma,GAAvE,CAAiFzD,EAAQ1W,eALjGib,EAAgB9M,IAAIgM,EAASna,SAC/Bkb,EAAO7X,KAAKqT,IAhBb,WAuDK9H,GA5CJ+K,EAXD,EAWe,IAAI5L,IAAI2L,IAAYuB,EAAkBpB,EAAmBxE,EAAUkC,SACnF2D,EAAqB,GAUzBpB,EAAe,CAAC,GAAI,IAAI/L,IAAI,CAAC,IAAK,CAAC,IAtB9B,WA8BIiN,GACP,IA/BG,EA+BGT,EAAgC,IAAI7L,IA/BvC,IAgCiBwM,GAhCjB,IAgCH,2BAA4B,CAAC,IAAD,EAAjBlB,EAAiB,QACpB9C,EAAK6C,EAAaC,EAAOgB,QACpBlT,IAAPoP,GACJqD,EAASxL,IAAImI,GAAI,UAACqD,EAAS1L,IAAIqI,UAAd,QAAqB,IAAInJ,IAAIiM,EAAMpZ,MAAM,EAAGoa,IAAYvE,KAAO,GAAK,IAnCpF,0BAAA5U,IAAA,UAqC2B0Y,EAASzO,WArCpC,wCAqCSoL,EArCT,KAsCD,GAAkB,IAtCjB,KAsCoB,CACnB,IAAM8C,EAAK,EAAOkB,EAAO7G,MAAK,SAAA2F,GAAK,OAAID,EAAaC,EAAOgB,KAAe9D,MAC1E8C,EAAMgB,GAAa,EACnBE,EAASA,EAAOhY,QAAO,SAAA8W,GAAK,OAAID,EAAaC,EAAOgB,KAAe9D,KACnEgE,EAAO7X,KAAK2W,KALhB,2BAAmD,IArChD,0BAAAnY,MA8BImZ,EAAY,EAAGA,GAAa,EAAGA,IAAc,EAA7CA,GAmBHG,EAAW,CAAE9B,KAAM,UAAoBE,KAAM,IAAIxL,KACjDxG,EAAwBgE,EAAasJ,GAAa,SAAArE,GAAC,OAAI2K,KAEvD9I,EApDD,OAoDexG,EAAUwJ,GAAW,SAAA7E,GAAC,OAAI,MAAOjF,EAAaoO,GAAS,SAAAnJ,GAAC,OAAI,MAC1EiK,EAAgB5O,EAAUwJ,EAAWwE,GArDtC,IAsIeqB,GAtIf,2DAsIuB,OAAjBlB,EAtIN,QAsIuB,gBAAOpL,EAAMoL,GAAb,SAtIvB,wHAAAnY,IAAA,0EA8ImC0J,EAAasJ,GAAa,SAAArE,GAAC,MAAK,CAAE6I,KAAM,UAAoBE,KAAM,IAAIxL,QCrgBjG,SAASqN,GAAgBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIxZ,UAAU,qCCFxB,SAASyZ,GAAkB/X,EAAQgY,GACjC,IAAK,IAAIvb,EAAI,EAAGA,EAAIub,EAAMxb,OAAQC,IAAK,CACrC,IAAIwb,EAAaD,EAAMvb,GACvBwb,EAAWhZ,WAAagZ,EAAWhZ,aAAc,EACjDgZ,EAAW/Y,cAAe,EACtB,UAAW+Y,IAAYA,EAAW9Y,UAAW,GACjDnC,OAAOgC,eAAegB,EAAQiY,EAAWlZ,IAAKkZ,IAInC,SAASC,GAAaJ,EAAaK,EAAYC,GAM5D,OALID,GAAYJ,GAAkBD,EAAY7a,UAAWkb,GACrDC,GAAaL,GAAkBD,EAAaM,GAChDpb,OAAOgC,eAAe8Y,EAAa,YAAa,CAC9C3Y,UAAU,IAEL2Y,ECXF,IAAMO,GAAb,WAcE,aAA+EC,GAA6C,IAAD,OAA7G3G,EAA6G,EAA7GA,KAAM4G,EAAuG,EAAvGA,mBAAoB3C,EAAmF,EAAnFA,QAAS4C,EAA0E,EAA1EA,SAAUC,EAAgE,EAAhEA,UAAgE,gBAb3HC,OAAkB,GAayG,KAZ3HC,iBAAoCrU,EAYuF,KAX3HsU,cAW2H,OAV3HJ,cAU2H,OAT3HxM,WAAqBvC,IASsG,KAR3HgP,eAQ2H,OAP3H/O,SAO2H,OAL3HiI,UAK2H,OAJ3HF,WAI2H,OAF3H6G,cAE2H,OA0I3HO,cAAgB,SAAC9J,GACf,EAAK+J,SAAQ,GACb,EAAKR,SAAL,GAAgBS,QAAS,UAAWJ,YAAa,EAAKA,aAAgB5J,IACtE,EAAK4J,iBAAcrU,EACnByK,EAAMiK,OAAS,EACfjK,EAAMkK,OAAS,EACflK,EAAMmK,QAAU,GA/IhB/V,KAAKwO,KAAOA,EACZxO,KAAKuG,IAAMkM,EAAQ5N,KAAI,SAAA0D,GAAC,OAAIA,EAAEhC,OAC9BvG,KAAKsV,UAAYA,EACjBtV,KAAKmV,SAAWA,EAChBnV,KAAKsO,MAAQmE,EAAQ5N,KAAI,SAAA0D,GAAC,OAAIA,EAAExN,SAChCiF,KAAKsO,MAAM5R,KAAK0Y,GACZC,IACFrV,KAAKyV,SAAW,GAChBzV,KAAKqV,SAAWA,EAChBrV,KAAKsO,MAAM5R,KAAK2Y,IAxBtB,kCA4BE,SAAQW,EAAsBC,GACxBjW,KAAK6I,UAAYmN,IAAchW,KAAK6I,UAAYmN,GACwBC,EAApEb,mBAAR,IAA4Bc,EAAgDD,EAAhDC,YAAa3Z,EAAmC0Z,EAAnC1Z,OAAQ4Z,EAA2BF,EAA3BE,gBAAiBC,EAAUH,EAAVG,MAE1DV,EAAkB1V,KAAlB0V,cAAwBvX,EAAO6B,KACnCqW,EAAU7D,EAAWxS,KAAKwO,KAAMjS,GAC9B+Z,EAAazD,EAAYwD,GAE/B,KAAIJ,EAAWM,OACTN,EAAWO,cAAcC,OAAOR,EAAWO,cAAcC,OAAOpd,OAAS,GAAK2G,KAAK6I,WADzF,CASA,IAAIyF,EAAQtO,KAAKsO,MACb/H,EAAMvG,KAAKuG,SACOpF,IAAlBnB,KAAKqV,UAAwB/G,EAAM5R,KAAKsD,KAAKqV,UAnBgB,MAqBrChH,EAD5BC,EAAQrF,EAASqF,EAAO,IAAI,SAAAzE,GAAC,OAAI,KACWtD,EAAK8P,EAASrW,KAAKsV,UAAW,GAAI,CAC5ErG,eAAe,EAAMH,gBAAgB,IADpCR,EArB8D,EAqB9DA,MAAa+H,EArBiD,EAqBvD7H,KAwEV,IArEA,MAAmChF,EAAW8E,GAAO,SAAApT,GAAC,OAAIA,EAAE2L,KAAK,MAAjE,SAAO6P,EAAP,KAAgB9M,EAAhB,KAAyBiB,EAAzB,KAEM2D,EAAO3U,OAAOuG,OAAOiW,EAAQjW,QAChCgU,MAAK,SAAC1P,EAAGiB,GAAJ,OAAUjB,EAAErL,OAASsM,EAAEtM,UAC5BwL,KAAI,SAAA2J,GAAI,OAAIA,EAAK3J,KAAI,SAAAoM,GAAG,MAAK,CAC5BV,GAAIU,EAAIV,GAAInI,IAAK6I,EAAI7I,IAAKhI,OAAQvG,OAAOsL,QAAQ8L,EAAI7Q,QAClDyE,KAAI,yBAAEjJ,EAAF,KAAOb,EAAP,WAAmB,CAAEa,IAAKgO,EAAQhO,GAAOb,MAAAA,EAAOwb,MAAO,MAC3Dha,QAAO,gBAAGX,EAAH,EAAGA,IAAKb,EAAR,EAAQA,MAAR,YAA4BoG,IAARvF,GAA+B,IAAVb,YAGjD4X,EAAgBnZ,MAAMgV,EAAKnV,QAAQuR,KAAK,IAC1CgB,EAAQ,CAAEiK,OAAQ,EAAGC,OAAQ,EAAGC,QAASO,EAAazD,EAAYwD,IAElEM,GAAYrQ,IAwDhB,MAA2BzM,OAAOsL,QAAQkR,EAAQxG,MAAlD,eAAyD,CAApD,gBAAOjU,EAAP,KAAYb,EAAZ,KACGzB,EAAIsQ,EAAQhO,QACRuF,IAAN7H,IACFuR,EAAOvR,GAAKyB,GAIhB,GADA6b,EAAQpI,EAAKnV,OAAS,EAAG,IACrB4c,EAAWM,MAAO,CACpB,IAAMM,EAAKZ,EAAWO,cAChBC,EAASI,EAAGJ,OAAOI,EAAGJ,OAAOpd,OAAS,GAE5CmL,QAAQsS,IAAI,aAAc,CAAElL,MAAOiH,EAAYwD,GAAUD,MAAAA,GAASpW,KAAK6I,UAAW,CAAEkO,IAAKN,EAASE,GAAY,CAAErI,MAAAA,EAAO+H,QAAAA,GAAWQ,GAGpI,OADA7W,KAAK0V,cAAc9J,GACZ5L,KAAK6I,UApEZ,SAAS+N,EAAQtd,EAAW0d,GAC1B,GAAI1d,EAAI,EAAR,CACE,IAAMsH,EAAS8V,IACfC,EAAWnO,KAAK/B,IAAI7F,EAAOsV,EAAY7c,QAASsd,GAChD,IAAIM,EAAcpd,OAAOsL,QAAQgR,GAAiB9N,OAAM,yBAAE6O,EAAF,iBAA0BnG,SAASiG,EAAaE,OAGxG,GAAID,QAAgD9V,IAAjCgV,EAAe,UAA6B,CAC7D,IAAMgB,EAAWtd,OAAOuG,OAAO4W,GAAcvS,QAAO,SAACC,EAAGiB,GAAJ,OAAUjB,EAAKiB,EAAI,IAAI,GAC3EsR,GAAed,EAAe,UAAcpF,SAASoG,GAGvD,GAAIF,GAAe1Q,EAAI8B,OAAM,SAAC+O,EAAG9d,GAAJ,OAAW8d,GAAKxW,EAAOtH,MAAM,CAClD,IACF+d,EADEtc,EAAQ6F,EAAO2F,EAAIlN,QAAWkc,EAAgCpX,EAAhCoX,OAAQE,EAAwBtX,EAAxBsX,SAM5C,GAJI1a,GAFgEoD,EAAd0K,YAGpDwO,EAAQ,CAAEtc,MAAAA,EAAOuc,YAAY,EAAK3E,IAClC4C,EAAO7Y,KAAK2a,IAEV5B,EAAU,CACZ,IAAMlN,EAAI3H,EAAO2F,EAAIlN,OAAS,KACzBoc,EAASlN,IAAMkN,EAASlN,GAAIxN,MAAQA,KAClCsc,IAAOA,EAAQ,CAAEtc,MAAAA,EAAOuc,YAAY,EAAK3E,KAC9C0E,EAAME,KAAOhP,EACbkN,EAASlN,GAAK8O,SAIfzL,EAAMkK,QAAU,OAGvBtH,EAAKlV,GAAG0D,SAAQ,SAAAiU,GAAQ,IAAD,YACrB0B,EAAIrZ,GAAK2X,EAAIV,GADQ,UAGCU,EAAI7Q,QAHL,IAGrB,2BAAkC,CAAC,IAAxB2P,EAAuB,QACxBnU,EAAemU,EAAfnU,IAAKb,EAAUgV,EAAVhV,MACbgV,EAAQwG,MAAQ1L,EAAOjP,GACvBiP,EAAOjP,IAAQb,GANI,8BASrBic,EAAY,UAAC/F,EAAI7I,WAAL,QAAY,IAAM,aAAK4O,EAAY,UAAC/F,EAAI7I,WAAL,QAAY,WAA7B,QAAoC,GAClEwO,EAAQtd,EAAI,EAAG0d,GACfA,EAAY,UAAC/F,EAAI7I,WAAL,QAAY,KAAO,EACK,IAAhC4O,EAAY,UAAC/F,EAAI7I,WAAL,QAAY,YAAkB4O,EAAY,UAAC/F,EAAI7I,WAAL,QAAY,IAZjD,UAcQ6I,EAAI7Q,QAdZ,IAcrB,2BAAyC,eAA5BxE,EAA4B,EAA5BA,IAAK2a,EAAuB,EAAvBA,MAAuB1L,EAAOjP,GAAO2a,GAdlC,kCAgBb,IAANjd,IACFsS,EAAMiK,QAAUrH,EAAK,GAAGnV,OACpBuS,EAAMiK,OAAS,MACjBH,EAAc9J,IA/EhB5L,KAAK0V,cAAc,CAAEG,OAAQ,EAAGC,OAAQ,EAAGC,QAASO,MAtC5D,qBA0IE,SAAQkB,GAAuB,IAAD,EAMuB,EAL3ClC,EAActV,KAAdsV,UACJzb,OAAOuC,KAAP,UAAY4D,KAAKyV,gBAAjB,QAA6B,IAAIpc,QAAU,MAC7C2G,KAAKyV,SH2LJ,SAAmBgC,GAGxB,IAFA,IAAIC,EAAQ,IACRtb,EAAO,IAAIgL,IAAIqQ,EAAM7R,SAAQ,SAAA2C,GAAC,OAAI1O,OAAOuG,OAAOmI,GAAG1D,KAAI,SAAAO,GAAC,OAAIoD,KAAKmP,MAAMvS,EAAEmS,KAAQG,UAC9Etb,EAAK0T,KAFuC,MAGjD4H,GAHmC,EAInCtb,EAAO,IAAIgL,IAAI,EAAIhL,GAAMyI,KAAI,SAAAjJ,GAAG,OAAI4M,KAAKmP,MAAM/b,EAJZ,OAMrC,IAPqD,EAO/CgF,EAAmB,GAP4B,IAQlC6W,GARkC,IAQrD,2BACE,QADSF,EACT,cAAoB1d,OAAOuG,OAAOmX,GAAlC,eAAyC,CAApC,IAAMF,EAAK,KACR9O,EAAIC,KAAKmP,MAAMN,EAAME,KAAQG,GAASA,IACvC9W,EAAO2H,IAAM3H,EAAO2H,GAAIxN,MAAQsc,EAAMtc,SACzC6F,EAAO2H,GAAK8O,IAZmC,8BAcrD,OAAOzW,EGzMagX,CAAU,CAAC5X,KAAKyV,YAIhCzV,KAAKuV,OAASvV,KAAKuV,OAChBnB,MAAK,SAAC1P,EAAGiB,GAAJ,OAAUA,EAAE5K,MAAQ2J,EAAE3J,SAC3Bd,MAAM,EAAGqb,GACZtV,KAAKwV,YAAcxV,KAAKuV,OAAO1Q,KAAI,SAAA0D,GAAC,OAAIA,EAAExN,SAC1CiF,KAAK6I,UAAYL,KAAK/B,IAAIzG,KAAK6I,UAAd,UAAyB7I,KAAKwV,YAAYF,EAAY,UAAtD,SAA6DhP,SArJpF,KCgDO,SAASuR,KAA8C,IAAD,uBAArCC,EAAqC,yBAArCA,EAAqC,gBAC3D,OAAOA,EAAUhS,OAEZ,SAASiS,KACd,OAAOtS,EAAAA,WAAA,aAAwBZ,KAAI,SAAAmT,GAAK,OAAIA,EAAMvT,QAAO,SAACwT,EAAKC,GAAS,IAAD,EAGrE,OAFAD,EAAIE,OAASD,EAAIC,OACjB,EAAAF,EAAIG,OAAM1b,KAAV,UAAkBwb,EAAIE,QACfH,IACN,CAAEE,MAAO,EAAGC,MAAO,QAEjB,SAASC,GAAUjT,GACxB,MAAO,CAAC,CAAE+S,MAAO/S,EAAGgT,MAAO,KAEtB,SAASE,GAAMC,GACpB,MAAO,CAAC,CAAEJ,MAAO,EAAGC,MAAO,CAACG,KAGvB,SAASC,GAAcC,GAC5B,IAAIC,EAAG,EAAOD,GACdC,EAAI1b,SAAQ,SAAAoa,GAAC,OAAIA,EAAEgB,MAAMhE,UACzBsE,EAAItE,MAAK,cAA2C,IAAjCuE,EAAgC,EAAvCP,MAA0BQ,EAAa,EAApBR,MAC7B,GAAIO,EAAOtf,SAAWuf,EAAOvf,OAAQ,OAAOsf,EAAOtf,OAASuf,EAAOvf,OACnE,IAAK,IAAIC,EAAI,EAAGA,EAAIqf,EAAOtf,OAAQC,IACjC,GAAIqf,EAAOrf,KAAOsf,EAAOtf,GAAI,OAAOqf,EAAOrf,GAAKsf,EAAOtf,IAAM,EAAI,EAEnE,OAAO,KAGT,IAX0D,eAWjDA,GACP,IAGqC,IAHjCoL,EAAIgU,EAAIpf,GAAG8e,MACXzS,EAAI+S,EAAIpf,EAAI,GAAG8e,MACnB,GAAI1T,EAAErL,SAAWsM,EAAEtM,OAAQ,iBACvBqL,EAAE2D,OAAM,SAACwQ,EAAIvf,GAAL,OAAWuf,IAAOlT,EAAErM,QAC9Bof,EAAIpf,GAAG6e,OAAQ,UAACO,EAAIpf,GAAG6e,aAAR,QAAiB,IAAjB,UAAuBO,EAAIpf,EAAI,GAAG6e,aAAlC,QAA2C,GAC1DO,EAAII,OAAOxf,EAAI,EAAG,KANbA,EAAIof,EAAIrf,OAAS,EAAGC,GAAK,EAAGA,IAAK,EAAjCA,GAST,OAAOof,EA2DF,SAASK,GAAT,GAA0D,IAArCzK,EAAoC,EAApCA,MAAO8J,EAA6B,EAA7BA,MACjC,OAAO1R,EAAAA,WAAA,IAAO0R,EAAMvT,KAAI,gBAAGsT,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAAsBzR,EAAAA,WAAA,GAAKwR,GAAL,SAAeC,EAAMvT,KAAI,SAAAI,GAAC,OAAIqJ,EAAMrJ,cCtJpF,SAAS+T,GAAaC,EAAtB,GAEE,IAFwE,IAAnC3f,EAAkC,EAAlCA,EAAG8R,EAA+B,EAA/BA,EAClC8N,EAAMD,EAAE3f,GAAG8R,GACR+N,EAAI,EAAGA,EAAIF,EAAE5f,OAAQ8f,IAC5B,GAAIA,IAAM7f,EACV,IAAK,IAAIqL,EAAI,EAAGA,EAAIsU,EAAE,GAAG5f,OAAQsL,IAC3BA,IAAMyG,IACV6N,EAAEE,GAAGxU,IAAMsU,EAAE3f,GAAGqL,GAAKsU,EAAEE,GAAG/N,GAAK8N,GAGnC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAE5f,OAAQ8f,IACxBA,IAAM7f,IACV2f,EAAEE,GAAG/N,IAAM6N,EAAEE,GAAG/N,GAAK8N,GAEvB,IAAK,IAAIvU,EAAI,EAAGA,EAAIsU,EAAE,GAAG5f,OAAQsL,IAC3BA,IAAMyG,IACV6N,EAAE3f,GAAGqL,GAAKsU,EAAE3f,GAAGqL,GAAKuU,GAEtBD,EAAE3f,GAAG8R,GAAK,EAAI8N,EAGhB,SAASE,GAASH,GAGhB,IAFA,IAAMI,EAAIJ,EAAE5f,OAAQiZ,EAAI2G,EAAE,GAAG5f,OACzBigB,EAAS,CAAEhgB,GAAI,EAAG8R,GAAI,EAAGmO,IAAKjT,KACzB8E,EAAI,EAAGA,EAAIkH,EAAI,EAAGlH,IACzB,KAAI6N,EAAEI,EAAI,GAAGjO,IAAM,GAAnB,CACA,IAAK,IAAI9R,EAAI,EAAGA,EAAI+f,EAAI,EAAG/f,IACzB,GAAI2f,EAAE3f,GAAG8R,GAAK,KAAM,CAClB,IAAMmO,EAAMN,EAAE3f,GAAGgZ,EAAI,GAAK2G,EAAE3f,GAAG8R,GAC3BmO,EAAMD,EAAOC,MAAKD,EAAS,CAAEhgB,EAAAA,EAAG8R,EAAAA,EAAGmO,IAAAA,IAI3C,GAAID,EAAOhgB,EAAI,EAAG,MAAMyF,MAAM,sBAGhC,GAAIua,EAAOhgB,EAAI,EAAG,MAAMyF,MAAM,oBAC9B,MAAO,CAAEzF,EAAGggB,EAAOhgB,EAAG8R,EAAGkO,EAAOlO,GAGlC,SAASoO,GAASP,GAGhB,IAFA,IAAMI,EAAIJ,EAAE5f,OAAQiZ,EAAI2G,EAAE,GAAG5f,OACzBigB,EAAS,CAAEhgB,GAAI,EAAG8R,GAAI,EAAGmO,IAAKjT,KACzBhN,EAAI,EAAGA,EAAI+f,EAAI,EAAG/f,IACzB,KAAI2f,EAAE3f,GAAGgZ,EAAI,IAAM,GAAnB,CACA,IAAK,IAAIlH,EAAI,EAAGA,EAAIkH,EAAI,EAAGlH,IACzB,GAAI6N,EAAE3f,GAAG8R,IAAM,KAAM,CACnB,IAAMmO,EAAMN,EAAE3f,GAAGgZ,EAAI,GAAK2G,EAAE3f,GAAG8R,GAC3BmO,EAAMD,EAAOC,MAAKD,EAAS,CAAEhgB,EAAAA,EAAG8R,EAAAA,EAAGmO,IAAAA,IAI3C,GAAID,EAAOhgB,EAAI,EAAG,MAAMyF,MAAM,cAC9B,MAAO,CAAEzF,EAAGggB,EAAOhgB,EAAG8R,EAAGkO,EAAOlO,GAElC,MAAMrM,MAAM,oBCvCd,SAAS0a,GAAOhP,EAAeiP,EAAgBC,GAC7C,QAAiCnQ,EAAW,CAACiB,IAAO,SAAA7Q,GAAC,OAAIA,EAAEiN,KAAK,MAAhE,GAAK6P,EAAL,KAAc9M,EAAd,KAAuBiB,EAAvB,KACA+O,GAAWF,EAAO9P,EAASiB,GAC3B,IAAMgP,EAASnD,IAAU,GAGzB,OAFAkD,GAAWD,EAAO/P,EAASiB,GAEpB,CAACgP,EADOnD,IAAU,IAQ3B,SAASoD,GAAarP,EAAqDiP,EAAgBC,GAsBzF,IAAMI,EArBN,SAASC,EAAQpgB,GACf,OAAQA,EAAEsM,WACR,IAAK,MACH,OAAOQ,EAAAA,WAAA,IAAO9M,EAAEuM,SAAStB,KAAI,SAAAjL,GAAC,OAAIogB,EAAQpgB,QAC5C,IAAK,QACH,OAAOmM,GAAUnM,EAAEmB,OACrB,IAAK,YACH,QAA+BnB,EAAEuM,SAAjC,GAAO8T,EAAP,KAAeC,EAAf,KAAqBC,EAArB,KAAyBC,EAAzB,KACA,GAAqB,UAAjBD,EAAGjU,WAA0C,UAAjBkU,EAAGlU,WAC7BiU,EAAGpf,OAASqf,EAAGrf,MACjB,OV8DQ6S,EU9DGqM,EV8DMpM,EU9DEqM,EV8DOpR,GU9DAqR,EAAGpf,MV8DQgO,GU9DAqR,EAAGrf,MVgE3C,CAAEmL,UAAW,YAAaC,SADhB,CAACW,EAAM8G,GAAK9G,EAAM+G,GAAK/G,EAAMgC,GAAOhC,EAAMiC,IAChB3H,KAAAA,GU5DrC,MADAoD,QAAQsS,IAAIld,GACNmF,MAAM,qDACd,QAEE,MADAyF,QAAQsS,IAAIld,GACNmF,MAAM,uDVuDb,IAAa6O,EAASC,EAAS/E,EAAWC,EAAW3H,EUnDrC4Y,CAAQvP,EAAKtE,SAAS,IAE3C,IAAasT,GAAOM,EAAcL,EAAOC,GAAzC,GAAKjV,EAAL,KAAQiB,EAAR,KACI0U,EAAO3R,EAAAA,IACX,EAAa,CAAC2R,EAAK,EAAE3V,IAAK2V,EAAK,EAAE1U,KAA5B2M,EAAL,KAAQzM,EAAR,KAEA,OAAIF,EAAI,GAAKjB,GAAK,KAETgC,EAAI,EAAGC,EAAK,GAAIoT,IAKlBrT,GAFYf,EAAI2M,EAAI5N,EAAImB,IAAMF,EAAIjB,GAEnBiC,GADP2L,EAAIzM,IAAMF,EAAIjB,GACKqV,IAe7B,SAASO,GAAT,EAAkEZ,EAAgBC,GAA6B,IAAjFrL,EAAgF,EAAhFA,MAAO8J,EAAyE,EAAzEA,MACtCmC,EAAW,GACf1gB,OAAOsL,QAAQmJ,GAAOtR,SAAQ,YAAe,IAAD,SAAZub,EAAY,KAAP3e,EAAO,KACtB,SAAhBA,EAAEsM,YAAsBqU,EAAS3gB,EAAEiN,KAAK,IAAM0R,MAIpD,SAASiC,EAAW5gB,GAClB,OAAQA,EAAEsM,WACR,IAAK,QACH,OAAOmS,GAAUze,EAAEmB,OACrB,IAAK,OACH,OAAOud,GAAMiC,EAAS3gB,EAAEiN,KAAK,KAC/B,IAAK,MACH,OAAOgR,GAAAA,WAAA,IAAQje,EAAEuM,SAAStB,IAAI2V,KAChC,IAAK,MACH,OAAOzC,GAAAA,WAAA,IAASne,EAAEuM,SAAStB,IAAI2V,KAEjC,IAAK,YACH,QAA+B5gB,EAAEuM,SAAjC,GAAO8T,EAAP,KAAeC,EAAf,KAAqBC,EAArB,KAAyBC,EAAzB,KACA,GAAyB,SAArBH,EAAO/T,WAA2C,UAAnBgU,EAAKhU,WAClB,UAAjBkU,EAAGlU,WAA0C,UAAjBiU,EAAGjU,UAAuB,CACzD,GAAIiU,EAAGpf,MAAQqf,EAAGrf,MAEhB,MADAyJ,QAAQsS,IAAIld,GACNmF,MAAM,kDAGd,IAAInD,EAAMqe,EAAOpT,KAAK,GACtB,GAAI6S,EAAM9d,IAAQse,EAAKnf,MAAO,OAAOsd,GAAU8B,EAAGpf,OAClD,GAAI4e,EAAM/d,GAAOse,EAAKnf,MAAO,OAAOsd,GAAU+B,EAAGrf,OAEjD,IACM0f,EAAO1C,GAAMM,IADJ8B,EAAGpf,MAAQqf,EAAGrf,QAAUmf,EAAKnf,MAAQ2e,EAAM9d,KACrB0c,GAAMiC,EAASN,EAAOpT,KAAK,MAChE,OAAiB,IAAbuT,EAAGrf,MAAoB0f,EACpB5C,GAAKQ,GAAU+B,EAAGrf,OAAQ0f,GAGnC,MADAjW,QAAQsS,IAAIld,GACNmF,MAAM,6DACd,IAAK,MAEH,OAAOyb,EADEV,GAAalgB,EAAoD8f,EAAOC,IAGnF,IAAK,MAAO,IAAK,MACf,QAAiB/f,EAAEuM,SAAnB,GAAKuU,EAAL,KAAUC,EAAV,KACA,GAAsB,UAAlBA,EAAIzU,UAAR,OACe,CAACyU,EAAKD,GAAlBA,EADH,KACQC,EADR,KAEA,GAAoB,QAAhB/gB,EAAEsM,UAAqB,OAAOsU,EAAWE,GAE7C,GAAsB,UAAlBC,EAAIzU,UAAuB,CAC7B,IAAM0U,EAASD,EAAI5f,MACnB,IAAyB0e,GAAOiB,EAAKhB,EAAOC,GAA5C,GAAOkB,EAAP,KAAeC,EAAf,KACA,GAAID,EAASD,EAAQ,OAAOJ,EAAWE,GACvC,GAAIE,EAASE,EAAQ,OAAOzC,GAAUuC,GAGtC,IAAMxD,GAAK0D,EAASF,IAAWE,EAASD,GAExC,OAAOhD,GAAKQ,GADFuC,EAASC,GACO9C,GAAMM,GAAUjB,GAAIoD,EAAWE,KAG3D,MADAlW,QAAQsS,IAAIld,GACNmF,MAAM,mDAEd,IAAK,WACH,QAAoBnF,EAAEuM,SAAtB,GAAO4U,EAAP,KAAWC,EAAX,KACA,GAAwB,UAApBA,EAAM9U,UAAuB,MAAMnH,MAAM,uDAE7C,QAAuB0a,GAAOsB,EAAIrB,EAAOC,GAAzC,GAAOsB,EAAP,KAAcC,EAAd,KACMvW,EAAIqW,EAAMjgB,MAGZ0I,EAAM+E,KAAK2S,MAAMF,EAAQtW,IAAMuW,EAAQvW,IAAMA,EAC7CyW,GAASzW,EAAIlB,IAAQkB,EAAIlB,GACzB4X,EAAQ1W,EAAIyW,EAIhB,OAAOvD,GAAKQ,GAHJ5U,EAAMA,EAAM2X,GAGMrD,GAAMM,GAAUgD,GAAQb,EAAWO,KAE/D,QAEE,MADAvW,QAAQsS,IAAIld,GACNmF,MAAM,oBAKlB,IAAMuc,EAAazhB,OAAOiL,YAAYjL,OAAOsL,QAAQmJ,GAAO/R,QAAO,oCAA8B,SAA9B,KAAgB2J,aAAsBrB,KAAI,+BAAc,CAAd,KAAoB2V,EAApB,WAGzGe,EAAKnD,EAAMxS,SAAQ,gBAAGuS,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAAsBL,GAAAA,WAAA,GAAMM,GAAUF,IAAhB,SAA2BC,EAAMvT,KAAI,SAAAI,GAAC,uBAAIqW,EAAWrW,UAAf,QAAqBqT,GAAMrT,YAI9GsW,GAHAA,EAAK/C,GAAc+C,IAGX1W,KAAI,YAAuB,IAApBsT,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAMpB,MAAO,CAAED,MAAAA,EAAOC,MALhBA,EAAQA,EAAMvT,KAAI,SAAAI,GAChB,IAAMuW,EAAKlN,EAAMrJ,GACjB,IAAKuW,GAAuB,SAAjBA,EAAGtV,UAAsB,MAAMnH,MAAM,wBAChD,OAAOyc,EAAG3U,KAAK,UAMnB,IAAM4U,EAAOF,EAAG1W,KAAI,YAAuB,IAApBsT,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC5B,GAAqB,IAAjBA,EAAM/e,OAAc,MAAO,CAAEqiB,EAAG,GAAIpJ,EAAG6F,EAAO/c,IAAK,GACvD,GAAqB,IAAjBgd,EAAM/e,OAAc,MAAO,CAAEqiB,EAAE,KAAItD,EAAM,GAAKD,GAAS7F,EAAG,EAAGlX,IAAK,GACtE,MAoBJ,SAAaugB,GACX,GAAsB,IAAlBA,EAAOtiB,OAAc,MAAO,CAAEqiB,EAAG,GAAIpJ,EAAG,EAAGlX,IAAK,GACpD,IAAMwgB,EAAOD,EAAOtiB,OAGdwiB,EAAaF,EAAO9W,KAAI,qBAAG8U,SAC3BmC,EAAYD,EAAWpX,QAAO,SAACkC,EAAMvB,GAAP,OAAauB,EAAOvB,IAAG,GAC3DuW,EAASA,EAAO9W,KAAI,kBAAuB,CAAE6U,MAAzB,EAAGA,MAAH,EAAUC,MAAqCA,MAAO,MAG1E,IAYIoC,EAZAC,EAAOvW,EAAAA,WAAA,IAAakW,EAAO9W,KAAI,kBAAsB,CAAtB,EAAG6U,MAAH,EAAUC,YAA6B/T,SAAQ,SAACqW,GACjF,IAAMtV,EAAOsV,EAAOxX,QAAO,SAACkC,EAAMvB,GAAP,OAAauB,EAAOvB,IAAG,GAClD,MAAO,CAAC,GAAD,SACD6W,EAAOpX,KAAI,SAAAO,GAAC,OAAKA,MADhB,CACoB,EAAG,GAAIuB,IAD3B,YAEDsV,GAFC,EAEQ,GAAI,EAAGtV,QASlBuV,EAAS,YAAOP,EAAO9W,KAAI,SAAAgF,GAAC,OAAI,MAAvB,CAA2B,EAAG,IAC7C,IAEEkS,EDzIG,SAAiBzJ,EAAa6J,GACnC,IAAIC,EAAOD,EAAG9iB,OAAS,EACnBgjB,EAAOF,EAAG,GAAG9iB,OAEbijB,EAAU9iB,MAAM4iB,GAAMxR,KAAK,GAAG/F,KAAI,SAAAgF,GAAC,OAAIrQ,MAAM6iB,GAAMzR,KAAK,MAC5DuR,EAAGnf,SAAQ,SAACuf,EAAIjjB,GAAL,OAAWijB,EAAGvf,SAAQ,SAACkc,EAAK9N,GAAN,OAAYkR,EAAQhjB,GAAG8R,GAAK8N,QAE7D5G,EAAEtV,SAAQ,SAACwf,EAAIpR,GAAL,OAAWkR,EAAQF,EAAO,GAAGhR,GAAKoR,KAK5C,IAFA,IAAIC,EAAsC,GAEnCH,EAAQpN,MAAK,SAACjK,EAAG3L,GAAJ,OAAUA,EAAI8iB,EAAO,GAAKnX,EAAEoX,EAAO,GAAK,MAAI,CAC9D,IAAMK,EAAKlD,GAAS8C,GACpBG,EAAQ/f,KAAKggB,GAEb1D,GAAasD,EAASI,GAGxB,KAAOJ,EAAQF,EAAO,GAAGlN,MAAK,SAACjK,EAAGmG,GAAJ,OAAUA,EAAIiR,EAAO,GAAKpX,EAAI,MAAI,CAC9D,IAAMyX,EAAKtD,GAASkD,GACpBG,EAAQ/f,KAAKggB,GAEb1D,GAAasD,EAASI,GAGxB,OAAOpK,EAAEzN,KAAI,SAACgF,EAAGvQ,GAAJ,OA7Df,SAAmBgjB,EAAqBG,EAAqCE,GAC3E,IAAIC,EAAO,EACXH,EAAQzf,SAAQ,YAAe,IAAZ1D,EAAW,EAAXA,EAAG8R,EAAQ,EAARA,EACP,IAATwR,GAAcxR,IAAMuR,GACtBA,EAAOrjB,EACPsjB,EAAO,GAES,IAATA,GAActjB,IAAMqjB,IAC3BA,EAAOvR,EACPwR,EAAO,MAIX,IAAMC,EAAOP,EAAQ,GAAGjjB,OACxB,OAAgB,IAATujB,EAAaN,EAAQK,GAAME,EAAO,GAAK,EA+CvBC,CAAUR,EAASG,EAASnjB,MC+G1CyjB,CAAQb,EAAWF,GAE5B,MAAOhhB,GAGL,MAFAwJ,QAAQsS,IAAI,kBAAmB6E,GAC/BnX,QAAQsS,IAAI,yCACN9b,EAER,MAAO,CACL0gB,EAAGK,EAAK9hB,MAAM,EAAG2hB,GAAM/W,KAAI,SAACmY,EAAI1jB,GAAL,OAAW0jB,EAAKlB,EAAYD,EAAWviB,MAClEgZ,GAAIwJ,EAAYC,EAAKH,GACrBxgB,IAAK0gB,EAAYC,EAAKH,EAAO,IAxDPqB,CAAI7E,EAAMvT,KAAI,SAAAF,GAAC,MAAK,CAAE+U,MAAOA,EAAM/U,GAAIgV,MAAOA,EAAMhV,QAAlE+W,EAAR,EAAQA,EAAGpJ,EAAX,EAAWA,EAAGlX,EAAd,EAAcA,IAKd,MAAO,CAAEsgB,EAJIA,EAAEjX,QAAO,SAACwT,EAAK+E,EAAI1jB,GAAO,IAAD,EAEpC,OADA2e,EAAIG,EAAM9e,IAAM0jB,EAAK7E,GAAL,UAAcF,EAAIG,EAAM9e,WAAxB,QAA+B,GACxC2e,IACN,IACe3F,EAAG6F,EAAQ7F,EAAGlX,IAAK+c,EAAQ/c,EAxGlC,MA2Gb,OAAOqgB,EAAKhX,QAAO,SAACyY,EAAKhJ,GAGvB,OAFAgJ,EAAI5K,GAAK4B,EAAE5B,EAAG4K,EAAI9hB,KAAO8Y,EAAE9Y,IAC3BvB,OAAOsL,QAAQ+O,EAAEwH,GAAG1e,SAAQ,2BAAE2H,EAAF,KAAKS,EAAL,YAAY8X,EAAIxB,EAAE/W,GAAKS,GAAC,UAAI8X,EAAIxB,EAAE/W,UAAV,QAAgB,MAC7DuY,IACN,CAAExB,EAAG,GAAIpJ,EAAG,EAAGlX,IAAK,IAgDlB,SAAS+hB,GAAUzY,EAAoBwY,GAG5C,OAFgBE,GAAgB,CAACF,GAAM,CAACxY,EAAEmL,OAAO,GAAKqN,EAAI5K,EAEzCzY,OAAOsL,QAAQT,EAAEtE,QAC/BqE,QAAO,SAAC4Y,EAAD,gBAAsBC,GAAtB,kBAAoCD,EAAYD,GAAgB,CAACF,GAAMI,EAASzY,KAAI,SAAAH,GAAC,OAAIA,EAAEtE,WAAS,KAAI,GAkB7G,SAASgd,GAAgBnE,EAAiB1Q,GAC/C,OAAO0Q,EAAEpU,KAAI,gBAAG6W,EAAH,EAAGA,EAAH,OAAWlT,KAAK/B,IAAL,MAAA+B,KAAI,EAAQD,EAAE1D,KAAI,SAAAwL,GAAG,OAAIxW,OAAOsL,QAAQuW,GAAGjX,QAAO,SAACC,EAAD,kBAAKC,EAAL,YAAgBD,EAAhB,MAAsB,UAAI2L,EAAI1L,UAAR,QAAc,KAAI,WC3O7G,SAAS4Y,GAAe7Y,GAC7B,IAAI8Y,EAAoB,GACpBC,EAAoB,GACpB7K,EAAO,IAAIxL,IAaf,OAZA1C,EAAE1H,SAAQ,SAAAiU,GACR,IAAK,IAAMyM,KAAWzM,EAAI7Q,OAAQ,CAAC,IAAD,IAChCod,EAASE,GAAWlV,KAAKjC,IAAI0K,EAAI7Q,OAAOsd,GAApB,UAA8BF,EAASE,UAAvC,QAAmDpX,KACvEmX,EAASC,GAAWlV,KAAK/B,IAAIwK,EAAI7Q,OAAOsd,GAApB,UAA8BD,EAASC,UAAvC,SAAoDpX,KAEtE2K,EAAI7I,MACNqV,EAASxM,EAAI7I,KAAO,EACpBoV,EAASvM,EAAI7I,KAAO,GAEtBwK,EAAKnL,IAAIwJ,EAAI7I,QAEG,IAAdwK,EAAK9C,MAAcpL,EAAE,GAAG0D,MAAKoV,EAAS9Y,EAAE,GAAG0D,KAAO,GAC/C,CAAEoV,SAAAA,EAAUC,SAAAA,GAiCd,SAASE,GAAiBziB,EAAyBwe,EAAgBC,GACxE,IAAMiE,EAAa/jB,OAAOuC,KAAKsd,GAAOnd,QAAO,SAAAmhB,GAAO,OAAIhE,EAAMgE,KAAa/D,EAAM+D,MACjF,OAAOxiB,EAAE2J,KAAI,YAAuB,IAApByJ,EAAmB,EAAnBA,MAAO8J,EAAY,EAAZA,MAEfyF,EAAehkB,OAAOsL,QAAQmJ,GAC9BwP,EAAenW,EAAYkW,EAAahZ,KAAI,8CAAgB,SAAAjL,GAAC,OAAIA,KAAG,SAAAA,GACxE,OAAQA,EAAEsM,WACR,IAAK,OACH,OAAI0X,EAAW7M,SAASnX,EAAEiN,KAAK,IAAYd,EAAS2T,EAAM9f,EAAEiN,KAAK,KAC1DjN,EACT,IAAK,YACH,QAAoCA,EAAEuM,SAAtC,GAAO8T,EAAP,KAAe8D,EAAf,KAA0B5D,EAA1B,KAA8BC,EAA9B,KACA,GAAyB,UAArBH,EAAO/T,WAAiD,UAAxB6X,EAAU7X,UAC5C,OAAO+T,EAAOlf,OAASgjB,EAAUhjB,MAAQof,EAAKC,EAChD,GAAyB,SAArBH,EAAO/T,WAAgD,UAAxB6X,EAAU7X,UAIxC,MAAMnH,MAAM,4CAHf,OAAI2a,EAAMO,EAAOpT,KAAK,KAAOkX,EAAUhjB,MAAcof,EACjDR,EAAMM,EAAOpT,KAAK,IAAMkX,EAAUhjB,MAAcqf,EAG/CxgB,EACT,IAAK,MACH,OA5FH,SAAiB0U,GACtB,GAAqB,IAAjBA,EAAMjV,OAAc,OAAOiV,EAAM,GAErC,IAAI0P,GADJ1P,EAAQA,EAAM1I,SAAQ,SAAAhM,GAAC,MAAoB,QAAhBA,EAAEsM,UAAsBtM,EAAEuM,SAAWvM,MAC3C6K,QAAO,SAACwZ,EAAIrkB,GAAL,MAA2B,UAAhBA,EAAEsM,UAAwB+X,EAAKrkB,EAAEmB,MAAQkjB,IAAI,GAGpF,OAAqB,KAFrB3P,EAAQA,EAAM/R,QAAO,SAAA3C,GAAC,MAAoB,UAAhBA,EAAEsM,cAElB7M,OAAqB0M,EAASiY,GACvB,IAAbA,EAAuBtX,EAAAA,WAAA,IAAO4H,IAC3B5H,EAAAA,WAAA,IAAO4H,GAAP,QAAcvI,EAASiY,MAoFfE,CAAQtkB,EAAEuM,UACnB,IAAK,MACH,OAnFH,SAAkBmI,GACvB,GAAqB,IAAjBA,EAAMjV,OAAc,OAAOiV,EAAM,GAErC,IAAI0P,GADJ1P,EAAQA,EAAM1I,SAAQ,SAAAhM,GAAC,MAAoB,QAAhBA,EAAEsM,UAAsBtM,EAAEuM,SAAWvM,MAC3C6K,QAAO,SAACwZ,EAAIrkB,GAAL,MAA2B,UAAhBA,EAAEsM,UAAwB+X,EAAKrkB,EAAEmB,MAAQkjB,IAAI,GAGpF,OAAqB,KAFrB3P,EAAQA,EAAM/R,QAAO,SAAA3C,GAAC,MAAoB,UAAhBA,EAAEsM,cAElB7M,OAAqB0M,EAASiY,GACvB,IAAbA,EAAuBrX,EAAAA,WAAA,IAAQ2H,IAC5B3H,EAAAA,WAAA,IAAQ2H,GAAR,QAAevI,EAASiY,MA2EhBG,CAASvkB,EAAEuM,UACpB,IAAK,MAAO,IAAK,WACf,OAAIvM,EAAEuM,SAASkC,OAAM,SAAA+V,GAAE,MAAqB,UAAjBA,EAAGlY,aAErBH,EADK2C,EAAc9O,EAAEsM,WAAWtM,EAAEuM,SAAStB,KAAI,SAAAuZ,GAAE,MAAqB,UAAjBA,EAAGlY,UAAwBkY,EAAGrjB,MAAQiL,SAG7FpM,EACT,IAAK,MAAO,IAAK,MAEf,OAAIA,EAAEuM,SAASkC,OAAM,SAAA+V,GAAE,MAAqB,UAAjBA,EAAGlY,aAErBH,EADK2C,EAAc9O,EAAEsM,WAAWtM,EAAEuM,SAAStB,KAAI,SAAAuZ,GAAE,MAAqB,UAAjBA,EAAGlY,UAAwBkY,EAAGrjB,MAAQiL,SAG7FpM,EACT,QACE,OAAOA,MAKTykB,EAAa,GACjBP,EAAa9gB,SAAQ,SAACpD,EAAGN,GACvB,GAAoB,UAAhBM,EAAEsM,UAAN,CACA,IAAOqS,EAAP,EAAcsF,EAAavkB,GAA3B,MACA+kB,EAAW9F,GAAO3e,EAAEmB,UAItB,IAAIujB,EAAWlG,EAAMvT,KAAI,SAAA6T,GACvB,IAAIpG,EAAIoG,EAAIP,MACNmG,EAAW5F,EAAIN,MAAM7b,QAAO,SAAA0I,GAChC,YAAsB9D,IAAlBkd,EAAWpZ,KACbqN,GAAK+L,EAAWpZ,IACT,MAIX,OAAU,IAANqN,EAAgB,CAAE6F,MAAO,EAAGC,MAAO,IAChC,CAAED,MAAO7F,EAAG8F,MAAOkG,MAIxBlP,EAAWvV,OAAOiL,YAAYgZ,EAAajZ,KAAI,SAACjL,EAAGN,GAAJ,MAAU,CAACukB,EAAavkB,GAAG,GAAIM,OAElF,OADAC,OAAOuC,KAAKiiB,GAAYrhB,SAAQ,SAAAiI,GAAC,cAAWmK,EAASnK,MAC9C,CAAEqJ,MAAOc,EAAUgJ,MAAOI,GAAc8F,OAa5C,SAASC,GAAT,GAAiE,IAAtCrjB,EAAqC,EAArCA,EAAGwJ,EAAkC,EAAlCA,EAAG8R,EAA+B,EAA/BA,cACtC,QAAUrV,IAANjG,EACF,OAAO,GAAEub,OAAQD,EAAc0G,IAAIrY,KAAI,SAAAqP,GAAC,OAAIiJ,GAAUzY,EAAGwP,OAAQsC,GAGnE,IAAQkD,EAAiBlD,EAAjBkD,MAAOC,EAAUnD,EAAVmD,MACT6E,EAAMtjB,EAAE2J,KAAI,SAAA4Z,GAChB,IAAMvB,EAAM5C,GAAmBmE,EAAI/E,EAAOC,GAC1C,MAAO,CAAElD,OAAQ0G,GAAUzY,EAAGwY,GAAMA,IAAAA,MAGtC,MAAO,CACLzG,OAAQ+H,EAAI3Z,KAAI,qBAAG4R,UACnByG,IAAKsB,EAAI3Z,KAAI,qBAAGqY,OAChBxD,MAAAA,EAAOC,MAAAA,GAIJ,SAASC,GAAW8E,EAAgB9U,EAA+BiB,GACxEhR,OAAOsL,QAAQuZ,GACZniB,QAAO,gBAAEoI,EAAF,sBAAwBxD,IAAfyI,EAAQjF,MACxB3H,SAAQ,yBAAE2H,EAAF,KAAKS,EAAL,YAAYyF,EAAOjB,EAAQjF,IAAOS,KC3KxC,ICAHmL,GAAYoO,GAA0BC,GDA7BC,GAAb,WAWE,aAA2E1J,GAA6C,IAA1G3G,EAAyG,EAAzGA,KAAM4G,EAAmG,EAAnGA,mBAAoB3C,EAA+E,EAA/EA,QAAS0D,EAAsE,EAAtEA,gBAAsE,gBAVvH5P,SAUuH,OARvHiI,UAQuH,OAPvHF,WAOuH,OANvHwQ,YAMuH,OAJvHC,YAAyE,GAI8C,KAFvH5J,cAEuH,EACrHnV,KAAKwO,KAAOA,EACZxO,KAAKuG,IAAMkM,EAAQ5N,KAAI,SAAA0D,GAAC,OAAIA,EAAEhC,OAC9BvG,KAAKsO,MAAQmE,EAAQ5N,KAAI,SAAA0D,GAAC,OAAIA,EAAExN,SAChCiF,KAAKmV,SAAWA,EAEhBnV,KAAKuG,IAAI7J,MAAM4J,KACftG,KAAKsO,MAAM5R,KAAK0Y,GAEhBpV,KAAK8e,OAAS/Z,EAAkBlL,OAAOsL,QAAQgR,IAAkB,YAAkB,IAAD,SAAfe,EAAe,KAAP9R,EAAO,KAChF,MAAe,YAAX8R,EAA6B,CAAC,YAAa9R,EAAEP,KAAI,SAAAO,GAAC,OAAIA,EAAI,MACvD,CAAC8R,EAAQ9R,EAAEQ,SAAQ,SAAAR,GAAC,OAAW,IAANA,EAAW,CAAC,EAAG,GAAK,CAAC,EAAG,UAtB9D,wCA0BE,SAAc6Q,GACZ,IAAMrK,EAAQiH,EAAYL,EAAWxS,KAAKwO,KAAMyH,EAAW1Z,SAC3D,GAAc,IAAVqP,EAAJ,CACA,IAAI6K,EAASR,EAAWM,MAAQN,EAAWO,cAAcC,OAAOR,EAAWO,cAAcC,OAAOpd,OAAS,GAAK,EAC9G2G,KAAK+e,YAAYriB,KAAK,CAAEkP,MAAAA,EAAOoT,KAAMvI,EAAQR,WAAAA,OA9BjD,mBAwCE,YAA0E,IAAD,OAAjEpN,EAAiE,EAAjEA,UAAWoW,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,QAASjJ,EAAmC,EAAnCA,WAChCpN,EAAY7I,KAAKuG,IAAIvG,KAAKuG,IAAIlN,OAAS,KAAI2G,KAAKuG,IAAIvG,KAAKuG,IAAIlN,OAAS,GAAKwP,GAC3EoN,GAAYjW,KAAKmf,cAAclJ,GAQnC,IAPA,IAAMmJ,EAAsBpf,KAAK+e,YAAYta,QAAO,SAACC,EAAD,UAAkBA,EAAlB,EAAMkH,QAAuB,GAM7EhS,EAAI,EACDA,EAAIslB,GAAWlf,KAAK+e,YAAY1lB,QAAQ,CAC7CO,GAAK,EACL,MAA8BoG,KAAK+e,YAAY/b,MAAvC4I,EAAR,EAAQA,MAAOqK,EAAf,EAAeA,WACf,GAAIrK,GAASqT,EAAU,CACrB,IAAMI,EAAkBrf,KAAK+e,YAAYta,QAAO,SAACC,EAAD,UAAkBA,EAAlB,EAAMkH,QAAuB,GAAKA,EAElF,OADA5L,KAAKmV,SAAS,CAAES,QAAS,UAAWC,OAAQ,EAAGC,OAAQ,EAAGC,QAASqJ,EAAsBC,EAAiB7J,iBAAarU,IAChH,CAAC8U,GAGVjW,KAAKsf,SAAStf,KAAKuG,IAAIvG,KAAKuG,IAAIlN,OAAS,GAAI4c,GAAYjZ,SAAQ,SAAAuiB,GAAI,OAAI,EAAKJ,cAAcI,MAE9F,IAAMF,EAAkBrf,KAAK+e,YAAYta,QAAO,SAACC,EAAD,UAAkBA,EAAlB,EAAMkH,QAAuB,GAE7E,OADA5L,KAAKmV,SAAS,CAAES,QAAS,UAAWC,OAAQ,EAAGC,OAAQ,EAAGC,QAASqJ,EAAsBC,EAAiB7J,iBAAarU,IAChH,KA/DX,oBAkEE,WAEE,GAAgC,IAA5BnB,KAAK+e,YAAY1lB,OAArB,CAEA,IADA,IAAI4e,EAAM,CAAE3e,GAAI,EAAG0lB,MAAO1Y,KACjBhN,EAAI,EAAGA,EAAI0G,KAAK+e,YAAY1lB,OAAQC,IAAK,CAChD,MAA6B0G,KAAK+e,YAAYzlB,GAAtC0lB,EAAR,EAAQA,KAAR,EAAc/I,WACV+I,EAAO/G,EAAI+G,OAAM/G,EAAM,CAAE3e,EAAAA,EAAG0lB,KAAAA,IAElC,KAAI/G,EAAI3e,EAAI,GACZ,OAAO0G,KAAK+e,YAAYjG,OAAOb,EAAI3e,EAAG,GAAG,GAAG2c,cA3EhD,uBAmFE,YAA4D,IAAD,OAA/CpN,EAA+C,EAA/CA,UAAW2W,EAAoC,EAApCA,UAAWvJ,EAAyB,EAAzBA,WAC5BpN,EAAY7I,KAAKuG,IAAIvG,KAAKuG,IAAIlN,OAAS,KAAI2G,KAAKuG,IAAIvG,KAAKuG,IAAIlN,OAAS,GAAKwP,GAC3EoN,GAAYjW,KAAKmf,cAAclJ,GACnC,IAAMmJ,EAAsBpf,KAAK+e,YAAYta,QAAO,SAACC,EAAD,UAAkBA,EAAlB,EAAMkH,QAAuB,GAMjF,IAJApH,QAAQsS,IAAI,YAAa9W,KAAKuG,IAAIvG,KAAKuG,IAAIlN,OAAS,GAAI,CACtDomB,KAAMzf,KAAK+e,YAAY1lB,OAAQqmB,WAAY1f,KAAK+e,YAAYta,QAAO,SAACC,EAAD,UAAkBA,EAAlB,EAAMkH,QAAuB,KAG3F5L,KAAK+e,YAAY1lB,OAAS,GAAK2G,KAAK+e,YAAY1lB,QAAUmmB,GAAW,CAC1E,IAAQvJ,EAAejW,KAAK+e,YAAYY,QAAhC1J,WACRjW,KAAKsf,SAAStf,KAAKuG,IAAIvG,KAAKuG,IAAIlN,OAAS,GAAI4c,GAAYjZ,SAAQ,SAAAuiB,GAAI,OAAI,EAAKJ,cAAcI,MAE9F,IAAMF,EAAkBrf,KAAK+e,YAAYta,QAAO,SAACC,EAAD,UAAkBA,EAAlB,EAAMkH,QAAuB,GAG7E,OAFA5L,KAAKmV,SAAS,CAAES,QAAS,UAAWC,OAAQ,EAAGC,OAAQ,EAAGC,QAASqJ,EAAsBC,EAAiB7J,iBAAarU,IACvHqD,QAAQsS,IAAI,mCAAoC9W,KAAK+e,aAC9C/e,KAAK+e,YAAYjG,OAAO,EAAG0G,GAAW3a,KAAI,qBAAGoR,gBAnGxD,sBA+GE,SAASpN,EAAmBoN,GAC1B,IAAMvR,EAAI8N,EAAWxS,KAAKwO,KAAMyH,EAAW1Z,QAG3C,IAAyB,IAArB0Z,EAAWM,MAAiB,CAC9B,MD5EC,SAAyB7R,GAC9B,IAAI8Y,EAAiB,KAAQ9Y,EAAEmL,MAC3B4N,EAAiB,KAAQ/Y,EAAEmL,MAQ/B,OAPAhW,OAAOsL,QAAQT,EAAEtE,QAAQpD,SAAQ,YAA0B,IAAD,SACxD,GADwD,KACbugB,GADa,OACtCqC,EAAlB,EAAQpC,SAA0BqC,EAAlC,EAAwBpC,SACxB5jB,OAAOuC,KAAKwjB,GAAM5iB,SAAQ,SAAA8iB,GAAO,IAAD,IAC9BtC,EAASsC,GAAMF,EAAKE,IAAL,UAAYtC,EAASsC,UAArB,QAA4B,GAC3CrC,EAASqC,GAAMD,EAAKC,IAAL,UAAYrC,EAASqC,UAArB,QAA4B,SAGxC,CAAEtC,SAAAA,EAAUC,SAAAA,GCkEgBsC,CAAgBrb,GAAvC8Y,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAGduC,EAAOC,GAAiBhK,EAAYuH,EAAUC,GAClD,QAAatc,IAAT6e,EAAoB,MAAO,GAG/B,IACMxJ,EAAgB+H,GAAgB,CAAErjB,EADnC,YAAO8kB,EAAK9J,YAAYrR,KAAI,qBAAG9J,UAA/B,CAAmDilB,EAAK5K,qBAClB1Q,EAAAA,EAAG8R,cAAe,CAAEkD,MAAO8D,EAAU7D,MAAO8D,KACvF,GAAIuC,EAAK9J,YAAYhH,MAAK,WAAU5V,GAAV,IAAGiN,EAAH,EAAGA,IAAH,OAAgBiQ,EAAcC,OAAOnd,GAAKiN,KAAM,MAAO,GACjF,GAAIiQ,EAAcC,OAAOD,EAAcC,OAAOpd,OAAS,GAAKwP,EAAW,MAAO,GAE9EoN,EAAU,OAAQ+J,GAAR,IAAczJ,OAAO,EAAMC,cAAAA,IAIvC,MAA2CP,EAAnCO,cAAiBC,EAAzB,EAAyBA,OAAQyG,EAAjC,EAAiCA,IACjC,GAAIzG,EAAOA,EAAOpd,OAAS,GAAKwP,EAAW,MAAO,GAKlChP,OAAOuG,OAAOsE,EAAEtE,QAAQqE,QAAO,SAACyb,EAAK1R,GAAN,OAAe0R,EAAM1R,EAAKnV,SAAQ,GAAjF,IACA,EAmIJ,SAAoBqL,EAAoBmE,EAAmBoN,GACzD,IAAQC,EAAyDD,EAAzDC,YAA8BgH,EAA2BjH,EAA5CO,cAAiB0G,IAClCiD,GAD6DlK,EAApBE,gBACjCiH,GAAgBF,EAAK,CAACxY,EAAEmL,QAChCuQ,EAAQhD,GAAgBF,EAAK,CAACxY,EAAEmL,OACpChW,OAAOsL,QAAQT,EAAEtE,QAAQpD,SAAQ,YAAsB,IF1B5Bic,EE0B2B,SAAVzK,GAAU,WAC9C6R,GF3BmBpH,EE2BGiE,EAAK1O,EAAK3J,KAAI,qBAAGzE,UF1BtCyE,KAAI,SAAAwL,GAAG,OAAI4I,EAAEpU,KAAI,gBAAG6W,EAAH,EAAGA,EAAH,OAAW7hB,OAAOsL,QAAQuW,GAAGjX,QAAO,SAACC,EAAD,kBAAKC,EAAL,YAAgBD,EAAhB,MAAsB,UAAI2L,EAAI1L,UAAR,QAAc,KAAI,UE2BpGwb,EAAMnjB,SAAQ,SAAC6M,EAAGvQ,GAChB8mB,EAAM9mB,IAAMkP,KAAK/B,IAAL,MAAA+B,KAAI,EAAQ6X,EAAOxb,KAAI,SAAAyb,GAAG,OAAIA,EAAIhnB,QAC9C6mB,EAAM7mB,IAAMkP,KAAKjC,IAAL,MAAAiC,KAAI,EAAQ6X,EAAOxb,KAAI,SAAAyb,GAAG,OAAIA,EAAIhnB,cAIlD,IAAMinB,EAAG,YAAOrK,EAAYrR,KAAI,qBAAG0B,QAA1B,CAA0CsC,IAM7C2X,EAAeD,EAAI1b,KAAI,SAAC4b,EAAInnB,GAAL,OAAYmnB,EAAKN,EAAM7mB,KAAO8mB,EAAM9mB,GAAK6mB,EAAM7mB,OAAKuL,KAAI,SAAAO,GAAC,OAAIA,EAAI,IAAM,EAAIA,KACxGob,EAAaA,EAAannB,OAAS,GAAKmP,KAAK/B,IAAI+Z,EAAaA,EAAannB,OAAS,GAAI,GACxF,IAAMqnB,EAASF,EAAa/b,QAAO,SAAC2S,EAAG9E,EAAGhZ,GAAP,OAAagZ,EAAIkO,EAAapJ,GAAK9d,EAAI8d,IAAG,GAIzEuJ,EAAgBzD,EAAIwD,GAEpBE,EAAiB/mB,OAAOuC,KAAKukB,EAAcjF,GAG3CmF,EAAY,CAAElc,EAAG,GAAIqa,MAAO,GAkBhC,GAjBA4B,EAAe5jB,SAAQ,SAAA2H,GACrB,IAAMmc,EAA4BjnB,OAAOsL,QAAQT,EAAEtE,QAAQqE,QAAO,SAACsc,EAAD,GAA+B,IAAD,SACxFC,GADwF,UAC5Enc,KAAI,SAAAH,GAAC,OAAIA,EAAEtE,OAAOuE,OAC9Bsc,EAAOzY,KAAKjC,IAAL,MAAAiC,KAAI,EAAQwY,IACnBE,EAAO1Y,KAAK/B,IAAL,MAAA+B,KAAI,EAAQwY,IACzB,GAAIC,IAASC,EAAM,OAAOH,EAE1B,IAAMhD,GAAakD,EAAOC,GAAQ,EAC5BC,EAAM3Y,KAAK/B,IAAL,MAAA+B,KAAI,EAAQwY,EAAKzkB,QAAO,SAAA6I,GAAC,OAAIA,GAAK2Y,OACxCd,EAAMzU,KAAKjC,IAAL,MAAAiC,KAAI,EAAQwY,EAAKzkB,QAAO,SAAA6I,GAAC,OAAIA,EAAI2Y,OAC7C,OAAOgD,EAAavY,KAAKjC,IAAI2a,EAAOC,EAAKlE,EAAMgE,KAC9C,GACGjC,EAAO2B,EAAcjF,EAAE/W,GAAKmc,EAE9B9B,EAAO6B,EAAU7B,OAAM6B,EAAY,CAAElc,EAAAA,EAAGqa,KAAAA,OAG1B,KAAhB6B,EAAUlc,EAGZ,MAFAH,QAAQsS,IAAIb,EAAYgK,GAAiBhK,EAAYA,EAAWO,cAAckD,MAAOzD,EAAWO,cAAcmD,OAAO,IACrHnV,QAAQsS,IAAI,2DAA4DoG,EAAKxY,GACvE3F,MAAM,oBAEd,OAAO8hB,EAvLSO,CAAW1c,EAAGmE,EAAWoN,GAA/BtR,EAAR,EAAQA,EACF0c,EAAaxnB,OAAOiL,YAAYjL,OAAOsL,QAAQT,EAAEtE,QAAQyE,KAAI,YAAsB,IAAD,SAAnByc,EAAmB,KAChFN,EADgF,KACpEnc,KAAI,SAAAH,GAAC,OAAIA,EAAEtE,OAAOuE,MACpC,MAAO,CAAC2c,GAAU9Y,KAAKjC,IAAL,MAAAiC,KAAI,EAAQwY,IAAQxY,KAAK/B,IAAL,MAAA+B,KAAI,EAAQwY,KAAS,OAEvDO,EAAa1nB,OAAOiL,YAAYjL,OAAOsL,QAAQT,EAAEtE,QAAQyE,KAAI,YAAsB,IAAD,SAAnByc,EAAmB,KAAV9S,EAAU,KAChFgT,EAAQhT,EAAKjS,QAAO,SAAA0U,GAAG,OAAIA,EAAI7Q,OAAOuE,GAAK0c,EAAWC,MACtDlG,EAAQ5M,EAAKjS,QAAO,SAAA0U,GAAG,QAAIA,EAAI7Q,OAAOuE,GAAK0c,EAAWC,OAEtDG,EAASrE,GAAgBF,EAAKsE,EAAM3c,KAAI,qBAAGzE,WAC3CshB,EAAStE,GAAgBF,EAAK9B,EAAMvW,KAAI,qBAAGzE,WACjD,MAAO,CAACkhB,EAAS,CAAC,KAAE9S,KAAM4M,GAAUmC,GAAenC,IAAlC,IAA0CuG,GAAID,IAA9C,KAA0DlT,KAAMgT,GAAUjE,GAAeiE,IAAzF,IAAiGG,GAAIF,UAElHG,EAAKxE,GAAgBF,EAAK,CAACxY,EAAEmL,OAAOhL,KAAI,SAACmY,EAAI1jB,GAAL,OAAW0jB,EAAKE,EAAI5jB,GAAGgZ,KAGjEuP,EAAW,GAuDf,OAtDApc,EAAU,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAAIzI,SAAQ,YAA2B,IAAD,SAAxB8kB,EAAwB,KAApBC,EAAoB,KAAhBC,EAAgB,KAAZC,EAAY,KAARC,EAAQ,KAC9E3U,EAAW,CACb4U,OAAQZ,EAAWY,OAAOL,GAC1BM,MAAOb,EAAWa,MAAML,GACxBM,MAAOd,EAAWc,MAAML,GACxBM,OAAQf,EAAWe,OAAOL,GAC1BM,QAAShB,EAAWgB,QAAQL,IAG1BM,EAAqB,CACvB3S,KAAK,KAAMnL,EAAEmL,MACbzP,OAAQ2E,EAAkBlL,OAAOsL,QAAQoI,IAAW,+BAAmB,CAAnB,UAAOiB,UAGzDiU,EAAY5oB,OAAOuG,OAAOoiB,EAAEpiB,QAAQqE,QAAO,SAACyb,EAAK1R,GAAN,OAAe0R,EAAM1R,EAAKnV,SAAQ,GACjF,GAAkB,IAAdopB,EAAJ,CAGA,IAAMC,EAAO,EAAOd,GAEpB,GADA/nB,OAAOuG,OAAOmN,GAAUvQ,SAAQ,qBAAG2kB,GAAY3kB,SAAQ,SAAC0e,EAAGpiB,GAAJ,OAAUopB,EAAQppB,IAAMoiB,SAC3EzF,EAAWC,YAAYhH,MAAK,WAAU5V,GAAV,IAAGiN,EAAH,EAAGA,IAAH,OAAgBmc,EAAQppB,GAAKiN,QACzDmc,EAAQA,EAAQrpB,OAAS,GAAKwP,GAAlC,CAEA,IAAI2U,EAAQ,KAAQ9Y,EAAEmL,MAClB4N,EAAQ,KAAQ/Y,EAAEmL,MACtBhW,OAAOuG,OAAOmN,GAAUvQ,SAAQ,YAAyC,IAA5B4iB,EAA2B,EAArCpC,SAA0BqC,EAAW,EAArBpC,SACjD5jB,OAAOsL,QAAQya,GAAM5iB,SAAQ,2BAAE2H,EAAF,KAAKS,EAAL,YAAYoY,EAAS7Y,GAAKS,GAAC,UAAIoY,EAAS7Y,UAAb,QAAmB,MAC3E9K,OAAOsL,QAAQ0a,GAAM7iB,SAAQ,2BAAE2H,EAAF,KAAKS,EAAL,YAAYqY,EAAS9Y,GAAKS,GAAC,UAAIqY,EAAS9Y,UAAb,QAAmB,SAI7E,IAAIqb,EAAOC,GAAiBhK,EAAYuH,EAAUC,GAClD,QAAatc,IAAT6e,EAAJ,CAGA,IAAI9kB,EAAC,YAAO8kB,EAAK9J,YAAYrR,KAAI,qBAAG9J,UAA/B,CAAmDilB,EAAK5K,qBACzDuN,EAAMpE,GAAgB,CAAE7Z,EAAG8d,EAAGtnB,EAAAA,EAAGsb,cAAe,CAAEkD,MAAO8D,EAAU7D,MAAO8D,KAC9E,IAAIuC,EAAK9J,YAAYhH,MAAK,WAAU5V,GAAV,IAAGiN,EAAH,EAAGA,IAAH,OAAgBoc,EAAIlM,OAAOnd,GAAKiN,QACtDoc,EAAIlM,OAAOkM,EAAIlM,OAAOpd,OAAS,GAAKwP,GAAxC,CAEA,IAAI+Z,EAA2Bhe,EAAasJ,GAAa,SAAAoC,GAAI,MAAK,CAAEoC,KAAM,KAAcC,IAAK,IAAIvL,IAAIob,EAAEpiB,OAAOkQ,GAAMzL,KAAI,SAAAoM,GAAG,OAAIA,EAAIV,WACnIsR,EAASnlB,KAAK,CACZ+lB,UAAAA,EACAzD,KAAM2D,EAAIlM,OAAOkM,EAAIlM,OAAOpd,OAAS,GACrC4c,WAAW,OACN+J,GADK,IAERzjB,OAAQqmB,EACRrM,OAAO,EACPC,cAAemM,EACfvM,MAAO4J,EAAK5J,MAAQ,aAI1ByL,EAASzN,MAAK,SAAC1P,EAAGiB,GAAJ,OAAUA,EAAE8c,UAAY/d,EAAE+d,aACjCZ,EAAShd,KAAI,qBAAGoR,kBAlN3B,KA+NA,SAASgK,GAAT,EAA2GzC,EAAmBC,GAA6D,IAA/JrI,EAA8J,EAA9JA,mBAAoBc,EAA0I,EAA1IA,YAAaC,EAA6H,EAA7HA,gBAAiB5Z,EAA4G,EAA5GA,OAAQ6Z,EAAoG,EAApGA,MAA2DyM,EAAyC,wDAEpLC,EAAQ,YAAO5M,EAAYrR,KAAI,qBAAG9J,UAA1B,CAA8Cqa,IACpD2N,EAAS7M,EAAYrR,KAAI,qBAAG0B,OAElCuc,EAAWnF,GAAiBmF,EAAUtF,EAAUC,GAGhD,MAAmCjU,EAAW0M,EAAYrR,KAAI,mBAAekU,GAAf,EAAGhe,WAA+B,SAAAnB,GAAC,OAAIA,EAAEiN,KAAK,MAA5G,SAAO6P,EAAP,KAAgB9M,EAAhB,KAAyBiB,EAAzB,KACA+O,GAAW4D,EAAU5T,EAASiB,GAC9B,IAAMjK,EAAS8V,IACTsM,EAASD,EAAOle,KAAI,SAACuS,EAAG9d,GAAJ,OAAU8d,EAAIxW,EAAOtH,MAEzC2pB,EAAeH,EAAS9f,MACxBkgB,EAAiBJ,EAASje,KAAI,SAAC9J,EAAOzB,GAAR,MAAe,CAAEyB,MAAAA,EAAOwL,IAAKwc,EAAOzpB,OAAOiD,QAAO,SAACsN,EAAGvQ,GAAJ,OAAU0pB,EAAO1pB,MACnGupB,GAAOre,QAAQsS,IAAI,aAAc,CAAE0G,SAAAA,EAAUsF,SAAAA,EAAUC,OAAAA,EAAQniB,OAAAA,EAAQoiB,OAAAA,IAI3E,IADA,IAAIG,EAAa,GAlBuK,aAmBnL,gBAAOjM,EAAP,KAAekM,EAAf,KACH,GAAe,cAAXlM,EAGF,OADAiM,EAAWjM,GAAUkM,EACrB,WAEF,IAAMC,EAAcD,EAAQ7mB,QAAO,SAAA3C,GAAC,OAAI4jB,EAAStG,IAAWtd,GAAKA,GAAK6jB,EAASvG,MAC/E,GAAImM,EAAYtS,SAASyM,EAAStG,KAAYmM,EAAYtS,SAAS0M,EAASvG,IAAU,MAAM,CAAN,UAClFmM,EAAYhqB,OAAS,IAAG8pB,EAAWjM,GAAUmM,IARnD,MAAgCxpB,OAAOsL,QAAQgR,GAA/C,eAAiE,CAAC,IAAD,wDAWjE,MAAO,CACLI,OAAO,EACPnB,mBAAoB6N,EACpB/M,YAAagN,EACb/M,gBAAiBgN,EAEjB5mB,OAAAA,EAAQ6Z,MAAAA,GCjQZkN,UAAY,YAAwC,IAE9C1iB,EAFSgM,EAAoC,EAApCA,KACPgJ,EAAUhJ,EAAKgJ,QAErB,OAAQA,GACN,IAAK,QACHrF,GAAK3D,EAAK2D,GACV,IAAM4E,EAAW,SAACoO,GAAD,OAA4BC,YAAY,GAAEjT,GAAAA,IAAOgT,KAClE5E,GAAc,IAAIE,GAAYjS,EAAMuI,GACpCyJ,GAAgB,IAAI1J,GAActI,EAAMuI,GACxCvU,EAAS,CAAEgV,QAAS,WACpB,MACF,IAAK,QACHhV,EAAS,CAAEgV,QAAS,QAASmJ,YAAaJ,GAAY8E,MAAM7W,GAAO8W,MAA0C,IAAnC/E,GAAYI,YAAY1lB,QAClG,MACF,IAAK,YACHuH,EAAS,CAAEgV,QAAS,QAASmJ,YAAaJ,GAAYgF,UAAU/W,GAAO8W,MAA0C,IAAnC/E,GAAYI,YAAY1lB,QACtG,MACF,IAAK,UACH,IAAQwP,EAA0B+D,EAA1B/D,UAAWoN,EAAerJ,EAAfqJ,WACnB2I,GAAclI,QAAQ7N,EAAWoN,GACjCrV,EAAS,CAAEgV,QAAS,WACpB,MACF,IAAK,WACHgJ,GAAcjJ,SAAQ,GACtB,MAA6BiJ,GAArBrJ,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,SAChB7U,EAAS,CAAEgV,QAAS,WAAYL,OAAAA,EAAQE,SAAAA,GACxC,MACF,IAAK,QACH,wBACQ,IADR,EACU/G,EAAc9B,EAAd8B,UAAoBF,EAAOoQ,GAAcpQ,KAC3CoV,EAAUzV,EAAmBC,GAAWM,EAAD,EAAgB,IAAItH,IAAIvN,OAAOuG,OAAOoO,EAAKpO,QAAQwF,SAAQ,SAAA2C,GAAC,OAAIA,EAAE1D,KAAI,SAAA0D,GAAC,OAAIA,EAAEH,aAAWoG,GACjI9C,EAASkB,EAAK4B,KAAK3J,KAAI,SAAAgF,GAAC,OAAI,KAHlC,IAIqB+Z,GAJrB,yBAIaC,EAJb,QAKIjX,EAAK4B,KAAKxR,SAAQ,SAACwR,EAAMlV,GAAP,OAAaoS,EAAOpS,IAAMuZ,EAAYL,EAAWhE,EAAMqV,QAD3E,2BACE,IALJ,8BAOE,OADAjjB,EAAS,CAAEgV,QAAS,QAASlK,OAAAA,GAC7B,QAPF,GAOE,MAEJ,IAAK,QACH,IAAMoY,EAAKnF,GAAYoF,SACvBnjB,EAAS,CAAEgV,QAAS,QAASK,WAAY6N,EAAIE,OAAQpX,EAAKoX,QAC1D,MACF,QAASxe,EAAkBoQ,GAE7B4N,YAAY,GAAEjT,GAAAA,IAAO3P","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Util/Util.ts","Formula/utils.ts","Formula/internal.ts","Formula/optimization.ts","Types/consts.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","PageCharacter/CharacterDisplay/Tabs/TabOptimize/ComputeWorker.ts","Formula/expandPoly.ts","Formula/solveLP_simplex.ts","Formula/linearUpperBound.ts","Formula/addedUtils.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/SplitWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BackgroundWorker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\";\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) {\n            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n          }\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\nexport function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\nexport function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Assumes that the object entries are all primitives + objects\n * shallow copy the object,\n * deep copy the\n * @param obj\n * @returns\n */\nexport function deepClone<T>(obj: T): T {\n  if (!obj) return obj\n  if (!Object.keys(obj).length) return {} as T\n  const ret = { ...obj }\n  Object.entries(obj).forEach(([k, v]: any) => {\n    if (typeof v !== \"object\") return\n    ret[k] = JSON.parse(JSON.stringify(v))\n  })\n  return ret\n}\n\nexport const clamp = (val, low, high) => {\n  if (val < low) return low;\n  if (val > high) return high;\n  return val\n}\nexport const getArrLastElement = (arr) =>\n  arr.length ? arr[arr.length - 1] : null\n\nexport const clamp01 = (val) => clamp(val, 0, 1)\nexport const clampPercent = (val) => clamp(val, 0, 100)\n\n//use to pretty print timestamps, or anything really.\nexport function strPadLeft(string, pad, length) {\n  return (new Array(length + 1).join(pad) + string).slice(-length);\n}\n\n//fuzzy compare strings. longer the distance, the higher the mismatch.\nexport function hammingDistance(str1, str2) {\n  var dist = 0;\n  str1 = str1.toLowerCase();\n  str2 = str2.toLowerCase();\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\n    let match = true\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\n      match = false\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\n      match = true\n    if (!match) dist++\n  }\n  return dist;\n}\n\n//multiplies every numerical value in the obj by a multiplier.\nexport function objMultiplication(obj, multi) {\n  if (multi === 1) return obj\n  Object.keys(obj).forEach((prop: any) => {\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\n  })\n  return obj\n}\n\n//assign obj.[keys...] = value\nexport function layeredAssignment(obj, keys: readonly string[], value) {\n  keys.reduce((accu, key, i, arr) => {\n    if (i === arr.length - 1) return (accu[key] = value)\n    if (!accu[key]) accu[key] = {}\n    return accu[key]\n  }, obj)\n  return obj\n}\n//get the value in a nested object, giving array of path\nexport function objPathValue(obj: object | undefined, keys: readonly string[]): any {\n  if (!obj || !keys) return undefined;\n  !Array.isArray(keys) && console.error(keys)\n  return keys.reduce((a, k) => a?.[k], obj)\n}\n//delete the value denoted by the path. Will also delete empty objects as well.\nexport function deletePropPath(obj, path) {\n  const tempPath = [...path]\n  const lastKey = tempPath.pop()\n  const objPathed = objPathValue(obj, tempPath)\n  delete objPathed?.[lastKey];\n}\n\nexport function objClearEmpties(o) {\n  for (const k in o) {\n    if (typeof o[k] !== \"object\") continue\n    objClearEmpties(o[k])\n    if (!Object.keys(o[k]).length) delete o[k];\n  }\n}\nexport function crawlObject(obj, keys, validate, cb) {\n  if (validate(obj)) cb(obj, keys)\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\n}\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\n\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\n  return typeof value === \"function\" ? (value as any)(arg) : value\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyMap<K extends string | number, V>(keys: readonly K[], map: (key: K, i: number) => V): StrictDict<`${K}`, V> {\n  return Object.fromEntries(keys.map((k, i) => [k, map(k, i)])) as any\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyValueMap<T, K extends string | number, V>(items: readonly T[], map: (item: T) => [K, V]): StrictDict<`${K}`, V> {\n  return Object.fromEntries(items.map(t => map(t))) as any\n}\n\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>>\nexport function objectMap<K extends string, V, T>(obj: Record<K, V>, fn: (value: V, key: `${K}`, index: number) => T): Record<K, T>\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>> {\n  return Object.fromEntries(Object.entries(obj).map(\n    ([k, v], i) => [k, fn(v, k, i)]\n  )) as any\n}\n\nconst rangeGen = function* (from: number, to: number): Iterable<number> {\n  for (let i = from; i <= to; i++) yield i;\n};\n\n/** range of [from, to], inclusive */\nexport function range(from: number, to: number): number[] {\n  return [...rangeGen(from, to)]\n}\n\nexport function assertUnreachable(value: never): never {\n  throw new Error(`Should not reach this with value ${value}`)\n}\n\n// cartesian product of list of arrays\nexport function cartesian<T>(...q: T[][]): T[][] {\n  return q.reduce((a, b) => a.flatMap(d => b.map(e => [d, [e]].flat())), [[]] as T[][])\n}\n\n/** Will change `arr` in-place */\nexport function toggleInArr<T>(arr: T[], value: T) {\n  const ind = arr.indexOf(value)\n  if (ind < 0) arr.push(value)\n  else arr.splice(ind, 1)\n}\n\nexport function toggleArr<T>(arr: T[], value: T) {\n  return arr.includes(value) ? arr.filter(a => a !== value) : [...arr, value]\n}\n","\nimport { objectKeyMap } from \"../Util/Util\"\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\n\ntype Num = number | NumNode\ntype Str = string | undefined | StrNode\ntype Any = Num | Str\n\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\nexport const one = percent(1), naught = percent(0)\n\nexport function constant(value: number, info?: Info): NumNode\nexport function constant(value: string | undefined, info?: Info): StrNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\n  return { operation: \"const\", operands: [], value, info }\n}\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\nexport function percent(value: number, info?: Info): NumNode {\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\n  return constant(value, { key: \"_\", ...info })\n}\n/** Inject `info` to the node in-place */\nexport function infoMut(node: NumNode, info: Info): NumNode\nexport function infoMut(node: StrNode, info: Info): StrNode\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\n  if (info) node.info = { ...node.info, ...info }\n  return node\n}\n\n/** `table[string] ?? defaultNode` */\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\n  return { operation: \"lookup\", operands, table, info }\n}\n\n/** min( x1, x2, ... ) */\nexport function min(...values: Num[]): NumNode {\n  return { operation: \"min\", operands: intoOps(values) }\n}\n/** max( x1, x2, ... ) */\nexport function max(...values: Num[]): NumNode {\n  return { operation: \"max\", operands: intoOps(values) }\n}\n/** x1 + x2 + ... */\nexport function sum(...values: Num[]): NumNode {\n  return { operation: \"add\", operands: intoOps(values) }\n}\n/** x1 * x2 * ... */\nexport function prod(...values: Num[]): NumNode {\n  return { operation: \"mul\", operands: intoOps(values) }\n}\n/** x / (x + c) */\nexport function frac(x: Num, c: Num): NumNode {\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\n}\nexport function res(base: Num): NumNode {\n  return { operation: \"res\", operands: intoOps([base]) }\n}\n\n/** v1 == v2 ? pass : 0 */\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\n}\n/** v1 == v2 ? pass : `undefined` */\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\n}\n/** v1 != v2 ? pass : 0 */\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\n}\n/** v1 >= v2 ? pass : 0 */\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 >= v2 ? pass : `undefined` */\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 < v2 ? pass : 0 */\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\n}\n\n/** v1 >= v2 ? pass : fail */\nexport function cmp(v1: Num, v2: Num, pass: Num, fail: Num, info?: Info): NumNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(fail)] as any\n  return { operation: \"threshold\", operands, info }\n}\n\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\n  if (nodeList.operation) {\n    if (nodeList.operation !== \"read\")\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\n    return { ...nodeList, path: prefix }\n  } else {\n    return objectKeyMap(Object.keys(nodeList), key =>\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\n  }\n}\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\n  return { operation: \"data\", operands: [base], data }\n}\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\n  return { operation: \"data\", operands: [base], data, reset: true, info }\n}\n\n\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\n}\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\n  return { operation: \"read\", operands: [], path, type: \"string\" }\n}\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\n}\n/**\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\n */\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\n}\nexport function stringPrio(...operands: Str[]): StrNode {\n  return { operation: \"prio\", operands: intoOps(operands) }\n}\n/** list[index] */\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\n  return { operation: \"subscript\", operands: [index], list, info }\n}\n\nfunction intoOps(values: Num[]): NumNode[]\nfunction intoOps(values: Str[]): StrNode[]\nfunction intoOps(values: Any[]): AnyNode[]\nfunction intoOps(values: Any[]): AnyNode[] {\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\n}\nfunction intoV(value: Num): NumNode\nfunction intoV(value: Str): StrNode\nfunction intoV(value: Num | Str): NumNode | StrNode\nfunction intoV(value: Any): AnyNode {\n  return (typeof value !== \"object\") ? constant(value) : value\n}\n\ntype _NodeList = {\n  [key: string]: NodeList\n} & {\n  operation?: never\n}\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\n\n/**\n * `v1` === `v2` ? `match` : `unmatch`\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\n */\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, StrNode>\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\n}\n\nexport function cmpNode(a: NumNode, b: NumNode): boolean {\n  if (a.operation !== b.operation) return false;\n  if (a.operands.length !== b.operands.length) return false;\n\n  switch (a.operation) {\n    case 'read':\n      if (b.operation !== a.operation) return false; // just doing this so typescript stops yelling at me\n      return a.path.every((ai, i) => ai === b.path[i])\n    case 'const':\n      if (b.operation !== a.operation) return false; // just doing this so typescript stops yelling at me\n      return a.value === b.value\n    case 'mul': case 'add': case 'min': case 'max':  // commutative ops.\n      if (b.operation !== a.operation) return false; // just doing this so typescript stops yelling at me\n      let used = [] as number[]\n      return a.operands.every((ai, i) => b.operands.some((bj, j) => {\n        if (used.includes(j)) return false\n        if (cmpNode(ai, bj)) {\n          used.push(j)\n          return true\n        }\n        return false\n      }))\n    default:\n      return a.operands.every((ai, i) => cmpNode(ai as NumNode, b.operands[i] as NumNode))\n  }\n}\n\n// Hash function pulled from StackOverflow\n//   https://stackoverflow.com/a/52171480\nconst cyrb53 = function (str: string, seed = 0) {\n  let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n\n// I made these numbers up; we might get better performance with different choice.\nexport function hashNode(n: NumNode): number {\n  let hsh = Math.imul(cyrb53(n.operation), 5234543537);\n  switch (n.operation) {\n    case 'const':\n      return hsh ^ cyrb53(n.value.toString(2))\n    case 'mul': case 'add': case 'min': case 'max':  // commutative ops.\n      return n.operands.reduce((hsh, ni) => hsh ^ hashNode(ni), hsh)\n    default:\n      return (n.operands as NumNode[]).reduce((hsh, ni) => Math.imul(hsh ^ hashNode(ni), 9923429423), hsh)\n  }\n}\n","import { AnyNode, NumNode, StrNode } from \"./type\"\nimport { constant } from \"./utils\"\n\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\n\n  function traverse(formula: (NumNode | StrNode)) {\n    if (visited.has(formula)) return\n\n    if (visiting.has(formula)) {\n      console.error(\"Found cyclical dependency during formula traversal\")\n      return\n    }\n    visiting.add(formula)\n\n    topDown(formula)\n\n    formula.operands.forEach(traverse)\n\n    bottomUp(formula)\n\n    visiting.delete(formula)\n    visited.add(formula)\n  }\n\n  formulas.forEach(traverse)\n}\n\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\n  const visiting = new Set<(NumNode | StrNode)>()\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    let topDown = topDownMapped.get(formula)\n    if (topDown) return topDown\n    topDown = topDownMap(formula)\n\n    let bottomUp = bottomUpMapped.get(topDown)\n    if (bottomUp) return bottomUp\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n    visiting.add(topDown)\n\n    bottomUp = bottomUpMap(traverse(topDown), formula)\n\n    visiting.delete(topDown)\n\n    topDownMapped.set(formula, bottomUp)\n    bottomUpMapped.set(topDown, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    const operands = formula.operands.map(check)\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\n  }\n\n  const result = formulas.map(check)\n  return arrayEqual(result, formulas) ? formulas : result\n}\n\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\n  const visiting = new Set<AnyNode>()\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\n    let topDownMapping = topDownByContext.get(parentContextId)\n    if (!topDownMapping) {\n      topDownMapping = new Map()\n      topDownByContext.set(parentContextId, topDownMapping)\n    }\n\n    let topDown = topDownMapping.get(formula)\n    if (topDown) return topDown\n    let topDownContextId: number\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\n    if (!bottomUpMapping) {\n      bottomUpMapping = new Map()\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\n    }\n\n    let bottomUp = bottomUpMapping.get(topDown)\n    if (bottomUp) return bottomUp\n\n    visiting.add(topDown)\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\n    visiting.delete(topDown)\n\n    bottomUpMapping.set(topDown, bottomUp)\n    topDownMapping.set(formula, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\n    const operands = formula.operands.map(f => check(f, contextId))\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\n  }\n\n  const result = formulas.map(f => check(f, baseContextId))\n  return arrayEqual(formulas, result) ? formulas : result\n}\n\ntype ContextID = number\n\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\n  if (a === undefined) return b === undefined\n  if (b === undefined) return false\n\n  return a.length === b.length && a.every((value, i) => value === b[i])\n}\n","import { assertUnreachable, objectKeyMap, objPathValue } from \"../Util/Util\"\nimport { forEachNodes, mapFormulas } from \"./internal\"\nimport { constant } from \"./utils\"\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode } from \"./type\"\n\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\n  min: (x: number[]): number => Math.min(...x),\n  max: (x: number[]): number => Math.max(...x),\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\n}\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\n  ...allCommutativeMonoidOperations,\n  res: ([res]: number[]): number => {\n    if (res < 0) return 1 - res / 2\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\n    return 1 - res\n  },\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\n}\n\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\n\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  formulas = constantFold(formulas, topLevelData, shouldFold)\n  formulas = flatten(formulas)\n  formulas = deduplicate(formulas)\n  return formulas\n}\nexport function precompute(formulas: NumNode[], binding: (readNode: ReadNode<number>) => string): [compute: () => Float64Array, mapping: Dict<string, number>, buffer: Float64Array] {\n  // TODO: Use min-cut to minimize the size of interim array\n  type Reference = string | number | { ins: Reference[] }\n\n  const uniqueReadStrings = new Set<string>()\n  const uniqueNumbers = new Set<number>()\n  const mapping = new Map<NumNode, Reference>()\n\n  forEachNodes(formulas, _ => { }, f => {\n    const { operation } = f\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || (f.accu && f.accu !== \"add\"))\n          throw new Error(`Unsupported ${operation} node in precompute`)\n        const name = binding(f)\n        uniqueReadStrings.add(name)\n        mapping.set(f, name)\n        break\n      case \"add\": case \"min\": case \"max\": case \"mul\":\n      case \"threshold\": case \"res\": case \"sum_frac\":\n        mapping.set(f, { ins: f.operands.map(op => mapping.get(op)!) })\n        break\n      case \"const\":\n        if (typeof f.value !== \"number\")\n          throw new Error(\"Found string constant while precomputing\")\n        const value = f.value\n        uniqueNumbers.add(value)\n        mapping.set(f as ConstantNode<number>, value)\n        break\n      case \"match\": case \"lookup\": case \"subscript\":\n      case \"prio\": case \"small\":\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  /**\n   * [ Outputs , Input , Constants, Deduplicated Compute ]\n   *\n   * Note that only Compute nodes are deduplicated. Outputs are arranged\n   * in the same order as formulas even when they are duplicated. Inputs\n   * are arranged in the same order as the read strings, even when they\n   * overlap with outputs. If an output is a constant or a compute node,\n   * only put the data in the output region.\n   */\n  const locations = new Map<NumNode | number | string, number>()\n\n  const readStrings = [...uniqueReadStrings], readOffset = formulas.length\n  const constValues = [...uniqueNumbers]\n  const computations: { out: number, ins: number[], op: (_: number[]) => number, buff: number[] }[] = []\n\n  formulas.forEach((f, i) => {\n    locations.set(f, i)\n    if (f.operation === \"const\") locations.set(f.value, i)\n  })\n  // After this line, if some outputs are also read node, `locations`\n  // will point to the one in the read node portion instead.\n  readStrings.forEach((str, i) => locations.set(str, i + formulas.length))\n  let offset = formulas.length + readStrings.length\n  constValues.forEach(value => locations.has(value) || locations.set(value, offset++))\n\n  // `locations` is stable from this point on. We now only append new values.\n  // There is no change to existing values.\n  //\n  // DO NOT read from `location` prior to this line.\n  mapping.forEach((ref, node) => {\n    if (typeof ref !== \"object\") {\n      locations.set(node, locations.get(ref)!)\n      return\n    }\n    if (!locations.has(node)) locations.set(node, offset++)\n    computations.push({\n      out: locations.get(node)!,\n      ins: node.operands.map(op => locations.get(op)!),\n      op: allOperations[node.operation],\n      buff: Array(node.operands.length).fill(0),\n    })\n  })\n\n  const buffer = new Float64Array(offset).fill(0)\n  uniqueNumbers.forEach(number => buffer[locations.get(number)!] = number)\n\n  // Copy target for when some outputs are duplicated\n  const copyList = formulas.map((node, i) => {\n    const src = locations.get(node)!\n    return src !== i ? [src, i] : undefined!\n  }).filter(x => x)\n  const copyFormula = copyList.length ? () => {\n    copyList.forEach(([src, dst]) => buffer[dst] = buffer[src])\n  } : undefined\n\n  return [() => {\n    computations.forEach(({ out, ins, op, buff }) => {\n      ins.forEach((i, j) => buff[j] = buffer[i])\n      buffer[out] = op(buff)\n    })\n    copyFormula?.()\n    return buffer\n  }, objectKeyMap(readStrings, (_, i) => readOffset + i), buffer]\n}\n\nfunction flatten(formulas: NumNode[]): NumNode[] {\n  return mapFormulas(formulas, f => f, _formula => {\n    let result = _formula\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\n      const formula = _formula as ComputeNode\n      const { operation } = formula\n\n      let flattened = false\n      const operands = formula.operands.flatMap(dep =>\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\n      result = flattened ? { ...formula, operands } : formula\n    }\n\n    return result\n  })\n}\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\n    const result = new Map<T, number>()\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\n    return result\n  }\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\n  }\n\n  const wrap = {\n    common: {\n      counts: new Map<NumNode, number>(),\n      formulas: new Set<NumNode>(),\n      operation: \"add\" as Operation\n    }\n  }\n\n  while (true) {\n    let next: typeof wrap.common | undefined\n\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\n\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\n      candidatesByOperation.set(operation, [])\n\n    formulas = mapFormulas(formulas, _formula => {\n      if (wrap.common.formulas.has(_formula as NumNode)) {\n        const formula = _formula as ComputeNode\n        const remainingCounts = new Map(wrap.common.counts)\n        const operands = formula.operands.filter(dep => {\n          const count = remainingCounts.get(dep)\n          if (count) {\n            remainingCounts.set(dep, count - 1)\n            return false\n          }\n          return true\n        })\n\n        if (!operands.length)\n          return factored\n        operands.push(factored)\n        return { ...formula, operands }\n      }\n      return _formula\n    }, _formula => {\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\n      const formula = _formula as ComputeNode\n\n      if (next) {\n        if (next.operation === formula.operation) {\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\n          const nextCounts = next.counts\n          let total = 0\n\n          for (const [dependency, currentCount] of currentCounts.entries()) {\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\n            if (commonCount) {\n              commonCounts.set(dependency, commonCount)\n              total += commonCount\n            } else commonCounts.delete(dependency)\n          }\n          if (total > 1) {\n            next.counts = commonCounts\n            next.formulas.add(formula)\n          }\n        }\n      } else {\n        const candidates = candidatesByOperation.get(formula.operation)!\n        const counts = elementCounts(formula.operands)\n\n        for (const [candidate, candidateCounts] of candidates) {\n          let total = 0\n\n          const commonCounts = new Map<NumNode, number>()\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\n            if (count) {\n              commonCounts.set(dependency, count)\n              total += count\n            }\n          }\n          if (total > 1) {\n            next = {\n              counts: commonCounts,\n              formulas: new Set([formula, candidate]),\n              operation: formula.operation\n            }\n            candidatesByOperation.clear()\n            break\n          }\n        }\n        if (!next) candidates.push([formula, counts])\n      }\n\n      return formula\n    })\n\n    if (next) wrap.common = next\n    else break\n  }\n\n  return formulas\n}\n\n/**\n * Replace nodes with known values with appropriate constants,\n * avoiding removal of any nodes that pass `isFixed` predicate\n */\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\n  const origin: Context = { data: [], processed: new Map() }\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\n\n  function fold(formula: StrNode, context: Context): StrNode\n  function fold(formula: NumNode, context: Context): NumNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\n    const old = context.processed.get(formula)\n    if (old) return old\n\n    const { operation } = formula\n    let result: NumNode | StrNode\n    switch (operation) {\n      case \"const\": return formula\n      case \"add\": case \"mul\": case \"max\": case \"min\":\n        const f = allOperations[operation]\n        const numericOperands: number[] = []\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\n          const folded = fold(formula, context)\n          return (folded.operation === \"const\")\n            ? (numericOperands.push(folded.value), false)\n            : true\n        }).map(x => fold(x, context))\n        const numericValue = f(numericOperands)\n\n        // Fold degenerate cases. This may incorrectly compute NaN\n        // results, which shouldn't appear under expected usage.\n        // - zero\n        //   - 0 * ... = 0\n        // - infinity\n        //   - max(infinity, ...) = infinity\n        //   - infinity + ... = infinity\n        // - (-infinity)\n        //   - min(-infinity, ...) - infinity\n        //   - (-infinity) + ... = -infinity\n        // - NaN\n        //   - operation(NaN, ...) = NaN\n        if (!isFinite(numericValue)) {\n          if ((operation !== \"mul\") &&\n            (operation !== \"max\" || numericValue > 0) &&\n            (operation !== \"min\" || numericValue < 0)) {\n            result = constant(numericValue)\n            break\n          }\n        } else if (operation === \"mul\" && numericValue === 0) {\n          result = constant(numericValue)\n          break\n        }\n\n        if (numericValue !== f([])) // Skip vacuous values\n          formulaOperands.push(constant(numericValue))\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\n        else result = { operation, operands: formulaOperands }\n        break\n      case \"res\": case \"sum_frac\": {\n        const operands = formula.operands.map(x => fold(x, context))\n        const f = allOperations[operation]\n        if (operands.every(x => x.operation === \"const\"))\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\n        else result = { ...formula, operands }\n        break\n      }\n      case \"lookup\": {\n        const index = fold(formula.operands[0], context)\n        if (index.operation === \"const\") {\n          const selected = formula.table[index.value!] ?? formula.operands[1]\n          if (selected) {\n            result = fold(selected, context)\n            break\n          }\n        }\n        throw new Error(`Unsupported ${operation} node while folding`)\n      }\n      case \"prio\": {\n        const first = formula.operands.find(op => {\n          const folded = fold(op, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          return folded.value !== undefined\n        })\n        result = first ? fold(first, context) : constant(undefined)\n        break\n      }\n      case \"small\": {\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\n        for (const operand of formula.operands) {\n          const folded = fold(operand, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\n            smallest = folded\n        }\n        result = smallest ?? constant(undefined)\n        break\n      }\n      case \"match\": {\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\n          throw new Error(`Unsupported ${operation} node while folding`)\n        result = (v1.value === v2.value) ? match : unmatch\n        break\n      }\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\n        if (value.operation === \"const\" && threshold.operation === \"const\")\n          result = value.value >= threshold.value ? pass : fail\n        else\n          result = { ...formula, operands: [value, threshold, pass, fail] }\n        break\n      }\n      case \"subscript\": {\n        const [index] = formula.operands.map(x => fold(x, context))\n        result = (index.operation === \"const\")\n          ? constant(formula.list[index.value])\n          : { ...formula, operands: [index] }\n        break\n      }\n      case \"read\": {\n        const operands = context.data\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\n          .filter(x => x)\n\n        if (operands.length === 0) {\n          if (shouldFold(formula)) {\n            const { accu } = formula\n            if (accu === undefined || accu === \"small\")\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\n            else result = constant(allOperations[accu]([]))\n          } else result = formula\n        } else if (formula.accu === undefined || operands.length === 1)\n          result = fold(operands[operands.length - 1], context)\n        else\n          result = fold({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\n        break\n      }\n      case \"data\":\n        if (formula.reset) context = origin\n        const map = nextContextMap.get(context)!\n        let nextContext = map.get(formula.data)\n        if (!nextContext) {\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\n          nextContextMap.set(nextContext, new Map())\n          map.set(formula.data, nextContext)\n        }\n        result = fold(formula.operands[0], nextContext)\n        break\n      default: assertUnreachable(operation)\n    }\n\n    context.processed.set(formula, result)\n    return result\n  }\n\n  const context = { data: [topLevelData], processed: new Map() }\n  nextContextMap.set(context, new Map())\n  nextContextMap.get(origin)!.set(topLevelData, context)\n  return formulas.map(x => fold(x, context))\n}\n\nexport const testing = {\n  constantFold, flatten, deduplicate\n}\n","export const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\nexport const allRegions = [\"mondstadt\", \"liyue\", \"inazuma\", \"sumeru\", \"fontaine\", \"natlan\", \"snezhnaya\", \"khaenriah\"] as const\nexport const allReactionModes = [\"hydro_vaporize\", \"pyro_vaporize\", \"pyro_melt\", \"cryo_melt\",] as const\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\nexport const allRarities = [5, 4, 3, 2, 1] as const\nexport const allArtifactRarities = [5, 4, 3] as const\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo'] as const\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\nexport const allArtifactSets = [\n  \"Adventurer\",\n  \"ArchaicPetra\",\n  \"Berserker\",\n  \"BlizzardStrayer\",\n  \"BloodstainedChivalry\",\n  \"BraveHeart\",\n  \"CrimsonWitchOfFlames\",\n  \"DefendersWill\",\n  \"EchoesOfAnOffering\",\n  \"EmblemOfSeveredFate\",\n  \"Gambler\",\n  \"GladiatorsFinale\",\n  \"HeartOfDepth\",\n  \"HuskOfOpulentDreams\",\n  \"Instructor\",\n  \"Lavawalker\",\n  \"LuckyDog\",\n  \"MaidenBeloved\",\n  \"MartialArtist\",\n  \"NoblesseOblige\",\n  \"OceanHuedClam\",\n  \"PaleFlame\",\n  \"PrayersForDestiny\",\n  \"PrayersForIllumination\",\n  \"PrayersForWisdom\",\n  \"PrayersToSpringtime\",\n  \"ResolutionOfSojourner\",\n  \"RetracingBolide\",\n  \"Scholar\",\n  \"ShimenawasReminiscence\",\n  \"TenacityOfTheMillelith\",\n  \"TheExile\",\n  \"ThunderingFury\",\n  \"Thundersoother\",\n  \"TinyMiracle\",\n  \"TravelingDoctor\",\n  \"VermillionHereafter\",\n  \"ViridescentVenerer\",\n  \"WanderersTroupe\",\n] as const\nexport const allCharacterKeys = [\n  \"Albedo\",\n  \"Amber\",\n  \"Barbara\",\n  \"Beidou\",\n  \"Bennett\",\n  \"Chongyun\",\n  \"Diluc\",\n  \"Diona\",\n  \"Fischl\",\n  \"Ganyu\",\n  \"HuTao\",\n  \"Jean\",\n  \"Kaeya\",\n  \"Keqing\",\n  \"Klee\",\n  \"KujouSara\",\n  \"Lisa\",\n  \"Mona\",\n  \"Ningguang\",\n  \"Noelle\",\n  \"Qiqi\",\n  \"Razor\",\n  \"Sucrose\",\n  \"Tartaglia\",\n  \"Traveler\",\n  \"RaidenShogun\",\n  \"Venti\",\n  \"Xiangling\",\n  \"Xiao\",\n  \"Xingqiu\",\n  \"Xinyan\",\n  \"Rosaria\",\n  \"Yanfei\",\n  \"Eula\",\n  \"KaedeharaKazuha\",\n  \"KamisatoAyaka\",\n  \"Sayu\",\n  \"Shenhe\",\n  \"Yoimiya\",\n  \"Aloy\",\n  \"SangonomiyaKokomi\",\n  \"Thoma\",\n  \"Gorou\",\n  \"AratakiItto\",\n  \"YaeMiko\",\n  \"YunJin\",\n  \"Zhongli\",\n  \"KamisatoAyato\",\n  \"Yelan\",\n  // \"KukiShinobu\"\n] as const\n\nexport const allWeaponSwordKeys = [\n  \"AmenomaKageuchi\",\n  \"AquilaFavonia\",\n  \"BlackcliffLongsword\",\n  \"CinnabarSpindle\",\n  \"CoolSteel\",\n  \"DarkIronSword\",\n  \"DullBlade\",\n  \"FavoniusSword\",\n  \"FesteringDesire\",\n  \"FilletBlade\",\n  \"FreedomSworn\",\n  \"HaranGeppakuFutsu\",\n  \"HarbingerOfDawn\",\n  \"IronSting\",\n  \"LionsRoar\",\n  \"MistsplitterReforged\",\n  \"PrimordialJadeCutter\",\n  \"PrototypeRancour\",\n  \"RoyalLongsword\",\n  \"SacrificialSword\",\n  \"SilverSword\",\n  \"SkyriderSword\",\n  \"SkywardBlade\",\n  \"SummitShaper\",\n  \"SwordOfDescension\",\n  \"TheAlleyFlash\",\n  \"TheBlackSword\",\n  \"TheFlute\",\n  \"TravelersHandySword\",\n] as const\nexport type WeaponSwordKey = typeof allWeaponSwordKeys[number]\n\nexport const allWeaponClaymoreKeys = [\n  \"Akuoumaru\",\n  \"BlackcliffSlasher\",\n  \"BloodtaintedGreatsword\",\n  \"DebateClub\",\n  \"FavoniusGreatsword\",\n  \"FerrousShadow\",\n  \"KatsuragikiriNagamasa\",\n  \"LithicBlade\",\n  \"LuxuriousSeaLord\",\n  \"OldMercsPal\",\n  \"PrototypeArchaic\",\n  \"Rainslasher\",\n  \"RedhornStonethresher\",\n  \"RoyalGreatsword\",\n  \"SacrificialGreatsword\",\n  \"SerpentSpine\",\n  \"SkyriderGreatsword\",\n  \"SkywardPride\",\n  \"SnowTombedStarsilver\",\n  \"SongOfBrokenPines\",\n  \"TheBell\",\n  \"TheUnforged\",\n  \"WasterGreatsword\",\n  \"Whiteblind\",\n  \"WhiteIronGreatsword\",\n  \"WolfsGravestone\",\n] as const\nexport type WeaponClaymoreKey = typeof allWeaponClaymoreKeys[number]\n\nexport const allWeaponPolearmKeys = [\n  \"BeginnersProtector\",\n  \"BlackcliffPole\",\n  \"BlackTassel\",\n  \"CalamityQueller\",\n  \"CrescentPike\",\n  \"Deathmatch\",\n  \"DragonsBane\",\n  \"DragonspineSpear\",\n  \"EngulfingLightning\",\n  \"FavoniusLance\",\n  \"Halberd\",\n  \"IronPoint\",\n  \"KitainCrossSpear\",\n  \"LithicSpear\",\n  \"PrimordialJadeWingedSpear\",\n  \"PrototypeStarglitter\",\n  \"RoyalSpear\",\n  \"SkywardSpine\",\n  \"StaffOfHoma\",\n  \"TheCatch\",\n  \"VortexVanquisher\",\n  \"WavebreakersFin\",\n  \"WhiteTassel\",\n] as const\nexport type WeaponPoleArmKey = typeof allWeaponPolearmKeys[number]\n\nexport const allWeaponBowKeys = [\n  \"AlleyHunter\",\n  \"AmosBow\",\n  \"AquaSimulacra\",\n  \"BlackcliffWarbow\",\n  \"CompoundBow\",\n  \"ElegyForTheEnd\",\n  \"FadingTwilight\",\n  \"FavoniusWarbow\",\n  \"Hamayumi\",\n  \"HuntersBow\",\n  \"Messenger\",\n  \"MitternachtsWaltz\",\n  \"MouunsMoon\",\n  \"PolarStar\",\n  \"Predator\",\n  \"PrototypeCrescent\",\n  \"RavenBow\",\n  \"RecurveBow\",\n  \"RoyalBow\",\n  \"Rust\",\n  \"SacrificialBow\",\n  \"SeasonedHuntersBow\",\n  \"SharpshootersOath\",\n  \"SkywardHarp\",\n  \"Slingshot\",\n  \"TheStringless\",\n  \"TheViridescentHunt\",\n  \"ThunderingPulse\",\n  \"WindblumeOde\",\n] as const\nexport type WeaponBowKey = typeof allWeaponBowKeys[number]\n\nexport const allWeaponCatalystKeys = [\n  \"ApprenticesNotes\",\n  \"BlackcliffAgate\",\n  \"DodocoTales\",\n  \"EmeraldOrb\",\n  \"EverlastingMoonglow\",\n  \"EyeOfPerception\",\n  \"FavoniusCodex\",\n  \"Frostbearer\",\n  \"HakushinRing\",\n  \"KagurasVerity\",\n  \"LostPrayerToTheSacredWinds\",\n  \"MagicGuide\",\n  \"MappaMare\",\n  \"MemoryOfDust\",\n  \"OathswornEye\",\n  \"OtherworldlyStory\",\n  \"PocketGrimoire\",\n  \"PrototypeAmber\",\n  \"RoyalGrimoire\",\n  \"SacrificialFragments\",\n  \"SkywardAtlas\",\n  \"SolarPearl\",\n  \"TheWidsith\",\n  \"ThrillingTalesOfDragonSlayers\",\n  \"TwinNephrite\",\n  \"WineAndSong\",\n] as const\nexport type WeaponCatalystKey = typeof allWeaponCatalystKeys[number]\n\nexport const allWeaponKeys = [\n  ...allWeaponSwordKeys,\n  ...allWeaponClaymoreKeys,\n  ...allWeaponPolearmKeys,\n  ...allWeaponBowKeys,\n  ...allWeaponCatalystKeys,\n] as const\nexport type WeaponKey = WeaponSwordKey | WeaponClaymoreKey | WeaponPoleArmKey | WeaponBowKey | WeaponCatalystKey\n\nexport const characterSpecializedStatKeys = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"] as const\n\nexport type HitModeKey = typeof allHitModes[number]\nexport type Region = typeof allRegions[number]\nexport type ReactionModeKey = typeof allReactionModes[number]\nexport type SetNum = typeof allArtifactSetCount[number]\nexport type Rarity = typeof allRarities[number]\nexport type ArtifactRarity = typeof allArtifactRarities[number]\nexport type SlotKey = typeof allSlotKeys[number]\nexport type ElementKey = typeof allElements[number]\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\nexport type ArtifactSetKey = typeof allArtifactSets[number]\nexport type CharacterKey = typeof allCharacterKeys[number]\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\nexport type CharacterSpecializedStatKey = typeof characterSpecializedStatKeys[number]\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\n","import { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\nimport { allOperations, constantFold } from \"../../../../Formula/optimization\";\nimport { ConstantNode, NumNode } from \"../../../../Formula/type\";\nimport { constant, customRead, max, min } from \"../../../../Formula/utils\";\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\nimport type { ArtSetExclusion } from \"./BuildSetting\";\n\ntype DynMinMax = { [key in string]: MinMax }\ntype MinMax = { min: number, max: number }\n\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\nexport function pruneAll(nodes: NumNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\n  }\n  let count = 0\n  while (Object.values(should).some(x => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, exclusion)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nfunction reaffine(nodes: NumNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  const affineNodes = new Set<NumNode>(), topLevelAffine = new Set<NumNode>()\n\n  function visit(node: NumNode, isAffine: boolean) {\n    if (isAffine) affineNodes.add(node)\n    else node.operands.forEach(_op => {\n      const op = _op as NumNode\n      affineNodes.has(op) && topLevelAffine.add(op)\n    })\n  }\n\n  const dynKeys = new Set<string>()\n\n  forEachNodes(nodes, _ => { }, f => {\n    const operation = f.operation\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || f.path[0] !== \"dyn\" || f.accu !== \"add\")\n          throw new Error(`Found unsupported ${operation} node at path ${f.path} when computing affine nodes`)\n        dynKeys.add(f.path[1])\n        visit(f, true)\n        break\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\n      case \"mul\": {\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\n        break\n      }\n      case \"const\":\n        if (typeof f.value === \"string\" || f.value === undefined)\n          throw new Error(`Found constant ${f.value} while compacting`)\n        visit(f as NumNode, true); break\n      case \"res\": case \"threshold\": case \"sum_frac\":\n      case \"max\": case \"min\": visit(f, false); break\n      case \"data\": case \"subscript\": case \"lookup\": case \"match\": case \"prio\": case \"small\":\n        throw new Error(`Found unsupported ${operation} node when computing affine nodes`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\n    Object.keys(arts.base).length === dynKeys.size)\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\n  const affineMap = new Map(affine.map(node => [node,\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\n      ? node\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\n  nodes = mapFormulas(nodes, f => affineMap.get(f as NumNode) ?? f, f => f)\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold([...affineMap.keys()], {\n      dyn: objectMap(stat, (value) => constant(value))\n    } as any, _ => true)\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\n  }\n  const result = {\n    nodes, arts: {\n      base: reaffineArt(arts.base),\n      values: objectKeyMap(allSlotKeys, slot =>\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\n    }\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets)\n        values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nexport function pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\n  let progress = false\n  const noRainbow = !exclusion.rainbow?.length\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\n  const values = objectKeyMap(allSlotKeys, slot => {\n    const list = arts.values[slot]\n    const newList = list.filter(art => {\n      let count = 0\n      return list.every(other => {\n        const greaterEqual = Object.entries(other.values).every(([k, o]) => o >= art.values[k])\n        const greater = Object.entries(other.values).some(([k, o]) => o > art.values[k])\n        if (greaterEqual && (greater || other.id > art.id) &&\n          ((noRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set))\n          count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(nodes: NumNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\n\n    let progress = false\n    const values = objectKeyMap(allSlotKeys, slot => {\n      const result = wrap.arts.values[slot].filter(art => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\n      })\n      if (result.length !== wrap.arts.values[slot].length)\n        progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: NumNode[], arts: ArtifactsBySlot): NumNode[] {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(nodes, f => {\n    const { operation } = f\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\n    switch (operation) {\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandRanges\n        if (value.min >= threshold.max) return f.operands[2]\n        else if (value.max < threshold.min) return constant(0)\n        if (pass.max === pass.min &&\n          fail.max === fail.min &&\n          pass.min === fail.min && isFinite(pass.min))\n          return constant(pass.max)\n        break\n      }\n      case \"min\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\n        })\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\n        break\n      }\n      case \"max\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every(op2 => op1.max >= op2.min)\n        })\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\n        break\n      }\n    }\n    return f\n  }, f => f)\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach(range => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}\n  if (arts.length) {\n    Object.keys(arts[0].values)\n      .filter(key => arts.every(art => art.values[key]))\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\n    arts.forEach(({ values }) => {\n      for (const [key, value] of Object.entries(values)) {\n        if (!result[key]) result[key] = { min: 0, max: value }\n        else {\n          if (result[key].max < value) result[key].max = value\n          if (result[key].min > value) result[key].min = value\n        }\n      }\n    })\n  }\n  return result\n}\nfunction computeNodeRange(nodes: NumNode[], reads: DynMinMax): Map<NumNode, MinMax> {\n  const range = new Map<NumNode, MinMax>()\n\n  forEachNodes(nodes, _ => { }, _f => {\n    const f = _f as NumNode\n    const { operation } = f\n    const operands = f.operands.map(op => range.get(op)!)\n    let current: MinMax\n    switch (operation) {\n      case \"read\":\n        if (f.path[0] !== \"dyn\")\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\n        break\n      case \"const\": current = computeMinMax([f.value]); break\n      case \"subscript\": current = computeMinMax(f.list); break\n      case \"add\": case \"min\": case \"max\":\n        current = {\n          min: allOperations[operation](operands.map(x => x.min)),\n          max: allOperations[operation](operands.map(x => x.max)),\n        }; break\n      case \"res\": current = {\n        min: allOperations[operation]([operands[0].max]),\n        max: allOperations[operation]([operands[0].min]),\n      }; break\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\n        accu.min * current.min, accu.min * current.max,\n        accu.max * current.min, accu.max * current.max,\n      ])); break\n      case \"threshold\":\n        if (operands[0].min >= operands[1].max) current = operands[2]\n        else if (operands[0].max < operands[1].min) current = computeMinMax([0])\n        else current = computeMinMax([0], [operands[2]])\n        break\n      case \"sum_frac\": {\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\n        if (sum.min <= 0 && sum.max >= 0)\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\n        else\n          // TODO: Check this\n          current = computeMinMax([\n            x.min / sum.min, x.min / sum.max,\n            x.max / sum.min, x.max / sum.max\n          ])\n        break\n      }\n      case \"data\": case \"lookup\": case \"match\":\n        throw new Error(`Unsupported ${operation} node`)\n      default: assertUnreachable(operation)\n    }\n    range.set(f, current)\n  })\n  return range\n}\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\n  return { min, max }\n}\n\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objectKeyMap(allSlotKeys, slot => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\n      }\n    })\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value)\n        result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\n}\n\n\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\n  filter_loop: for (const filter of filters) {\n    for (const [slot, f] of Object.entries(filter)) {\n      const available = artSets[slot]!\n      switch (f.kind) {\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\n        case \"id\": break\n      }\n    }\n    yield filter\n  }\n}\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\n  return new Set(exclusion?.includes(2)\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\n}\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\n  /**\n   * This generation algorithm is separated into two parts:\n   * - \"Shape\" generation\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\n   * - Shape filling\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\n   */\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\n  let shapes: number[][] = []\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\n    if (current.length === 5) {\n      if (allowedRainbows.has(rainbows.length))\n        shapes.push(current)\n      return\n    }\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\n  }\n  populateShapes([0], new Set([0]), [0])\n  function indexOfShape(shape: number[], replacing: number) {\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\n      return undefined\n    shape = [...shape]\n    shape[replacing] = 5\n    return shape.reduce((a, b) => a * 6 + b, 0)\n  }\n  for (let replacing = 4; replacing >= 0; replacing--) {\n    const required: Map<number, number> = new Map()\n    for (const shape of shapes) {\n      const id = indexOfShape(shape, replacing)\n      if (id === undefined) continue\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\n    }\n    for (const [id, remaining] of required.entries()) {\n      if (remaining === 0) {\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\n        shape[replacing] = 5\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\n        shapes.push(shape)\n      }\n    }\n  }\n\n  // Shapes are now calculated and merged, proceed to fill in the sets\n\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\n\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\n\n  function* check(shape: number[]) {\n    const used: Set<ArtifactSetKey> = new Set()\n    let groupped: number[][] = [], rainbows: number[] = []\n    for (const i of shape) {\n      groupped.push([])\n      if (i === 5) rainbows.push(groupped.length - 1)\n      else groupped[i].push(groupped.length - 1)\n    }\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\n    let usableRainbows = rainbows.length\n\n    // Inception.. because js doesn't like functions inside a for-loop\n    function* check(i: number) {\n      if (i === groupped.length)\n        return yield* check_free(0)\n\n      for (const set of artSets) {\n        if (used.has(set)) continue\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\n        let requiredRainbows = 0\n\n        if (allowedSet && !allowedSet.has(length)) {\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\n        }\n\n        used.add(set)\n        counts[set] = groupped[i].length\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\n        usableRainbows -= requiredRainbows\n\n        yield* check(i + 1)\n\n        usableRainbows += requiredRainbows\n        counts[set] = 0\n        used.delete(set)\n      }\n    }\n    // We separate filling rainbow slots from groupped slots because it has an entirely\n    // different set of rules regarding what can be filled and what states to be kept.\n    function* check_free(i: number) {\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\n      let required = 0\n      for (const set of artSets) {\n        const allowedSet = allowedCounts[set], count = counts[set]\n        if (!allowedSet) continue\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\n        else if (!allowedSet.has(count)) {\n          required += [...allowedSet].find(x => x > count)! - count\n          missing.push(set)\n        }\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\n      }\n      if (required > remaining) return\n      if (i === rainbows.length) {\n        yield { ...result }\n        return\n      }\n      if (required === remaining) {\n        for (const set of missing) {\n          counts[set]++\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n          yield* check_free(i + 1)\n          counts[set]--\n        }\n        return\n      }\n      for (const set of [...isolated, ...missing]) {\n        counts[set]++\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n        yield* check_free(i + 1)\n        counts[set]--\n      }\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\n      yield* check_free(i + 1)\n    }\n    yield* check(0)\n  }\n  for (const shape of shapes) yield* check(shape)\n}\n\nexport type RequestFilter = StrictDict<SlotKey,\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\n  { kind: \"id\", ids: Set<string> }\n>\nexport const emptyfilter: RequestFilter = objectKeyMap(allSlotKeys, _ => ({ kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }));\n\nexport type DynStat = { [key in string]: number }\nexport type ArtifactBuildData = {\n  id: string\n  set?: ArtifactSetKey\n  values: DynStat\n}\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\n\nexport type PlotData = Dict<number, Build>\nexport interface Build {\n  value: number\n  plot?: number\n  artifactIds: string[]\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import { optimize, precompute } from '../../../../Formula/optimization';\nimport type { NumNode } from '../../../../Formula/type';\nimport type { InterimResult, Setup, SubProblem } from './BackgroundWorker';\nimport { ArtifactsBySlot, Build, countBuilds, DynStat, filterArts, mergePlot, PlotData, pruneAll, RequestFilter } from './common';\n\nexport class ComputeWorker {\n  builds: Build[] = []\n  buildValues: number[] | undefined = undefined\n  plotData: PlotData | undefined\n  plotBase: NumNode | undefined\n  threshold: number = -Infinity\n  maxBuilds: number\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: NumNode[]\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, plotBase, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.maxBuilds = maxBuilds\n    this.callback = callback\n    this.nodes = filters.map(x => x.value)\n    this.nodes.push(optimizationTarget)\n    if (plotBase) {\n      this.plotData = {}\n      this.plotBase = plotBase\n      this.nodes.push(plotBase)\n    }\n  }\n\n  compute(newThreshold: number, subproblem: SubProblem, dbg = false) {\n    if (this.threshold < newThreshold) this.threshold = newThreshold\n    const { optimizationTarget, constraints, filter, artSetExclusion, depth } = subproblem\n\n    const { interimReport } = this, self = this // `this` in nested functions means different things\n    let preArts = filterArts(this.arts, filter)\n    const totalCount = countBuilds(preArts)\n\n    if (subproblem.cache) {\n      if (subproblem.cachedCompute.maxEst[subproblem.cachedCompute.maxEst.length - 1] < this.threshold) {\n        this.interimReport({ tested: 0, failed: 0, skipped: totalCount })\n        return\n      }\n    }\n\n    // let nodes = [...constraints.map(({ value }) => toNumNode(value)), toNumNode(optimizationTarget)]\n    // let min = constraints.map(({ min }) => min)\n    let nodes = this.nodes\n    let min = this.min\n    if (this.plotBase !== undefined) nodes.push(this.plotBase)\n    nodes = optimize(nodes, {}, _ => false);\n    ({ nodes, arts: preArts } = pruneAll(nodes, min, preArts, this.maxBuilds, {}, {\n      pruneArtRange: true, pruneNodeRange: true,\n    }))\n    const [compute, mapping, buffer] = precompute(nodes, f => f.path[1])\n\n    const arts = Object.values(preArts.values)\n      .sort((a, b) => a.length - b.length)\n      .map(arts => arts.map(art => ({\n        id: art.id, set: art.set, values: Object.entries(art.values)\n          .map(([key, value]) => ({ key: mapping[key]!, value, cache: 0 }))\n          .filter(({ key, value }) => key !== undefined && value !== 0)\n      })))\n\n    const ids: string[] = Array(arts.length).fill(\"\")\n    let count = { tested: 0, failed: 0, skipped: totalCount - countBuilds(preArts) }\n\n    let maxFound = -Infinity\n\n    function permute(i: number, setKeyCounts: DynStat) {\n      if (i < 0) {\n        const result = compute()\n        maxFound = Math.max(result[constraints.length], maxFound)\n        let passArtExcl = Object.entries(artSetExclusion).every(([setKey, vals]) => !vals.includes(setKeyCounts[setKey]))\n\n        // Check rainbows\n        if (passArtExcl && artSetExclusion['uniqueKey'] !== undefined) {\n          const nRainbow = Object.values(setKeyCounts).reduce((a, b) => a + (b % 2), 0)\n          passArtExcl = !artSetExclusion['uniqueKey'].includes(nRainbow)\n        }\n\n        if (passArtExcl && min.every((m, i) => (m <= result[i]))) {\n          const value = result[min.length], { builds, plotData, threshold } = self\n          let build: Build | undefined\n          if (value >= threshold) {\n            build = { value, artifactIds: [...ids] }\n            builds.push(build)\n          }\n          if (plotData) {\n            const x = result[min.length + 1]\n            if (!plotData[x] || plotData[x]!.value < value) {\n              if (!build) build = { value, artifactIds: [...ids] }\n              build.plot = x\n              plotData[x] = build\n            }\n          }\n        }\n        else count.failed += 1\n        return\n      }\n      arts[i].forEach(art => {\n        ids[i] = art.id\n\n        for (const current of art.values) {\n          const { key, value } = current\n          current.cache = buffer[key]\n          buffer[key] += value\n        }\n\n        setKeyCounts[art.set ?? ''] = 1 + (setKeyCounts[art.set ?? ''] ?? 0)\n        permute(i - 1, setKeyCounts)\n        setKeyCounts[art.set ?? ''] -= 1\n        if (setKeyCounts[art.set ?? ''] === 0) delete setKeyCounts[art.set ?? '']\n\n        for (const { key, cache } of art.values) buffer[key] = cache\n      })\n      if (i === 0) {\n        count.tested += arts[0].length\n        if (count.tested > 8192)\n          interimReport(count)\n      }\n    }\n\n    for (const [key, value] of Object.entries(preArts.base)) {\n      const i = mapping[key]\n      if (i !== undefined)\n        buffer[i] = value\n    }\n\n    permute(arts.length - 1, {})\n    if (subproblem.cache) {\n      const cc = subproblem.cachedCompute\n      const maxEst = cc.maxEst[cc.maxEst.length - 1]\n\n      console.log('enumerated', { count: countBuilds(preArts), depth }, this.threshold, { gap: maxEst - maxFound }, { nodes, preArts }, cc)\n    }\n    this.interimReport(count)\n    return this.threshold\n  }\n\n  refresh(force: boolean): void {\n    const { maxBuilds } = this\n    if (Object.keys(this.plotData ?? {}).length >= 100000)\n      this.plotData = mergePlot([this.plotData!])\n\n    // I need frequent updating of threshold\n    if (true || this.builds.length >= 100000 || force) {\n      this.builds = this.builds\n        .sort((a, b) => b.value - a.value)\n        .slice(0, maxBuilds)\n      this.buildValues = this.builds.map(x => x.value)\n      this.threshold = Math.max(this.threshold, this.buildValues[maxBuilds - 1] ?? -Infinity)\n    }\n  }\n  interimReport = (count: { tested: number, failed: number, skipped: number }) => {\n    this.refresh(false)\n    this.callback({ command: \"interim\", buildValues: this.buildValues, ...count })\n    this.buildValues = undefined\n    count.tested = 0\n    count.failed = 0\n    count.skipped = 0\n  }\n}\n","import { sum, prod, hashNode, cmpNode } from \"./utils\"\nimport { ConstantNode, NumNode } from \"./type\"\nimport { allArtifactSets } from \"../Types/consts\"\nimport { cartesian } from '../Util/Util'\nimport { forEachNodes } from \"./internal\"\nimport { makeid } from \"./optimize2\"\nimport { DynStat } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\n\nfunction countSlotUsage(node: NumNode): DynStat {\n  if (node.operation === 'add') {\n    return node.operands.map(n => countSlotUsage(n)).reduce((a, b) => {\n      Object.entries(b).forEach(([slotKey, n]) => a[slotKey] = Math.min(n, a[slotKey] ?? 0))\n      return a\n    }, {})\n  }\n  else if (node.operation === 'mul') {\n    return node.operands.map(n => countSlotUsage(n)).reduce((a, b) => {\n      Object.entries(b).forEach(([slotKey, n]) => a[slotKey] = Math.max(n, a[slotKey] ?? 0))\n      return a\n    }, {})\n  }\n  else if (node.operation === 'threshold') {\n    const branch = node.operands[0]\n    if (branch.operation === 'read' && (allArtifactSets as readonly string[]).includes(branch.path[1])) {\n      let con = node.operands[1] as ConstantNode<number>\n      return { [branch.path[1]]: con.value }\n    }\n  }\n  return {}\n}\n\nfunction filterProductPossible({ terms, nodes }: ExpandedPolynomial, slotsLeft = 5) {\n  let sCount = Object.fromEntries(Object.entries(nodes).map(([tag, n]) => [tag, countSlotUsage(n)]))\n\n  terms = terms.filter(({ terms }) => {\n    const slotUsage = terms.reduce((tot, s) => {\n      Object.entries(sCount[s]).forEach(([slotKey, n]) => tot[slotKey] = Math.max(n, tot[slotKey] ?? 0))\n      return tot\n    }, {} as DynStat)\n    return Object.values(slotUsage).reduce((a, b) => a + b, 0) <= slotsLeft\n  })\n  return { terms, nodes }\n}\n\nexport type Monomial = {\n  coeff: number,\n  terms: string[]\n}\nexport type ExpandedPolynomial = {\n  terms: Monomial[],\n  nodes: Dict<string, NumNode>,\n}\n\nexport function sumM(...monomials: Monomial[][]): Monomial[] {\n  return monomials.flat()\n}\nexport function prodM(...monomials: Monomial[][]): Monomial[] {\n  return cartesian(...monomials).map(monos => monos.reduce((ret, nxt) => {\n    ret.coeff *= nxt.coeff\n    ret.terms.push(...nxt.terms)\n    return ret\n  }, { coeff: 1, terms: [] }))\n}\nexport function constantM(v: number): Monomial[] {\n  return [{ coeff: v, terms: [] }]\n}\nexport function readM(tag: string): Monomial[] {\n  return [{ coeff: 1, terms: [tag] }]\n}\n\nexport function foldLikeTerms(mono: Monomial[]): Monomial[] {\n  let mon = [...mono]\n  mon.forEach(m => m.terms.sort())\n  mon.sort(({ terms: termsA }, { terms: termsB }) => {\n    if (termsA.length !== termsB.length) return termsA.length - termsB.length\n    for (let i = 0; i < termsA.length; i++) {\n      if (termsA[i] !== termsB[i]) return termsA[i] < termsB[i] ? -1 : 1\n    }\n    return 0\n  })\n\n  for (let i = mon.length - 2; i >= 0; i--) {\n    let a = mon[i].terms\n    let b = mon[i + 1].terms\n    if (a.length !== b.length) continue\n    if (a.every((ai, i) => ai === b[i])) {\n      mon[i].coeff = (mon[i].coeff ?? 0) + (mon[i + 1].coeff ?? 0)\n      mon.splice(i + 1, 1)\n    }\n  }\n  return mon\n}\n\n/**\n * Factors damage formula into sums of monomials in each variable.\n * For example:  (1700 * atk_ + atk) * (1 + cr * cd) * (1 + sum_frac(EM))\n *   -> 1700 * atk_ + 1700 * atk_ * cr * cd + 1700 * atk_ * sum_frac(EM) + 1700 * atk_ * cr * cd * sum_frac(EM)\n *            + atk +         atk * cr * cd +         atk * sum_frac(EM) +         atk * cr * cd * sum_frac(EM)\n *\n * For a total of 8 terms, since there are 3 pairs of additions, for 2^3 sum-of-product terms.\n *\n * isVar() is used to check whether any node should be considered a variable on its own.\n */\ntype NodeLinkedList = { n: NumNode, tag: string, next: NodeLinkedList | undefined }\nexport function expandPoly(node: NumNode, inheritTags?: string[]): ExpandedPolynomial {\n  let varMap = {} as Dict<number, NodeLinkedList> // my shitty hashmap\n  let tagMap = {} as Dict<string, NumNode>\n  const varTags = inheritTags ?? []\n  function lookup(n: NumNode) {\n    let hsh = hashNode(n)\n    let z = varMap[hsh]\n    while (z !== undefined) {\n      if (cmpNode(z.n, n)) return z.tag\n      z = z.next\n    }\n    const newTag = makeid(10, varTags)\n    varMap[hsh] = { n, tag: newTag, next: varMap[hsh] }\n    tagMap[newTag] = n\n    varTags.push(newTag)\n    return newTag\n  }\n\n  let stat2tag = {} as Dict<string, string>\n  forEachNodes([node], _ => { }, n => {\n    if (n.operation === 'read') stat2tag[n.path[1]] = lookup(n as NumNode)\n  })\n\n  function toSOP(n: NumNode): Monomial[] {\n    switch (n.operation) {\n      case 'add':\n        return sumM(...n.operands.map(toSOP))\n      case 'mul':\n        return prodM(...n.operands.map(toSOP))\n      case 'const':\n        return constantM(n.value)\n      default:\n        return readM(lookup(n))\n    }\n  }\n\n  // let sop = toSOP(node)\n  let sop = foldLikeTerms(toSOP(node))\n  return filterProductPossible({\n    terms: sop,\n    nodes: tagMap,\n  })\n}\n\n// Really should avoid using this function ever\nexport function toNumNode({ nodes, terms }: ExpandedPolynomial) {\n  return sum(...terms.map(({ coeff, terms }) => prod(coeff, ...terms.map(t => nodes[t]!))))\n}\n","function pivotInplace(A: number[][], { i, j }: { i: number, j: number }) {\n  const Aij = A[i][j]\n  for (let h = 0; h < A.length; h++) {\n    if (h === i) continue\n    for (let k = 0; k < A[0].length; k++) {\n      if (k === j) continue\n      A[h][k] -= A[i][k] * A[h][j] / Aij\n    }\n  }\n  for (let h = 0; h < A.length; h++) {\n    if (h === i) continue\n    A[h][j] = -A[h][j] / Aij\n  }\n  for (let k = 0; k < A[0].length; k++) {\n    if (k === j) continue\n    A[i][k] = A[i][k] / Aij\n  }\n  A[i][j] = 1 / Aij\n}\n\nfunction findPiv1(A: number[][]) {\n  const r = A.length, c = A[0].length\n  let minloc = { i: -1, j: -1, cmp: Infinity }\n  for (let j = 0; j < c - 1; j++) {\n    if (A[r - 1][j] >= 0) continue\n    for (let i = 0; i < r - 1; i++) {\n      if (A[i][j] > 1e-5) {\n        const cmp = A[i][c - 1] / A[i][j]\n        if (cmp < minloc.cmp) minloc = { i, j, cmp }\n      }\n    }\n\n    if (minloc.i < 0) throw Error('UNBOUNDED FEASIBLE')\n  }\n\n  if (minloc.i < 0) throw Error('NO PIVOTS (done)')\n  return { i: minloc.i, j: minloc.j }\n}\n\nfunction findPiv2(A: number[][]) {\n  const r = A.length, c = A[0].length\n  let minloc = { i: -1, j: -1, cmp: Infinity }\n  for (let i = 0; i < r - 1; i++) {\n    if (A[i][c - 1] >= 0) continue\n    for (let j = 0; j < c - 1; j++) {\n      if (A[i][j] < -1e-5) {\n        const cmp = A[i][c - 1] / A[i][j]\n        if (cmp < minloc.cmp) minloc = { i, j, cmp }\n      }\n    }\n\n    if (minloc.i < 0) throw Error('INFEASIBLE')\n    return { i: minloc.i, j: minloc.j }\n  }\n  throw Error('NO PIVOTS (done)')\n}\n\nfunction backtrack(tableau: number[][], ijTrack: { i: number, j: number }[], targ: number) {\n  let side = 1;  // 0 left, 1 right\n  ijTrack.forEach(({ i, j }) => {\n    if (side === 1 && j === targ) {\n      targ = i\n      side = 0\n    }\n    else if (side === 0 && i === targ) {\n      targ = j\n      side = 1\n    }\n  })\n\n  const ncol = tableau[0].length\n  return side === 0 ? tableau[targ][ncol - 1] : 0\n}\n\n/**\n * Solve a Linear Program defined by:\n *              min  c^T x\n *               x\n *   Subject to:     Ax <= b\n *                    x >= 0\n *\n * Implemented according to:\n *   https://www.math.ucla.edu/~tom/LP.pdf\n *\n * Does not implement any cycle detection, though that *shouldnt* a problem for GO's use\n *   case. This algorithm is fairly numerically unstable though, use with care & always\n *   try to verify the solution. It's also a fair bit slower than it needs to be.\n *\n * @param c        Objective vector\n * @param Ab       Constraints matrix with thresholds. Inputted in block form [A, b]\n * @returns        the optimal solution x\n */\nexport function solveLP(c: number[], Ab: number[][]) {\n  let rows = Ab.length + 1\n  let cols = Ab[0].length\n\n  let tableau = Array(rows).fill(0).map(_ => Array(cols).fill(0))\n  Ab.forEach((Ai, i) => Ai.forEach((Aij, j) => tableau[i][j] = Aij))\n  // b.forEach((bi, i) => tableau[i][cols - 1] = bi)\n  c.forEach((cj, j) => tableau[rows - 1][j] = cj)\n  // console.log('tab', tableau)\n\n  let ijTrack: { i: number, j: number }[] = []\n\n  while (tableau.some((t, i) => i < rows - 1 && t[cols - 1] < 0)) {\n    const ij = findPiv2(tableau)\n    ijTrack.push(ij)\n    // tableau = pivot(tableau, ij)\n    pivotInplace(tableau, ij)\n  }\n\n  while (tableau[rows - 1].some((t, j) => j < cols - 1 && t < 0)) {\n    const ij = findPiv1(tableau)\n    ijTrack.push(ij)\n    // tableau = pivot(tableau, ij)\n    pivotInplace(tableau, ij)\n  }\n\n  return c.map((_, i) => backtrack(tableau, ijTrack, i))\n}\n","import { NumNode } from \"./type\"\nimport { ArtifactsBySlot, DynStat } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\nimport { constant, sum, prod, cmp } from \"./utils\"\nimport { ExpandedPolynomial, Monomial, sumM, prodM, constantM, readM, foldLikeTerms } from './expandPoly'\nimport { precompute, allOperations } from \"./optimization\"\nimport { solveLP } from './solveLP_simplex'\nimport { cartesian } from '../Util/Util'\nimport { fillBuffer } from \"./addedUtils\"\n\nexport type LinearForm = {\n  w: DynStat,\n  c: number,\n  err: number\n}\n\nfunction minMax(node: NumNode, lower: DynStat, upper: DynStat) {\n  let [compute, mapping, buffer] = precompute([node], n => n.path[1])\n  fillBuffer(lower, mapping, buffer)\n  const minval = compute()[0]\n  fillBuffer(upper, mapping, buffer)\n  const maxval = compute()[0]\n  return [minval, maxval]\n}\n\n/**\n * `res` is the ONE place where negative arguments & negative slopes are allowed.\n * @param node\n */\nfunction handleResArg(node: { 'operation': 'res', 'operands': NumNode[] }, lower: DynStat, upper: DynStat) {\n  function flipOps(n: NumNode): NumNode {\n    switch (n.operation) {\n      case 'add':\n        return sum(...n.operands.map(n => flipOps(n)))\n      case 'const':\n        return constant(-n.value)\n      case 'threshold':\n        const [branch, bval, ge, lt] = n.operands\n        if (ge.operation === 'const' && lt.operation === 'const') {\n          if (ge.value <= lt.value) {\n            return cmp(branch, bval, -ge.value, -lt.value)\n          }\n        }\n        console.log(n)\n        throw Error('(res neg slope): threshold. Something went wrong.')\n      default:\n        console.log(n)\n        throw Error('(res neg slope) Havent written logic to handle this')\n    }\n  }\n\n  const flippedResOp = flipOps(node.operands[0])\n\n  let [a, b] = minMax(flippedResOp, lower, upper)\n  let resf = allOperations['res']\n  let [c, d] = [resf([-a]), resf([-b])]\n\n  if (b > 0 && a > -1.75) {\n    // 1 + x / 2\n    return sum(1, prod(.5, flippedResOp))\n  }\n\n  const intercept = (b * c - a * d) / (b - a)\n  const slope = (c - d) / (b - a)\n  return sum(intercept, prod(slope, flippedResOp))\n}\n\n/**\n * First converts a product of variables (including max, min, sum_frac, threshold, etc.) to\n *   a pure product form consisting of only `read` and `const` nodes, guaranteeing the\n *   product form is an upper bound.\n *\n * Then on the product form, create a linear upper bound using `lub` and return it.\n *\n * @param node The formula to expand\n * @param lower Stat lower bounds\n * @param upper Stat upper bounds\n * @returns\n */\nexport function toLinearUpperBound({ nodes, terms }: ExpandedPolynomial, lower: DynStat, upper: DynStat): LinearForm {\n  let stat2tag = {} as Dict<string, string>\n  Object.entries(nodes).forEach(([tag, n]) => {\n    if (n.operation === 'read') stat2tag[n.path[1]] = tag\n  })\n\n  let linerr = 0\n  function toPureRead(n: NumNode): Monomial[] {\n    switch (n.operation) {\n      case 'const':\n        return constantM(n.value)\n      case 'read':\n        return readM(stat2tag[n.path[1]]!)\n      case 'add':\n        return sumM(...n.operands.map(toPureRead))\n      case 'mul':\n        return prodM(...n.operands.map(toPureRead))\n\n      case 'threshold':\n        const [branch, bval, ge, lt] = n.operands\n        if (branch.operation === 'read' && bval.operation === 'const'\n          && lt.operation === 'const' && ge.operation === 'const') {\n          if (ge.value < lt.value) {\n            console.log(n)\n            throw Error('Not Implemented (threshold must be increasing)')\n          }\n\n          let key = branch.path[1]\n          if (lower[key] >= bval.value) return constantM(ge.value)\n          if (upper[key] < bval.value) return constantM(lt.value)\n\n          const slope = (ge.value - lt.value) / (bval.value - lower[key])\n          const mon1 = prodM(constantM(slope), readM(stat2tag[branch.path[1]]!))\n          if (lt.value === 0) return mon1\n          return sumM(constantM(lt.value), mon1)\n        }\n        console.log(n)\n        throw Error('Not Implemented (threshold must branch between constants)')\n      case 'res':\n        let op = handleResArg(n as { 'operation': 'res', 'operands': NumNode[] }, lower, upper)\n        return toPureRead(op)\n\n      case 'min': case 'max':\n        let [rop, cop] = n.operands\n        if (cop.operation !== 'const')\n          [rop, cop] = [cop, rop]  // Assume min(const, read)\n        if (n.operation === 'min') return toPureRead(rop)\n\n        if (cop.operation === 'const') {\n          const thresh = cop.value\n          const [minVal, maxVal] = minMax(rop, lower, upper)\n          if (minVal > thresh) return toPureRead(rop)\n          if (thresh > maxVal) return constantM(thresh)\n\n          // rescale `rop` to be above thresh, since max(f, 0) is a convex function\n          const m = (maxVal - thresh) / (maxVal - minVal)\n          const b = thresh - minVal\n          return sumM(constantM(b), prodM(constantM(m), toPureRead(rop)))\n        }\n        console.log(n)\n        throw Error('Not Implemented (max between two non-constants)')\n\n      case 'sum_frac':\n        const [em, denom] = n.operands\n        if (denom.operation !== 'const') throw Error('Not Implemented (non-constant sum_frac denominator)')\n\n        const [minEM, maxEM] = minMax(em, lower, upper)\n        const k = denom.value\n        // The sum_frac form is concave, so any Taylor expansion of EM / (EM + k) gives an upper bound.\n        // We can solve for the best Taylor approximation location with the following formula.\n        let loc = Math.sqrt((minEM + k) * (maxEM + k)) - k\n        let below = (k + loc) * (k + loc)\n        let slope = k / below\n        let c = loc * loc / below\n\n        // TODO: update linerr\n        return sumM(constantM(c), prodM(constantM(slope), toPureRead(em)))\n\n      default:\n        console.log(n)\n        throw Error('Not Implemented')\n    }\n  }\n\n  // 1. Turn all nodes into linear upper bounds\n  const nodesToMap = Object.fromEntries(Object.entries(nodes).filter(([tag, n]) => n.operation !== 'read').map(([tag, n]) => [tag, toPureRead(n)]))\n\n  // 2. substitute into `terms` and construct a new SOPForm whose nodes are all pure read nodes\n  let t2 = terms.flatMap(({ coeff, terms }) => prodM(constantM(coeff), ...terms.map(t => nodesToMap[t] ?? readM(t))))\n  t2 = foldLikeTerms(t2)\n\n  // 2.5 Re-name all the tags to their read node version\n  t2 = t2.map(({ coeff, terms }) => {\n    terms = terms.map(t => {\n      const nt = nodes[t]\n      if (!nt || nt.operation !== 'read') throw Error('MUST be a read node.')\n      return nt.path[1]\n    })\n    return { coeff, terms }\n  })\n\n  // 3. call lub() on each term\n  const lins = t2.map(({ coeff, terms }) => {\n    if (terms.length === 0) return { w: {}, c: coeff, err: 0 }\n    if (terms.length === 1) return { w: { [terms[0]]: coeff }, c: 0, err: 0 }\n    const { w, c, err } = lub(terms.map(k => ({ lower: lower[k], upper: upper[k] })))\n    const retw = w.reduce((ret, wi, i) => {\n      ret[terms[i]] = wi * coeff + (ret[terms[i]] ?? 0)\n      return ret\n    }, {} as DynStat)\n    return { w: retw, c: coeff * c, err: coeff * err + linerr }\n  })\n\n  return lins.reduce((lin, l) => {\n    lin.c += l.c; lin.err += l.err\n    Object.entries(l.w).forEach(([k, v]) => lin.w[k] = v + (lin.w[k] ?? 0))\n    return lin\n  }, { w: {}, c: 0, err: 0 })\n}\n\n/**\n * Constructs an upper bounding linear form for a function x_1 * x_2 * ... * x_n\n * @param bounds upper and lower bounds for each x_i\n * @returns { w, c, err } with\n */\nfunction lub(bounds: { lower: number, upper: number }[]): { w: number[], c: number, err: number } {\n  if (bounds.length === 0) return { w: [], c: 0, err: 0 }\n  const nVar = bounds.length\n\n  // Re-scale bounds to [0, 1] for numerical stability.\n  const boundScale = bounds.map(({ upper }) => upper)\n  const scaleProd = boundScale.reduce((prod, v) => prod * v, 1)\n  bounds = bounds.map(({ lower, upper }) => ({ lower: lower / upper, upper: 1 }))\n\n  // Setting up the linear program in terms of constraints.\n  let cons = cartesian(...bounds.map(({ lower, upper }) => [lower, upper])).flatMap((coords) => {\n    const prod = coords.reduce((prod, v) => prod * v, 1)\n    return [\n      [...coords.map(v => -v), 1, 0, -prod],\n      [...coords, -1, -1, prod],\n    ]\n  })\n\n  // Force equality at upper & lower corners?\n  // cons.push([...bounds.map(lu => lu.lower), -1, 0, bounds.reduce((prod, { lower }) => prod * lower, 1)])\n  // cons.push([...bounds.map(lu => lu.upper), -1, 0, bounds.reduce((prod, { upper }) => prod * upper, 1)])\n\n  let soln: any\n  const objective = [...bounds.map(_ => 0), 0, 1]\n  try {\n    // TODO: verify solution\n    soln = solveLP(objective, cons)\n  }\n  catch (e) {\n    console.log('ERROR on bounds', bounds)\n    console.log('Possibly numerical instability issue.')\n    throw e\n  }\n  return {\n    w: soln.slice(0, nVar).map((wi, i) => wi * scaleProd / boundScale[i]),\n    c: -scaleProd * soln[nVar],\n    err: scaleProd * soln[nVar + 1]\n  }\n}\n\nexport function maxWeight(a: ArtifactsBySlot, lin: LinearForm) {\n  const baseVal = sparseMatmulMax([lin], [a.base])[0] + lin.c\n\n  return baseVal + Object.entries(a.values)\n    .reduce((maxTotVal, [slotKey, slotArts]) => maxTotVal + sparseMatmulMax([lin], slotArts.map(a => a.values))[0], 0)\n}\n\n// Implement matrix multiply between row-major w's of LinearForm and col-major DynStats that represent artifacts.\n/**\n * Implements sparse matrix multiplication between A and x\n * @param A A list of row-major w's of some LinearForm\n * @param x A list of col-major DynStats that represent some artifacts\n * @returns A col-major 2d array number[][] with shape (A.length, x.length).\n *          ret[0] is [A1 @ x1, A2 @ x1, ..., An @ x1]\n */\nexport function sparseMatmul(A: LinearForm[], x: DynStat[]) {\n  return x.map(dyn => A.map(({ w }) => Object.entries(w).reduce((a, [k, wk]) => a + wk * (dyn[k] ?? 0), 0)))\n}\n\n/**\n * Sparse matrix multiplication between A and x, followed by a max() along the rows.\n */\nexport function sparseMatmulMax(A: LinearForm[], x: DynStat[]) {\n  return A.map(({ w }) => Math.max(...x.map(dyn => Object.entries(w).reduce((a, [k, wk]) => a + wk * (dyn[k] ?? 0), 0))))\n}\n","import { constant, sum, prod } from \"./utils\"\nimport { NumNode } from \"./type\"\nimport { allOperations, optimize } from \"./optimization\"\nimport { mapFormulas } from \"./internal\"\nimport { ArtifactBuildData, ArtifactsBySlot, DynStat } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\nimport { LinearForm, maxWeight, toLinearUpperBound } from \"./linearUpperBound\"\nimport { foldLikeTerms, ExpandedPolynomial } from \"./expandPoly\"\nimport { ArtifactSetKey } from \"../Types/consts\"\n\nexport function foldSum(nodes: readonly NumNode[]) {\n  if (nodes.length === 1) return nodes[0]\n  nodes = nodes.flatMap(n => n.operation === 'add' ? n.operands : n)\n  let constVal = nodes.reduce((pv, n) => n.operation === 'const' ? pv + n.value : pv, 0)\n  nodes = nodes.filter(n => n.operation !== 'const')\n\n  if (nodes.length === 0) return constant(constVal)\n  if (constVal === 0) return sum(...nodes)\n  return sum(...nodes, constant(constVal))\n}\n\nexport function foldProd(nodes: readonly NumNode[]) {\n  if (nodes.length === 1) return nodes[0]\n  nodes = nodes.flatMap(n => n.operation === 'mul' ? n.operands : n)\n  let constVal = nodes.reduce((pv, n) => n.operation === 'const' ? pv * n.value : pv, 1)\n  nodes = nodes.filter(n => n.operation !== 'const')\n\n  if (nodes.length === 0) return constant(constVal)\n  if (constVal === 1) return prod(...nodes)\n  return prod(...nodes, constant(constVal))\n}\n\nexport function slotUpperLower(a: ArtifactBuildData[]) {\n  let statsMin: DynStat = {}\n  let statsMax: DynStat = {}\n  let sets = new Set<ArtifactSetKey | undefined>()\n  a.forEach(art => {\n    for (const statKey in art.values) {\n      statsMin[statKey] = Math.min(art.values[statKey], statsMin[statKey] ?? Infinity)\n      statsMax[statKey] = Math.max(art.values[statKey], statsMax[statKey] ?? -Infinity)\n    }\n    if (art.set) {\n      statsMax[art.set] = 1\n      statsMin[art.set] = 0\n    }\n    sets.add(art.set)\n  })\n  if (sets.size === 1 && a[0].set) statsMin[a[0].set] = 1\n  return { statsMin, statsMax }\n}\n\nexport function statsUpperLower(a: ArtifactsBySlot) {\n  let statsMin: DynStat = { ...a.base }\n  let statsMax: DynStat = { ...a.base }\n  Object.entries(a.values).forEach(([slotKey, slotArts]) => {\n    const { statsMin: smin, statsMax: smax } = slotUpperLower(slotArts)\n    Object.keys(smin).forEach(sk => {\n      statsMin[sk] = smin[sk] + (statsMin[sk] ?? 0)\n      statsMax[sk] = smax[sk] + (statsMax[sk] ?? 0)\n    })\n  })\n  return { statsMin, statsMax }\n}\n\nexport function reduceFormula(f: NumNode[], lower: DynStat, upper: DynStat) {\n  const fixedStats = Object.keys(lower).filter(statKey => lower[statKey] === upper[statKey])\n  let f2 = mapFormulas(f, n => n, n => {\n    if (n.operation === 'read' && fixedStats.includes(n.path[1])) return constant(lower[n.path[1]])\n    if (n.operation === 'threshold') {\n      const [branch, branchVal, ge, lt] = n.operands\n      if (branch.operation === 'read' && branchVal.operation === 'const') {\n        if (lower[branch.path[1]] >= branchVal.value) return ge\n        if (upper[branch.path[1]] < branchVal.value) return lt\n      }\n    }\n    return n\n  })\n\n  return optimize(f2, {})\n}\n\nexport function reducePolynomial(f: ExpandedPolynomial[], lower: DynStat, upper: DynStat): ExpandedPolynomial[] {\n  const fixedStats = Object.keys(lower).filter(statKey => lower[statKey] === upper[statKey])\n  return f.map(({ nodes, terms }) => {\n    // 1. Reduce nodes by substituting constants\n    const tagNodePairs = Object.entries(nodes)\n    const reducedNodes = mapFormulas(tagNodePairs.map(([k, v]) => v), n => n, n => {\n      switch (n.operation) {\n        case 'read':\n          if (fixedStats.includes(n.path[1])) return constant(lower[n.path[1]])\n          return n\n        case 'threshold':\n          const [branch, branchVal, ge, lt] = n.operands\n          if (branch.operation === 'const' && branchVal.operation === 'const')\n            return branch.value >= branchVal.value ? ge : lt\n          if (branch.operation === 'read' && branchVal.operation === 'const') {\n            if (lower[branch.path[1]] >= branchVal.value) return ge\n            if (upper[branch.path[1]] < branchVal.value) return lt\n          }\n          else throw Error('Branch between non-read and non-const!!!')\n          return n\n        case 'add':\n          return foldSum(n.operands)\n        case 'mul':\n          return foldProd(n.operands)\n        case 'res': case 'sum_frac':\n          if (n.operands.every(ni => ni.operation === 'const')) {\n            const out = allOperations[n.operation](n.operands.map(ni => ni.operation === 'const' ? ni.value : NaN))\n            return constant(out)\n          }\n          return n\n        case 'min': case 'max':\n          // TODO: reduce min & max\n          if (n.operands.every(ni => ni.operation === 'const')) {\n            const out = allOperations[n.operation](n.operands.map(ni => ni.operation === 'const' ? ni.value : NaN))\n            return constant(out)\n          }\n          return n\n        default:\n          return n\n      }\n    })\n\n    // 2a. Find all the nodes that have been reduced to constants\n    let tagsToKill = {} as Dict<string, number>\n    reducedNodes.forEach((n, i) => {\n      if (n.operation !== 'const') return\n      const [tag] = tagNodePairs[i]\n      tagsToKill[tag] = n.value\n    })\n\n    // 2b. Substitute the constant nodes in where possible\n    let newTerms = terms.map(mon => {\n      let c = mon.coeff\n      const newTerms = mon.terms.filter(t => {\n        if (tagsToKill[t] !== undefined) {\n          c *= tagsToKill[t]!\n          return false\n        }\n        return true\n      })\n      if (c === 0) return { coeff: 0, terms: [] }\n      return { coeff: c, terms: newTerms }\n    })\n\n    // 3. Delete all the constant tags & add like terms together\n    let newNodes = Object.fromEntries(reducedNodes.map((n, i) => [tagNodePairs[i][0], n]))\n    Object.keys(tagsToKill).forEach(t => delete newNodes[t])\n    return { nodes: newNodes, terms: foldLikeTerms(newTerms) }\n  })\n}\n\n/**\n * Estimates maximum value across an array of formulas\n * @param f              Functions to maximize\n * @param a              Artifact set\n * @param cachedCompute  Optional Prior cached compute. If specified, will re-calculate `maxEst` assuming `lin, lower, upper` are correct.\n * @returns              CachedCompute\n */\ntype MaxEstQuery2 = { f: ExpandedPolynomial[], a: ArtifactsBySlot, cachedCompute: { lower: DynStat, upper: DynStat } }\n  | { f?: undefined, cachedCompute: { lin: LinearForm[], lower: DynStat, upper: DynStat }, a: ArtifactsBySlot }\nexport function estimateMaximum({ f, a, cachedCompute }: MaxEstQuery2) {\n  if (f === undefined) {\n    return { maxEst: cachedCompute.lin.map(l => maxWeight(a, l)), ...cachedCompute }\n  }\n\n  const { lower, upper } = cachedCompute\n  const est = f.map(fi => {\n    const lin = toLinearUpperBound(fi, lower, upper)\n    return { maxEst: maxWeight(a, lin), lin }\n  })\n\n  return {\n    maxEst: est.map(({ maxEst }) => maxEst),\n    lin: est.map(({ lin }) => lin),\n    lower, upper\n  }\n}\n\nexport function fillBuffer(stats: DynStat, mapping: Dict<string, number>, buffer: Float64Array) {\n  Object.entries(stats)\n    .filter(([k]) => mapping[k] !== undefined)\n    .forEach(([k, v]) => buffer[mapping[k]!] = v)\n}\n","import type { NumNode } from '../../../../Formula/type';\nimport { precompute } from '../../../../Formula/optimization';\nimport { allSlotKeys, ArtifactSetKey } from '../../../../Types/consts';\nimport { estimateMaximum, fillBuffer, reducePolynomial, slotUpperLower, statsUpperLower } from '../../../../Formula/addedUtils';\nimport type { ArtSetExclusionFull, CachedCompute, InterimResult, Setup, Split, SplitWork, SubProblem, SubProblemNC, SubProblemWC } from './BackgroundWorker';\nimport { ArtifactBuildData, ArtifactsBySlot, countBuilds, DynStat, filterArts, RequestFilter } from './common';\nimport { cartesian, objectKeyMap, objectKeyValueMap } from '../../../../Util/Util';\nimport { sparseMatmul, sparseMatmulMax } from '../../../../Formula/linearUpperBound';\nimport { toNumNode } from '../../../../Formula/expandPoly';\n\nexport class SplitWorker {\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: NumNode[]\n  artSet: Dict<ArtifactSetKey | 'uniqueKey', number[]>\n\n  subproblems: { count: number, heur: number, subproblem: SubProblem }[] = []\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, artSetExclusion }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.nodes = filters.map(x => x.value)\n    this.callback = callback\n\n    this.min.push(-Infinity)\n    this.nodes.push(optimizationTarget)\n\n    this.artSet = objectKeyValueMap(Object.entries(artSetExclusion), ([setKey, v]) => {\n      if (setKey === 'rainbow') return ['uniqueKey', v.map(v => v + 1)]\n      return [setKey, v.flatMap(v => (v === 2) ? [2, 3] : [4, 5])]\n    })\n  }\n\n  addSubProblem(subproblem: SubProblem) {\n    const count = countBuilds(filterArts(this.arts, subproblem.filter))\n    if (count === 0) return\n    let maxEst = subproblem.cache ? subproblem.cachedCompute.maxEst[subproblem.cachedCompute.maxEst.length - 1] : 0\n    this.subproblems.push({ count, heur: maxEst, subproblem })\n  }\n\n  /**\n   * Iteratively splits the subproblem (depth-first) into smaller chunks until it is small enough,\n   *   as determined by `minCount`. Repeat up to `maxIter` times before returning control to the main thread.\n   * @param minCount\n   * @param maxIter\n   * @returns Either ONE [subproblem] of size `minCount` or ZERO [] subproblems.\n   */\n  split({ threshold, minCount, maxIter, subproblem }: Split): SubProblem[] {\n    if (threshold > this.min[this.min.length - 1]) this.min[this.min.length - 1] = threshold\n    if (subproblem) this.addSubProblem(subproblem)\n    const initialProblemTotal = this.subproblems.reduce((a, { count }) => a + count, 0)\n\n    // console.log('split', this.min[this.min.length - 1], {\n    //   todo: this.subproblems.length, buildsleft: this.subproblems.reduce((a, { count }) => a + count, 0)\n    // }, this.subproblems)\n\n    let n = 0\n    while (n < maxIter && this.subproblems.length) {\n      n += 1\n      const { count, subproblem } = this.subproblems.pop()!\n      if (count <= minCount) {\n        const newProblemTotal = this.subproblems.reduce((a, { count }) => a + count, 0) + count\n        this.callback({ command: 'interim', tested: 0, failed: 0, skipped: initialProblemTotal - newProblemTotal, buildValues: undefined })\n        return [subproblem]\n      }\n\n      this.splitBNB(this.min[this.min.length - 1], subproblem).forEach(subp => this.addSubProblem(subp))\n    }\n    const newProblemTotal = this.subproblems.reduce((a, { count }) => a + count, 0)\n    this.callback({ command: 'interim', tested: 0, failed: 0, skipped: initialProblemTotal - newProblemTotal, buildValues: undefined })\n    return []\n  }\n\n  popOne() {\n    // Yield largest subproblem (requests => level-order / prio queue order)\n    if (this.subproblems.length === 0) return undefined\n    let ret = { i: -1, heur: -Infinity }\n    for (let i = 1; i < this.subproblems.length; i++) {\n      const { heur, subproblem } = this.subproblems[i]\n      if (heur > ret.heur) ret = { i, heur }\n    }\n    if (ret.i < 0) return undefined\n    return this.subproblems.splice(ret.i, 1)[0].subproblem\n  }\n\n  /**\n   * Iteratively splits the subproblem (breadth-first) into many many chunks to better distribute the B&B workload\n   *   between the workers. There is some danger of over-fracturing the chunks.\n   * @returns A list of [subproblems] with length `numSplits`\n   */\n  splitWork({ threshold, numSplits, subproblem }: SplitWork) {\n    if (threshold > this.min[this.min.length - 1]) this.min[this.min.length - 1] = threshold\n    if (subproblem) this.addSubProblem(subproblem)\n    const initialProblemTotal = this.subproblems.reduce((a, { count }) => a + count, 0)\n\n    console.log('splitWork', this.min[this.min.length - 1], {\n      todo: this.subproblems.length, buildsleft: this.subproblems.reduce((a, { count }) => a + count, 0)\n    })\n\n    while (this.subproblems.length > 0 && this.subproblems.length <= numSplits) {\n      const { subproblem } = this.subproblems.shift()!\n      this.splitBNB(this.min[this.min.length - 1], subproblem).forEach(subp => this.addSubProblem(subp))\n    }\n    const newProblemTotal = this.subproblems.reduce((a, { count }) => a + count, 0)\n    this.callback({ command: 'interim', tested: 0, failed: 0, skipped: initialProblemTotal - newProblemTotal, buildValues: undefined })\n    console.log('exit splitWork. Filters pre-exit', this.subproblems)\n    return this.subproblems.splice(0, numSplits).map(({ subproblem }) => subproblem)\n  }\n\n  /**\n   * splitBNB takes a SubProblem and tries to perform Branch and Bound (BnB) pruning to solve for the\n   *   optimal damage value. As the name states, there are two main phases: Branching and Bounding.\n   *   The bounding is handled by an `estimateMaximum()` function call, and the branching is done by `pickBranch()`.\n   *\n   * @param threshold  Objective function lower bound threshold\n   * @param subproblem The subproblem to split\n   * @returns An array of up to 32 splits of the input subproblem.\n   */\n  splitBNB(threshold: number, subproblem: SubProblem) {\n    const a = filterArts(this.arts, subproblem.filter)\n\n    // 1. check constraints & simplify formula.\n    if (subproblem.cache === false) {\n      const { statsMin, statsMax } = statsUpperLower(a)\n\n      // 1a. Simplify formula, cut off always-satisfied constraints, and validate setExclusion stuff.\n      let sub2 = reduceSubProblem(subproblem, statsMin, statsMax)\n      if (sub2 === undefined) return []\n\n      // 1b. Check that remaining constraints are satisfiable\n      let f = [...sub2.constraints.map(({ value }) => value), sub2.optimizationTarget]\n      const cachedCompute = estimateMaximum({ f, a, cachedCompute: { lower: statsMin, upper: statsMax } })\n      if (sub2.constraints.some(({ min }, i) => cachedCompute.maxEst[i] < min)) return []\n      if (cachedCompute.maxEst[cachedCompute.maxEst.length - 1] < threshold) return []\n\n      subproblem = { ...sub2, cache: true, cachedCompute }\n    }\n    // 1c. A cached subproblem skips most of the above constraint checking, but `threshold` may change\n    //     between iterations.\n    const { cachedCompute: { maxEst, lin } } = subproblem\n    if (maxEst[maxEst.length - 1] < threshold) return []\n\n    // console.log(subproblem)\n\n    // 2. Pick branching parameter\n    let numBuilds = Object.values(a.values).reduce((tot, arts) => tot * arts.length, 1)\n    const { k } = pickBranch(a, threshold, subproblem)\n    const branchVals = Object.fromEntries(Object.entries(a.values).map(([slotKey, arts]) => {\n      const vals = arts.map(a => a.values[k])\n      return [slotKey, (Math.min(...vals) + Math.max(...vals)) / 2]\n    }))\n    const branchArts = Object.fromEntries(Object.entries(a.values).map(([slotKey, arts]) => {\n      const above = arts.filter(art => art.values[k] < branchVals[slotKey] ? true : false)\n      const below = arts.filter(art => art.values[k] < branchVals[slotKey] ? false : true)\n\n      const wAbove = sparseMatmulMax(lin, above.map(({ values }) => values))\n      const wBelow = sparseMatmulMax(lin, below.map(({ values }) => values))\n      return [slotKey, [{ arts: below, ...slotUpperLower(below), ww: wBelow }, { arts: above, ...slotUpperLower(above), ww: wAbove }]]\n    }))\n    const w0 = sparseMatmulMax(lin, [a.base]).map((wi, i) => wi + lin[i].c)\n\n    // 3. Perform branching. Check bounding during the branching phase as well.\n    let branches = [] as { numBuilds: number, heur: number, subproblem: SubProblemWC }[]\n    cartesian([0, 1], [0, 1], [0, 1], [0, 1], [0, 1]).forEach(([s1, s2, s3, s4, s5]) => {\n      let selected = {\n        flower: branchArts.flower[s1],\n        plume: branchArts.plume[s2],\n        sands: branchArts.sands[s3],\n        goblet: branchArts.goblet[s4],\n        circlet: branchArts.circlet[s5],\n      }\n\n      let z: ArtifactsBySlot = {\n        base: { ...a.base },\n        values: objectKeyValueMap(Object.entries(selected), ([k, { arts }]) => [k, arts])\n      }\n\n      let numBuilds = Object.values(z.values).reduce((tot, arts) => tot * arts.length, 1)\n      if (numBuilds === 0) return;\n\n      // 1b. (fast) Check that existing constraints are satisfiable\n      const maxEstC = [...w0]\n      Object.values(selected).forEach(({ ww }) => ww.forEach((w, i) => maxEstC[i] += w))\n      if (subproblem.constraints.some(({ min }, i) => maxEstC[i] < min)) return;\n      if (maxEstC[maxEstC.length - 1] < threshold) return;\n\n      let statsMin = { ...a.base }\n      let statsMax = { ...a.base }\n      Object.values(selected).forEach(({ statsMin: smin, statsMax: smax }) => {\n        Object.entries(smin).forEach(([k, v]) => statsMin[k] = v + (statsMin[k] ?? 0))\n        Object.entries(smax).forEach(([k, v]) => statsMax[k] = v + (statsMax[k] ?? 0))\n      })\n\n      // 1a. Simplify formula, cut off always-satisfied constraints, and validate setExclusion stuff.\n      let sub2 = reduceSubProblem(subproblem, statsMin, statsMax)\n      if (sub2 === undefined) return;\n\n      // 1b. (slow) Check that existing constraints are satisfiable\n      let f = [...sub2.constraints.map(({ value }) => value), sub2.optimizationTarget]\n      let cc2 = estimateMaximum({ a: z, f, cachedCompute: { lower: statsMin, upper: statsMax } })\n      if (sub2.constraints.some(({ min }, i) => cc2.maxEst[i] < min)) return;\n      if (cc2.maxEst[cc2.maxEst.length - 1] < threshold) return;\n\n      let newFilter: RequestFilter = objectKeyMap(allSlotKeys, slot => ({ kind: 'id' as 'id', ids: new Set(z.values[slot].map(art => art.id)) }))\n      branches.push({\n        numBuilds,\n        heur: cc2.maxEst[cc2.maxEst.length - 1],\n        subproblem: {\n          ...sub2,\n          filter: newFilter,\n          cache: true,\n          cachedCompute: cc2,\n          depth: sub2.depth + 1\n        }\n      })\n    })\n    branches.sort((a, b) => b.numBuilds - a.numBuilds)\n    return branches.map(({ subproblem }) => subproblem)\n  }\n}\n\n/**\n * Takes a Subproblem and reduces whatever formulas it can. Also deletes any constraint equations that are always active\n *   (and therefore have no contribution)\n *\n * @param sub          Subproblem to reduce/simplify.\n * @param statsMinMax  Reduction is based on the range of valid stats.\n * @returns  A new subproblem that should be identical to the previous one, but with fewer components.\n *           If the subproblem is unsatisfiable, return `undefined`\n */\nfunction reduceSubProblem({ optimizationTarget, constraints, artSetExclusion, filter, depth }: SubProblem, statsMin: DynStat, statsMax: DynStat, debug = false): SubProblemNC | undefined {\n  // const { optimizationTarget, constraints, artSetExclusion } = sub\n  let subnodes = [...constraints.map(({ value }) => value), optimizationTarget]\n  const submin = constraints.map(({ min }) => min)\n\n  subnodes = reducePolynomial(subnodes, statsMin, statsMax)\n\n  // 1. Check for always-feasible constraints.\n  const [compute, mapping, buffer] = precompute(constraints.map(({ value }) => toNumNode(value)), n => n.path[1])\n  fillBuffer(statsMin, mapping, buffer)\n  const result = compute()\n  const active = submin.map((m, i) => m > result[i])\n\n  const newOptTarget = subnodes.pop()!\n  const newConstraints = subnodes.map((value, i) => ({ value, min: submin[i] })).filter((_, i) => active[i])\n  if (debug) console.log('reduceSubP', { statsMin, subnodes, submin, result, active })\n\n  // 2. Check for never-active and always-active ArtSetExcl constraints.\n  let newArtExcl = {} as ArtSetExclusionFull\n  for (const [setKey, exclude] of Object.entries(artSetExclusion)) {\n    if (setKey === 'uniqueKey') {\n      // TODO: Check and exclude rainbow bullshit.\n      newArtExcl[setKey] = exclude\n      continue\n    }\n    const reducedExcl = exclude.filter(n => statsMin[setKey] <= n && n <= statsMax[setKey])        // Cut away never-active\n    if (reducedExcl.includes(statsMin[setKey]) && reducedExcl.includes(statsMax[setKey])) return;  // Always active.\n    if (reducedExcl.length > 0) newArtExcl[setKey] = reducedExcl\n  }\n\n  return {\n    cache: false,\n    optimizationTarget: newOptTarget,\n    constraints: newConstraints,\n    artSetExclusion: newArtExcl,\n\n    filter, depth\n  }\n}\n\n/**\n * Decides how to split between different branches.\n * TODO: Branch values should also be calculated & returned here\n * @param a     Artifact set\n * @param lin   Linear form from compute\n * @returns     The key to branch on.\n */\nfunction pickBranch(a: ArtifactsBySlot, threshold: number, subproblem: SubProblemWC) {\n  const { constraints, cachedCompute: { lin }, artSetExclusion } = subproblem\n  let wMins = sparseMatmulMax(lin, [a.base])\n  let wMaxs = sparseMatmulMax(lin, [a.base])\n  Object.entries(a.values).forEach(([slotKey, arts]) => {\n    const matmul = sparseMatmul(lin, arts.map(({ values }) => values))\n    wMins.forEach((_, i) => {\n      wMaxs[i] += Math.max(...matmul.map(row => row[i]))\n      wMins[i] += Math.min(...matmul.map(row => row[i]))\n    })\n  })\n\n  const thr = [...constraints.map(({ min }) => min), threshold]\n  // Consider this the \"probability\" a randomly chosen set of 5 artifacts will violate\n  //   the constraints; assuming the marginal distribution of the values are uniform on\n  //   their ranges. Honestly it's a really wacky heuristic but it does a good job\n  //   at telling the algorithm to branch targeting a constraint when that constraint\n  //   becomes difficult to satsify. (>50% chance to violate)\n  const decisionHeur = thr.map((th, i) => (th - wMins[i]) / (wMaxs[i] - wMins[i])).map(v => v < .5 ? -1 : v)\n  decisionHeur[decisionHeur.length - 1] = Math.max(decisionHeur[decisionHeur.length - 1], 0)\n  const argMax = decisionHeur.reduce((m, c, i) => c > decisionHeur[m] ? i : m, 0)\n\n  // TODO: figure out a heuristic for when to branch on artSetExclusion\n\n  let linToConsider = lin[argMax]\n  // let linToConsider = lin[lin.length - 1]\n  let keysToConsider = Object.keys(linToConsider.w)\n  // let keysToConsider = [...Object.keys(linToConsider.w), ...Object.keys(artSetExclusion).filter(k => k !== 'uniqueKey')]\n\n  let shatterOn = { k: '', heur: -1 }\n  keysToConsider.forEach(k => {\n    const postShatterRangeReduction = Object.entries(a.values).reduce((rangeReduc, [slot, arts]) => {\n      const vals = arts.map(a => a.values[k])\n      const minv = Math.min(...vals)\n      const maxv = Math.max(...vals)\n      if (minv === maxv) return rangeReduc\n\n      const branchVal = (minv + maxv) / 2\n      const glb = Math.max(...vals.filter(v => v <= branchVal))\n      const lub = Math.min(...vals.filter(v => v > branchVal))\n      return rangeReduc + Math.min(maxv - glb, lub - minv)\n    }, 0)\n    const heur = linToConsider.w[k] * postShatterRangeReduction\n    // console.log('old', { k, heur })\n    if (heur > shatterOn.heur) shatterOn = { k, heur }\n  })\n\n  if (shatterOn.k === '') {\n    console.log(subproblem, reduceSubProblem(subproblem, subproblem.cachedCompute.lower, subproblem.cachedCompute.upper, true))\n    console.log('===================== SHATTER BROKE ====================', lin, a)\n    throw Error('Shatter broke...')\n  }\n  return shatterOn\n}\n","import { ExpandedPolynomial } from '../../../../Formula/expandPoly'\nimport { LinearForm } from '../../../../Formula/linearUpperBound'\nimport { NumNode } from '../../../../Formula/type'\nimport { ArtifactSetKey } from '../../../../Types/consts'\nimport { assertUnreachable } from '../../../../Util/Util'\nimport { ArtSetExclusion } from './BuildSetting'\nimport { ArtifactsBySlot, artSetPerm, Build, countBuilds, DynStat, filterArts, filterFeasiblePerm, PlotData, RequestFilter } from \"./common\"\nimport { ComputeWorker } from \"./ComputeWorker\"\nimport { SplitWorker } from \"./SplitWorker\"\n\nlet id: number, splitWorker: SplitWorker, computeWorker: ComputeWorker\n\nonmessage = ({ data }: { data: WorkerCommand }) => {\n  const command = data.command\n  let result: WorkerResult\n  switch (command) {\n    case \"setup\":\n      id = data.id\n      const callback = (interim: InterimResult) => postMessage({ id, ...interim })\n      splitWorker = new SplitWorker(data, callback)\n      computeWorker = new ComputeWorker(data, callback)\n      result = { command: \"iterate\" }\n      break\n    case \"split\":\n      result = { command: \"split\", subproblems: splitWorker.split(data), ready: splitWorker.subproblems.length === 0 }\n      break\n    case \"splitwork\":\n      result = { command: 'split', subproblems: splitWorker.splitWork(data), ready: splitWorker.subproblems.length === 0 }\n      break\n    case \"iterate\":\n      const { threshold, subproblem } = data\n      computeWorker.compute(threshold, subproblem)\n      result = { command: \"iterate\" }\n      break\n    case \"finalize\":\n      computeWorker.refresh(true)\n      const { builds, plotData } = computeWorker\n      result = { command: \"finalize\", builds, plotData }\n      break\n    case \"count\":\n      {\n        const { exclusion } = data, arts = computeWorker.arts\n        const setPerm = filterFeasiblePerm(artSetPerm(exclusion, [...new Set(Object.values(arts.values).flatMap(x => x.map(x => x.set!)))]), arts)\n        let counts = data.arts.map(_ => 0)\n        for (const perm of setPerm)\n          data.arts.forEach((arts, i) => counts[i] += countBuilds(filterArts(arts, perm)));\n        result = { command: \"count\", counts }\n        break\n      }\n    case \"share\":\n      const oo = splitWorker.popOne()\n      result = { command: 'share', subproblem: oo, sender: data.sender }\n      break\n    default: assertUnreachable(command)\n  }\n  postMessage({ id, ...result });\n}\n\n\nexport type ArtSetExclusionFull = Dict<Exclude<ArtifactSetKey, \"PrayersForDestiny\" | \"PrayersForIllumination\" | \"PrayersForWisdom\" | \"PrayersToSpringtime\"> | \"uniqueKey\", number[]>\nexport type SubProblem = SubProblemNC | SubProblemWC\nexport type SubProblemNC = {\n  cache: false,\n  optimizationTarget: ExpandedPolynomial,\n  constraints: { value: ExpandedPolynomial, min: number }[],\n  artSetExclusion: ArtSetExclusionFull,\n\n  filter: RequestFilter,\n  depth: number,\n}\nexport type SubProblemWC = {\n  cache: true,\n  optimizationTarget: ExpandedPolynomial,\n  constraints: { value: ExpandedPolynomial, min: number }[],\n  artSetExclusion: ArtSetExclusionFull,\n\n  filter: RequestFilter,\n  cachedCompute: CachedCompute,\n  depth: number,\n}\nexport type CachedCompute = {\n  maxEst: number[],\n  lin: LinearForm[],\n  lower: DynStat,\n  upper: DynStat\n}\n\nexport type WorkerCommand = Setup | Split | SplitWork | Iterate | Finalize | Share | Count\nexport type WorkerResult = InterimResult | SplitResult | IterateResult | FinalizeResult | ShareResult | CountResult\n\nexport interface Setup {\n  command: \"setup\"\n\n  id: number\n  arts: ArtifactsBySlot\n\n  optimizationTarget: NumNode\n  filters: { value: NumNode, min: number }[]\n  artSetExclusion: ArtSetExclusion\n  plotBase: NumNode | undefined,\n  maxBuilds: number\n}\nexport interface Split {\n  command: \"split\"\n  threshold: number\n  minCount: number\n  maxIter: number\n\n  subproblem?: SubProblem\n}\nexport interface SplitWork {\n  command: \"splitwork\"\n  threshold: number\n  numSplits: number\n\n  subproblem?: SubProblem\n}\nexport interface Iterate {\n  command: \"iterate\"\n  threshold: number\n\n  subproblem: SubProblem\n}\nexport interface Finalize {\n  command: \"finalize\"\n}\nexport interface Share {\n  command: \"share\"\n  sender: number\n}\nexport interface Count {\n  command: \"count\"\n  arts: ArtifactsBySlot[]\n  exclusion: ArtSetExclusion\n}\n\nexport interface InterimResult {\n  command: \"interim\"\n  buildValues: number[] | undefined\n  /** The number of builds since last report, including failed builds */\n  tested: number\n  /** The number of builds that does not meet the min-filter requirement since last report */\n  failed: number\n  skipped: number\n}\nexport interface IterateResult {\n  command: \"iterate\"\n}\nexport interface SplitResult {\n  command: \"split\"\n  ready: boolean\n  subproblems: SubProblem[]\n}\nexport interface FinalizeResult {\n  command: \"finalize\"\n  builds: Build[]\n  plotData?: PlotData\n}\nexport interface ShareResult {\n  command: \"share\"\n  subproblem?: SubProblem\n  sender: number\n}\nexport interface CountResult {\n  command: \"count\"\n  counts: number[]\n}\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","isArray","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","iter","obj","key","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_typeof","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","undefined","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","_i","_s","_arr","_n","_d","objPathValue","console","reduce","a","k","objectKeyMap","map","fromEntries","objectKeyValueMap","items","t","objectMap","entries","v","rangeGen","to","range","assertUnreachable","cartesian","q","b","flatMap","d","flat","constant","NaN","percent","operation","operands","Number","MAX_VALUE","Infinity","min","intoOps","max","sum","prod","customRead","path","intoV","forEachNodes","formulas","topDown","bottomUp","visiting","Set","visited","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","get","arrayEqual","set","every","allCommutativeMonoidOperations","x","Math","mul","allOperations","res","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","optimize","topLevelData","shouldFold","_formula","deduplicate","flatten","constantFold","precompute","binding","uniqueReadStrings","uniqueNumbers","mapping","_","accu","ins","op","locations","readStrings","readOffset","constValues","computations","str","offset","ref","node","out","buff","fill","buffer","Float64Array","number","copyList","src","copyFormula","dst","j","flattened","dep","elementCounts","array","common","counts","factored","count","candidatesByOperation","remainingCounts","currentCounts","commonCounts","nextCounts","total","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","origin","data","processed","nextContextMap","fold","old","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","smallest","v1","v2","match","unmatch","list","nextContext","allSlotKeys","filterFeasiblePerm","artSetPerm","pruneAll","nodes","minimum","arts","numTop","exclusion","forced","should","deps","pruneNodeRange","reaffine","pruneOrder","pruneArtRange","some","newArts","newNodes","forceRename","affineNodes","topLevelAffine","visit","isAffine","_op","dynKeys","nonConst","base","size","current","nextDynKey","affine","affineMap","reaffineArt","stat","dyn","slot","id","offsets","baseValue","progress","noRainbow","rainbow","noSwitchIn","noSwitchOut","includes","newList","art","other","greaterEqual","greater","baseRange","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","nodeRange","operandRanges","newOperands","op1","op2","ranges","reads","_f","computeMinMax","c","minMaxes","filterArts","filters","kind","ids","sets","countBuilds","_count","_artSets","artSets","available","exclusionToAllowed","populateShapes","indexOfShape","shape","check_free","remaining","rainbows","isolated","missing","rejected","required","allowedSet","allowedCounts","groupped","used","requiredRainbows","l","usableRainbows","sort","replacing","allowedRainbows","shapes","noFilter","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","ComputeWorker","callback","optimizationTarget","plotBase","maxBuilds","builds","buildValues","plotData","interimReport","refresh","command","tested","failed","skipped","newThreshold","subproblem","constraints","artSetExclusion","depth","preArts","totalCount","cache","cachedCompute","maxEst","compute","maxFound","permute","cc","log","gap","setKeyCounts","passArtExcl","setKey","nRainbow","m","build","artifactIds","plot","force","plots","scale","round","mergePlot","sumM","monomials","prodM","monos","ret","nxt","coeff","terms","constantM","readM","tag","foldLikeTerms","mono","mon","termsA","termsB","ai","splice","toNumNode","pivotInplace","A","Aij","h","findPiv1","r","minloc","cmp","findPiv2","minMax","lower","upper","fillBuffer","minval","handleResArg","flippedResOp","flipOps","branch","bval","ge","lt","resf","toLinearUpperBound","stat2tag","toPureRead","mon1","rop","cop","thresh","minVal","maxVal","em","denom","minEM","maxEM","sqrt","below","slope","nodesToMap","t2","nt","lins","w","bounds","nVar","boundScale","scaleProd","soln","cons","coords","objective","Ab","rows","cols","tableau","Ai","cj","ijTrack","ij","targ","side","ncol","backtrack","solveLP","wi","lub","lin","maxWeight","sparseMatmulMax","maxTotVal","slotArts","slotUpperLower","statsMin","statsMax","statKey","reducePolynomial","fixedStats","tagNodePairs","reducedNodes","branchVal","constVal","pv","foldSum","foldProd","ni","tagsToKill","newTerms","estimateMaximum","est","fi","stats","splitWorker","computeWorker","SplitWorker","artSet","subproblems","heur","minCount","maxIter","addSubProblem","initialProblemTotal","newProblemTotal","splitBNB","subp","numSplits","todo","buildsleft","shift","smin","smax","sk","statsUpperLower","sub2","reduceSubProblem","tot","wMins","wMaxs","matmul","row","thr","decisionHeur","th","argMax","linToConsider","keysToConsider","shatterOn","postShatterRangeReduction","rangeReduc","vals","minv","maxv","glb","pickBranch","branchVals","slotKey","branchArts","above","wAbove","wBelow","ww","w0","branches","s1","s2","s3","s4","s5","flower","plume","sands","goblet","circlet","z","numBuilds","maxEstC","cc2","newFilter","debug","subnodes","submin","active","newOptTarget","newConstraints","newArtExcl","exclude","reducedExcl","onmessage","interim","postMessage","split","ready","splitWork","setPerm","perm","oo","popOne","sender"],"sourceRoot":""}